Collected scripts from /home/jaco/develops/projects/ZUNGRI/frontend/src
Generated on 2025-07-28 20:41:38.372143


================================================================================
File: app.d.ts
================================================================================

/**
 * @file App Type Definitions (app.d.ts)
 * @description Contains global type definitions for the SvelteKit application.
 *
 * @dependencies
 * - @supabase/supabase-js: Provides the `SupabaseClient` and `Session` types.
 * - $lib/types/supabase: Contains generated database types (assuming this path is correct).
 */

import type { SupabaseClient, Session } from '@supabase/supabase-js';
import type { Database } from '$lib/types/supabase'; // Adjust path if needed

declare global {
	namespace App {
		interface Error {
			message: string;
			details?: string;
			code?: string;
		}

		/**
		 * @interface Locals
		 * @description Defines `event.locals` properties added by `hooks.server.ts`.
		 */
		interface Locals {
			supabase: SupabaseClient<Database>;
			getSession(): Promise<Session | null>;
			session: Session | null;
			accessToken: string | null; // Keep this if backend API needs it
		}

		/**
		 * @interface PageData
		 * @description Defines the common shape of data returned from load functions.
		 * Root layouts will populate session and potentially supabase client.
		 */
		interface PageData {
			session: Session | null;
			// Add supabase client if passed from universal load
			supabase?: SupabaseClient<Database>;
			flash?: { type: 'success' | 'error'; message: string };
		}

		// interface PageState {}
		// interface Platform {}
	}
}

export { };


================================================================================
File: hooks.server.ts
================================================================================

/**
 * @file Server Hooks (hooks.server.ts)
 * @description This file manages internationalization (i18n) using Paraglide,
 * detecting the locale and setting the language context.
 *
 * @dependencies
 * - @sveltejs/kit: `Handle`.
 * - $lib/paraglide: Generated Paraglide i18n handle.
 */

import type { Handle } from '@sveltejs/kit';
import { paraglideMiddleware } from '$lib/paraglide/server';

/**
 * @name paraglideHandle
 * @description Handle for managing internationalization with Paraglide.
 * This middleware detects the locale from the request and sets up the
 * language context for the entire application.
 */
const paraglideHandle: Handle = ({ event, resolve }) =>
    paraglideMiddleware(event.request, ({ request: localizedRequest, locale }) => {
        event.request = localizedRequest;
        return resolve(event, {
            transformPageChunk: ({ html }) => {
                return html.replace('%lang%', locale);
            }
        });
    });

// Export the handle for internationalization
export const handle = paraglideHandle;


================================================================================
File: hooks.ts
================================================================================

import type { Reroute } from '@sveltejs/kit';
import { deLocalizeUrl } from '$lib/paraglide/runtime';

export const reroute: Reroute = (request) => {
	return deLocalizeUrl(request.url).pathname;
};


================================================================================
File: lib/api/apiClient.ts
================================================================================

/**
* @file apiClient.ts
* @purpose Centralized API client for communicating with FastAPI backend
*
* @dependencies
* - SvelteKit's fetch: Server-side fetch during load functions
* - TypeScript: Strong typing for API responses and requests
*
* @notes
* - Handles authentication for admin endpoints
* - Provides error handling and response validation
* - Supports both server-side and client-side requests
* - Error handling: Throws typed errors for proper catch handling
* - Updated to include payment-related endpoints.
*/


import type { OrderCreatePayload } from "$lib/schemas/payment";

// Types based on backend schema structure
export interface Language {
    code: string;
    name: string;
    is_default: boolean;
}

export interface PageContent {
    id: string;
    slug: string;
    language_code: string;
    title: string;
    content: string;
    created_at: string;
    updated_at: string;
}

export interface PageContentCreate {
    slug: string;
    language_code: string;
    title: string;
    content: string;
}

export interface PageContentUpdate {
    title?: string;
    content?: string;
}

export interface ContactForm {
    name: string;
    email: string;
    subject: string;
    message: string;
}

export interface User {
    id: string;
    email: string;
    name?: string;
    role: 'Administrator' | 'Staff';
    profile_image_path?: string;
    created_at: string;
    updated_at: string;
}

export interface TicketType {
    id: string;
    name_translations: Record<string, string>;
    description_translations?: Record<string, string>;
    price: number;
    group_size?: number;
    created_at: string;
    updated_at: string;
}

export interface TimeSlot {
    id: string;
    ticket_type_id: string;
    start_time: string;
    end_time: string;
    capacity: number;
    available_slots: number;
    created_at: string;
    updated_at: string;
}

export interface Merchandise {
    id: string;
    name_translations: Record<string, string>;
    description_translations?: Record<string, string>;
    price: number;
    inventory: number;
    created_at: string;
    updated_at: string;
}

export interface Booking {
    id: string;
    user_id?: string;
    customer_name?: string;
    customer_email?: string;
    booking_date: string;
    time_slot_id: string;
    ticket_type_id: string;
    quantity: number;
    total_price: number;
    status: 'PENDING' | 'CONFIRMED' | 'CANCELLED' | 'COMPLETED';
    order_id?: string;
    source: 'ONLINE' | 'ONSITE';
    created_at: string;
    updated_at: string;
}

export interface Order {
    id: string;
    user_id?: string;
    customer_name?: string;
    customer_email?: string;
    order_date: string;
    total_amount: number;
    payment_status: 'PENDING' | 'PAID' | 'FAILED' | 'REFUNDED';
    payment_intent_id?: string;
    source: 'ONLINE' | 'ONSITE';
    created_at: string;
    updated_at: string;
}

// Error types for better error handling
export class ApiError extends Error {
    constructor(
        public status: number,
        public detail: string,
        public endpoint: string
    ) {
        super(`API Error ${status}: ${detail}`);
        this.name = 'ApiError';
    }
}

export class NetworkError extends Error {
    constructor(public endpoint: string, public originalError: Error) {
        super(`Network error calling ${endpoint}: ${originalError.message}`);
        this.name = 'NetworkError';
    }
}

// API Client configuration
interface ApiClientConfig {
    baseUrl?: string;
    timeout?: number;
    defaultHeaders?: Record<string, string>;
    debug?: boolean;
}

// Main API Client class
export class ApiClient {
    private baseUrl: string;
    private timeout: number;
    private defaultHeaders: Record<string, string>;
    private debug: boolean;

    constructor(config: ApiClientConfig = {}) {
        // Use relative URLs for SvelteKit proxy - this is crucial
        this.baseUrl = config.baseUrl || '/api/v1';
        this.timeout = config.timeout || 30000;
        this.debug = config.debug || false;
        this.defaultHeaders = {
            'Content-Type': 'application/json',
            ...config.defaultHeaders
        };
    }

    /**
     * Internal fetch wrapper with error handling and timeout
     * @param endpoint API endpoint path
     * @param options Fetch options
     * @param customFetch Custom fetch function (for server-side)
     * @returns Promise with parsed response
     */
    private async request<T>(
        endpoint: string,
        options: RequestInit = {},
        customFetch: typeof fetch = fetch
    ): Promise<T> {
        const url = `${this.baseUrl}${endpoint}`;

        if (this.debug) {
            console.log(`üîÑ API Request: ${options.method || 'GET'} ${url}`);
            if (options.body) {
                console.log('üì§ Request body:', options.body);
            }
        }

        // Setup request with timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);

        try {
            const response = await customFetch(url, {
                ...options,
                headers: {
                    ...this.defaultHeaders,
                    ...options.headers
                },
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (this.debug) {
                console.log(`üì• API Response: ${response.status} ${response.statusText} for ${url}`);
            }

            // Handle different content types
            const contentType = response.headers.get('content-type');
            let data: any;

            if (contentType && contentType.includes('application/json')) {
                data = await response.json();
            } else {
                // For endpoints that return simple text or no body
                const text = await response.text();
                data = text ? { message: text } : { message: 'Success' };
            }

            if (!response.ok) {
                if (this.debug) {
                    console.error(`‚ùå API Error: ${response.status} for ${url}`, data);
                }

                throw new ApiError(
                    response.status,
                    data.detail || data.message || `HTTP ${response.status}: ${response.statusText}`,
                    endpoint
                );
            }

            if (this.debug) {
                console.log('‚úÖ API Success:', data);
            }

            return data;
        } catch (error) {
            clearTimeout(timeoutId);

            if (error instanceof ApiError) {
                throw error;
            }

            if (error.name === 'AbortError') {
                throw new NetworkError(endpoint, new Error('Request timeout'));
            }

            // Handle network errors and other fetch failures
            if (error instanceof TypeError && error.message.includes('fetch')) {
                throw new NetworkError(endpoint, new Error('Network connection failed'));
            }

            throw new NetworkError(endpoint, error as Error);
        }
    }

    // Content API methods
    async getPageContent(
        slug: string,
        langCode: string,
        customFetch?: typeof fetch
    ): Promise<PageContent> {
        return this.request<PageContent>(
            `/content/${slug}/${langCode}`,
            { method: 'GET' },
            customFetch
        );
    }

    async submitContactForm(
        contactData: ContactForm,
        customFetch?: typeof fetch
    ): Promise<{ message: string }> {
        return this.request<{ message: string }>(
            '/content/contact',
            {
                method: 'POST',
                body: JSON.stringify(contactData)
            },
            customFetch
        );
    }

    // Admin Content API methods (require authentication)
    async createPageContent(
        contentData: PageContentCreate,
        authToken: string,
        customFetch?: typeof fetch
    ): Promise<PageContent> {
        return this.request<PageContent>(
            '/content/admin/content',
            {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify(contentData)
            },
            customFetch
        );
    }

    async updatePageContent(
        contentId: string,
        contentData: PageContentUpdate,
        authToken: string,
        customFetch?: typeof fetch
    ): Promise<PageContent> {
        return this.request<PageContent>(
            `/content/admin/content/${contentId}`,
            {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify(contentData)
            },
            customFetch
        );
    }

    async getLanguages(
        authToken: string,
        customFetch?: typeof fetch
    ): Promise<Language[]> {
        return this.request<Language[]>(
            '/content/admin/languages',
            {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${authToken}`
                }
            },
            customFetch
        );
    }

    // Ticket API methods
    async getTicketTypes(customFetch?: typeof fetch): Promise<TicketType[]> {
        return this.request<TicketType[]>(
            '/tickets/types',
            { method: 'GET' },
            customFetch
        );
    }

    async getTimeSlots(
        ticketTypeId: string,
        date: string,
        customFetch?: typeof fetch
    ): Promise<TimeSlot[]> {
        return this.request<TimeSlot[]>(
            `/tickets/time-slots/${ticketTypeId}?date=${date}`,
            { method: 'GET' },
            customFetch
        );
    }

    // Merchandise API methods
    async getMerchandise(customFetch?: typeof fetch): Promise<Merchandise[]> {
        return this.request<Merchandise[]>(
            '/merchandise',
            { method: 'GET' },
            customFetch
        );
    }

    async getMerchandiseItem(
        merchandiseId: string,
        customFetch?: typeof fetch
    ): Promise<Merchandise> {
        return this.request<Merchandise>(
            `/merchandise/${merchandiseId}`,
            { method: 'GET' },
            customFetch
        );
    }

    // Booking API methods
    async createBooking(
        bookingData: Partial<Booking>,
        customFetch?: typeof fetch
    ): Promise<Booking> {
        return this.request<Booking>(
            '/bookings',
            {
                method: 'POST',
                body: JSON.stringify(bookingData)
            },
            customFetch
        );
    }

    async getBooking(
        bookingId: string,
        customFetch?: typeof fetch
    ): Promise<Booking> {
        return this.request<Booking>(
            `/bookings/${bookingId}`,
            { method: 'GET' },
            customFetch
        );
    }

    // --- ADDED: Payment API methods ---
    async createPaymentIntent(
        payload: OrderCreatePayload,
        customFetch?: typeof fetch
    ): Promise<{ client_secret: string }> {
        return this.request<{ client_secret: string }>(
            '/payments/create-payment-intent',
            {
                method: 'POST',
                body: JSON.stringify(payload)
            },
            customFetch
        );
    }

    // Health check method for debugging
    async healthCheck(customFetch?: typeof fetch): Promise<{ status: string }> {
        return this.request<{ status: string }>(
            '/health',
            { method: 'GET' },
            customFetch
        );
    }
}

// Export default instances for different environments
export const apiClient = new ApiClient();

// Debug version for development
export const debugApiClient = new ApiClient({ debug: true });

// Utility functions for common patterns
export function createApiClient(config?: ApiClientConfig): ApiClient {
    return new ApiClient(config);
}

/**
 * Helper function to handle API errors in load functions
 * @param error Caught error from API call
 * @param fallbackMessage User-friendly fallback message
 * @returns Error object for SvelteKit error function
 */
export function handleApiError(
    error: unknown,
    fallbackMessage: string = 'An unexpected error occurred'
): { status: number; message: string; details: string } {
    if (error instanceof ApiError) {
        return {
            status: error.status,
            message: getPublicErrorMessage(error.status),
            details: error.detail
        };
    }

    if (error instanceof NetworkError) {
        return {
            status: 500,
            message: 'Connection Error',
            details: 'Unable to connect to the server. Please try again later.'
        };
    }

    console.error('Unexpected API error:', error);
    return {
        status: 500,
        message: fallbackMessage,
        details: 'An unexpected error occurred while processing your request.'
    };
}

/**
 * Convert HTTP status codes to user-friendly messages
 * @param status HTTP status code
 * @returns User-friendly error message
 */
function getPublicErrorMessage(status: number): string {
    switch (status) {
        case 400:
            return 'Invalid Request';
        case 401:
            return 'Authentication Required';
        case 403:
            return 'Access Denied';
        case 404:
            return 'Content Not Found';
        case 409:
            return 'Resource Already Exists';
        case 429:
            return 'Too Many Requests';
        case 500:
            return 'Server Error';
        case 502:
        case 503:
        case 504:
            return 'Service Unavailable';
        default:
            return 'An Error Occurred';
    }
}

/**
 * Utility to check if the API client is working correctly
 * Can be used in development to debug proxy issues
 */
export async function testApiConnection(customFetch?: typeof fetch): Promise<boolean> {
    try {
        await debugApiClient.healthCheck(customFetch);
        console.log('‚úÖ API connection test successful');
        return true;
    } catch (error) {
        console.error('‚ùå API connection test failed:', error);
        return false;
    }
}


================================================================================
File: lib/components/Calendar.svelte
================================================================================

<script lang="ts">
	/**
	 * @file Calendar.svelte
	 * @purpose A responsive and interactive calendar component for date selection.
	 *
	 * @dependencies
	 * - svelte: For component logic, transitions, and creating event dispatchers.
	 * - lucide-svelte: For icons.
	 * - $lib/stores/bookingStore: For type definitions.
	 *
	 * @notes
	 * - Manages its own internal state for the currently displayed month and year.
	 * - Calls onSelect callback when a valid date is clicked.
	 * - Calls onMonthChange callback when the user navigates to the next/previous month.
	 * - Disables dates that are in the past or marked as 'unavailable' or 'loading' in the `availabilityMap`.
	 * - Uses callback props instead of event dispatchers for Svelte 5 compatibility.
	 * - Fixed visual indicators to clearly show availability status to users.
	 * - Error handling: Properly displays loading, available, and unavailable states.
	 */
	import { ChevronLeft, ChevronRight, Loader2 } from 'lucide-svelte';
	import type { DateAvailabilityStatus } from '$lib/stores/bookingStore';

	// --- PROPS ---
	interface Props {
		selectedDate?: Date | null;
		availabilityMap?: Map<string, DateAvailabilityStatus> | null;
		selectedTicketId?: string | null;
		class?: string;
		onSelect?: (date: Date) => void;
		onMonthChange?: (date: Date) => void;
	}

	let {
		selectedDate = null,
		availabilityMap = null,
		selectedTicketId = null,
		class: className = '',
		onSelect,
		onMonthChange
	}: Props = $props();

	// --- STATE ---
	let viewDate = $state(new Date());
	let days = $state<
		Array<{
			date: Date;
			isCurrentMonth: boolean;
			isToday: boolean;
			isSelected: boolean;
			availabilityStatus: DateAvailabilityStatus;
		}>
	>([]);
	let isInitialized = $state(false);

	const today = new Date();
	today.setHours(0, 0, 0, 0); // Normalize today's date

	// --- DERIVED STATE & HELPERS ---
	const monthName = $derived(
		viewDate.toLocaleString('default', { month: 'long', year: 'numeric' })
	);

	/**
	 * Get the availability status for a given date
	 * @param date - The date to check
	 * @returns The availability status
	 */
	function getAvailabilityStatus(date: Date): DateAvailabilityStatus {
		if (date < today) return 'unavailable';
		if (!selectedTicketId || !availabilityMap) return 'unknown';

		const dateString = date.toISOString().split('T')[0];
		const status = availabilityMap.get(dateString);

		// Debug logging to help troubleshoot
		if (date.getDate() === 1 && date.getMonth() === viewDate.getMonth()) {
			console.log(
				`[Calendar Debug] Date: ${dateString}, Status: ${status}, Map size: ${availabilityMap.size}`
			);
		}

		return status || 'unknown';
	}

	/**
	 * Generates the calendar grid for the given date
	 * @param date - The date to generate the calendar for
	 * @param currentSelectedDate - The currently selected date for highlighting
	 */
	function generateCalendar(date: Date, currentSelectedDate: Date | null = null) {
		const year = date.getFullYear();
		const month = date.getMonth();
		const firstDayOfMonth = new Date(year, month, 1);
		const lastDayOfMonth = new Date(year, month + 1, 0);
		const daysInMonth = lastDayOfMonth.getDate();
		const startDayOfWeek = firstDayOfMonth.getDay(); // 0 (Sun) - 6 (Sat)

		const newDays = [];

		// Previous month's days
		for (let i = 0; i < startDayOfWeek; i++) {
			const d = new Date(year, month, 1 - (startDayOfWeek - i));
			newDays.push({
				date: d,
				isCurrentMonth: false,
				isToday: false,
				isSelected: false,
				availabilityStatus: 'unavailable' as DateAvailabilityStatus
			});
		}

		// Current month's days
		for (let i = 1; i <= daysInMonth; i++) {
			const d = new Date(year, month, i);
			const availability = getAvailabilityStatus(d);
			newDays.push({
				date: d,
				isCurrentMonth: true,
				isToday: d.getTime() === today.getTime(),
				isSelected: currentSelectedDate ? d.getTime() === currentSelectedDate.getTime() : false,
				availabilityStatus: availability
			});
		}

		// Next month's days
		const gridCells = 42; // 6 weeks * 7 days
		const remainingCells = gridCells - newDays.length;
		for (let i = 1; i <= remainingCells; i++) {
			const d = new Date(year, month + 1, i);
			newDays.push({
				date: d,
				isCurrentMonth: false,
				isToday: false,
				isSelected: false,
				availabilityStatus: 'unavailable' as DateAvailabilityStatus
			});
		}

		days = newDays;
	}

	/**
	 * Navigate to the previous month
	 */
	function previousMonth() {
		const newDate = new Date(viewDate.setMonth(viewDate.getMonth() - 1));
		viewDate = newDate;
		generateCalendar(viewDate, selectedDate);
		onMonthChange?.(newDate);
	}

	/**
	 * Navigate to the next month
	 */
	function nextMonth() {
		const newDate = new Date(viewDate.setMonth(viewDate.getMonth() + 1));
		viewDate = newDate;
		generateCalendar(viewDate, selectedDate);
		onMonthChange?.(newDate);
	}

	/**
	 * Select a date if it's available
	 * @param day - The day object containing date and availability info
	 */
	function selectDate(day: (typeof days)[0]) {
		if (day.date < today || day.availabilityStatus !== 'available' || !day.isCurrentMonth) {
			return; // Do not select past, unavailable dates, or dates from other months
		}
		onSelect?.(day.date);
	}

	/**
	 * Get CSS classes for a day based on its availability status
	 * @param day - The day object
	 * @returns CSS class string
	 */
	function getDayClasses(day: (typeof days)[0]): string {
		const baseClasses = 'relative h-10 w-10 rounded-full transition-all duration-200 font-medium';

		// Base text color
		let classes = baseClasses;

		if (!day.isCurrentMonth) {
			classes += ' text-neutral-300 cursor-not-allowed';
		} else if (day.isSelected) {
			classes += ' bg-primary-600 text-white font-bold border-2 border-primary-600';
		} else if (day.isToday && day.availabilityStatus === 'available') {
			classes += ' border-2 border-primary-500 text-primary-600 font-bold hover:bg-primary-50';
		} else if (day.isToday) {
			classes += ' border-2 border-neutral-400 text-neutral-600 font-bold';
		} else {
			// Style based on availability
			switch (day.availabilityStatus) {
				case 'available':
					classes +=
						' text-neutral-800 hover:bg-primary-100 hover:text-primary-700 cursor-pointer border border-transparent hover:border-primary-300';
					break;
				case 'unavailable':
					classes += ' text-neutral-400 cursor-not-allowed bg-neutral-100';
					break;
				case 'loading':
					classes += ' text-neutral-600 cursor-wait';
					break;
				case 'unknown':
				default:
					classes += ' text-neutral-500 cursor-not-allowed opacity-60';
					break;
			}
		}

		return classes;
	}

	// --- INITIALIZATION EFFECT ---
	// Single effect to handle initialization and updates
	$effect(() => {
		// Initialize viewDate on first render or when selectedDate changes significantly
		if (!isInitialized) {
			const initialDate = selectedDate || new Date();
			viewDate = new Date(initialDate.getFullYear(), initialDate.getMonth(), 1);
			isInitialized = true;
		}

		// Always regenerate calendar when viewDate, selectedDate, or availabilityMap changes
		generateCalendar(viewDate, selectedDate);
	});

	// --- PROP CHANGE EFFECT ---
	// Handle external selectedDate changes that should update the view
	$effect(() => {
		const currentSelectedDate = selectedDate;
		if (currentSelectedDate && isInitialized) {
			const selectedYear = currentSelectedDate.getFullYear();
			const selectedMonth = currentSelectedDate.getMonth();
			const currentYear = viewDate.getFullYear();
			const currentMonth = viewDate.getMonth();

			// Only update viewDate if we're looking at a different month/year
			if (selectedYear !== currentYear || selectedMonth !== currentMonth) {
				viewDate = new Date(selectedYear, selectedMonth, 1);
			}
		}
	});

	// --- AVAILABILITY MAP CHANGE EFFECT ---
	// Regenerate calendar when availability data changes
	$effect(() => {
		if (availabilityMap && isInitialized) {
			generateCalendar(viewDate, selectedDate);
		}
	});
</script>

<div class="rounded-lg border border-neutral-200 bg-white p-4 {className}">
	<!-- Calendar Header -->
	<div class="mb-4 flex items-center justify-between">
		<button
			type="button"
			class="rounded-full p-2 text-neutral-500 transition-colors hover:bg-neutral-100 hover:text-neutral-800"
			onclick={previousMonth}
			aria-label="Previous month"
		>
			<ChevronLeft class="h-5 w-5" />
		</button>
		<h3 class="w-40 text-center font-semibold text-neutral-800">{monthName}</h3>
		<button
			type="button"
			class="rounded-full p-2 text-neutral-500 transition-colors hover:bg-neutral-100 hover:text-neutral-800"
			onclick={nextMonth}
			aria-label="Next month"
		>
			<ChevronRight class="h-5 w-5" />
		</button>
	</div>

	<!-- Calendar Grid -->
	<div class="grid grid-cols-7 gap-1 text-center text-sm">
		<!-- Day Headers -->
		{#each ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'] as day}
			<div class="py-2 font-medium text-neutral-500">{day}</div>
		{/each}

		<!-- Dates -->
		{#each days as day (day.date.getTime())}
			<div class="relative flex items-center justify-center p-1">
				<button
					type="button"
					class={getDayClasses(day)}
					onclick={() => selectDate(day)}
					disabled={!day.isCurrentMonth ||
						day.availabilityStatus !== 'available' ||
						day.date < today}
					title={`${day.date.toLocaleDateString()} - ${day.availabilityStatus}`}
				>
					{#if day.availabilityStatus === 'loading'}
						<Loader2 class="text-primary-500 absolute inset-0 m-auto h-4 w-4 animate-spin" />
					{:else}
						{day.date.getDate()}
					{/if}

					<!-- Small availability indicator dot -->
					{#if day.isCurrentMonth && day.availabilityStatus === 'available' && !day.isSelected}
						<div class="absolute bottom-0 right-0 h-1.5 w-1.5 rounded-full bg-green-500"></div>
					{:else if day.isCurrentMonth && day.availabilityStatus === 'unavailable'}
						<div class="absolute bottom-0 right-0 h-1.5 w-1.5 rounded-full bg-red-500"></div>
					{:else if day.isCurrentMonth && day.availabilityStatus === 'loading'}
						<div
							class="absolute bottom-0 right-0 h-1.5 w-1.5 animate-pulse rounded-full bg-yellow-500"
						></div>
					{/if}
				</button>
			</div>
		{/each}
	</div>

	<!-- Legend -->
	<div class="mt-4 flex items-center justify-center space-x-6 text-xs text-neutral-600">
		<div class="flex items-center space-x-1">
			<span class="bg-primary-600 h-3 w-3 rounded-full"></span>
			<span>Selected</span>
		</div>
		<div class="flex items-center space-x-1">
			<span class="h-3 w-3 rounded-full bg-green-500"></span>
			<span>Available</span>
		</div>
		<div class="flex items-center space-x-1">
			<span class="h-3 w-3 rounded-full bg-red-500"></span>
			<span>Unavailable</span>
		</div>
		<div class="flex items-center space-x-1">
			<span class="h-3 w-3 rounded-full bg-yellow-500"></span>
			<span>Loading</span>
		</div>
	</div>

	<!-- Availability Summary -->
	{#if selectedTicketId && availabilityMap && availabilityMap.size > 0}
		{@const currentMonthDays = days.filter((d) => d.isCurrentMonth)}
		{@const availableDays = currentMonthDays.filter(
			(d) => d.availabilityStatus === 'available'
		).length}
		{@const unavailableDays = currentMonthDays.filter(
			(d) => d.availabilityStatus === 'unavailable'
		).length}
		{@const loadingDays = currentMonthDays.filter((d) => d.availabilityStatus === 'loading').length}

		<div class="mt-4 rounded-md bg-neutral-50 p-3 text-center text-sm text-neutral-600">
			<div class="mb-1 font-medium">This Month Summary</div>
			<div class="flex justify-center space-x-4 text-xs">
				<span class="text-green-600">{availableDays} Available</span>
				<span class="text-red-600">{unavailableDays} Unavailable</span>
				{#if loadingDays > 0}
					<span class="text-yellow-600">{loadingDays} Loading</span>
				{/if}
			</div>
		</div>
	{/if}
</div>



================================================================================
File: lib/components/Footer.svelte
================================================================================

<!--
/**
 * @file Footer.svelte
 * @description Footer component for the Zungri Museum website.
 * Contains museum contact information, navigation links, social media,
 * and legal information.
 *
 * Key features:
 * - Museum contact information and location
 * - Quick navigation links
 * - Social media links
 * - Legal and policy links
 * - Responsive design with proper spacing
 * - Multilingual support
 *
 * @dependencies
 * - $lib/paraglide/messages: Internationalization messages
 * - lucide-svelte: Icons for contact info and social media
 *
 * @notes
 * - Uses Tailwind CSS for responsive layout
 * - Implements structured contact information
 * - Includes accessibility considerations
 */
-->
<script lang="ts">
	import * as m from '$lib/paraglide/messages';
	import { MapPin, Phone, Mail, Clock, Facebook, Instagram, Twitter } from 'lucide-svelte';

	// Quick navigation links
	const quickLinks = [
		{ href: '/', label: m.navigation_home },
		{ href: '/about', label: m.navigation_about },
		{ href: '/plan-your-visit', label: m.navigation_visit },
		{ href: '/exhibitions', label: m.navigation_exhibitions },
		{ href: '/contact', label: m.navigation_contact }
	];

	// Legal and policy links
	const legalLinks = [
		{ href: '/privacy', label: m.footer_privacy },
		{ href: '/terms', label: m.footer_terms }
	];

	// Social media links
	const socialLinks = [
		{
			href: 'https://facebook.com/museozungri',
			label: 'Facebook',
			icon: Facebook,
			ariaLabel: 'Visit our Facebook page'
		},
		{
			href: 'https://instagram.com/museozungri',
			label: 'Instagram',
			icon: Instagram,
			ariaLabel: 'Visit our Instagram page'
		},
		{
			href: 'https://twitter.com/museozungri',
			label: 'Twitter',
			icon: Twitter,
			ariaLabel: 'Visit our Twitter page'
		}
	];

	// Museum contact information
	const contactInfo = {
		address: 'Via Roma, 123\n89020 Zungri (VV)\nCalabria, Italia',
		phone: '+39 0963 123456',
		email: 'info@museozungri.it',
		hours: {
			weekdays: '9:00 - 17:00',
			weekends: '10:00 - 18:00',
			closed: 'Luned√¨ / Monday / Montag'
		}
	};
</script>

<footer class="bg-gray-900 text-white">
	<div class="mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8">
		<!-- Main Footer Content -->
		<div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-4">
			<!-- Museum Information -->
			<div class="lg:col-span-1">
				<div class="flex items-center space-x-3 text-blue-400">
					<div class="flex h-10 w-10 items-center justify-center rounded-full bg-blue-900">
						<svg
							class="h-6 w-6"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
							/>
						</svg>
					</div>
					<div>
						<h3 class="text-lg font-bold">Museo di Zungri</h3>
						<p class="text-sm text-gray-400">Calabria, Italia</p>
					</div>
				</div>
				<p class="mt-4 text-sm text-gray-300">
					{m.museum_welcomeSubtitle()}
				</p>

				<!-- Social Media Links -->
				<div class="mt-6">
					<h4 class="text-sm font-semibold text-gray-200">{m.footer_followUs()}</h4>
					<div class="mt-2 flex space-x-3">
						{#each socialLinks as social}
							<a
								href={social.href}
								class="text-gray-400 transition-colors duration-200 hover:text-blue-400"
								aria-label={social.ariaLabel}
								target="_blank"
								rel="noopener noreferrer"
							>
								<svelte:component this={social.icon} class="h-5 w-5" />
							</a>
						{/each}
					</div>
				</div>
			</div>

			<!-- Contact Information -->
			<div>
				<h3 class="text-lg font-semibold text-white">{m.contact_getInTouch()}</h3>
				<div class="mt-4 space-y-3">
					<!-- Address -->
					<div class="flex items-start space-x-3">
						<MapPin class="mt-0.5 h-5 w-5 flex-shrink-0 text-blue-400" />
						<div>
							<h4 class="text-sm font-medium text-gray-200">{m.contact_address()}</h4>
							<p class="mt-1 whitespace-pre-line text-sm text-gray-400">
								{contactInfo.address}
							</p>
						</div>
					</div>

					<!-- Phone -->
					<div class="flex items-center space-x-3">
						<Phone class="h-5 w-5 flex-shrink-0 text-blue-400" />
						<div>
							<h4 class="text-sm font-medium text-gray-200">{m.contact_phone()}</h4>
							<a
								href="tel:{contactInfo.phone}"
								class="mt-1 text-sm text-gray-400 hover:text-blue-400"
							>
								{contactInfo.phone}
							</a>
						</div>
					</div>

					<!-- Email -->
					<div class="flex items-center space-x-3">
						<Mail class="h-5 w-5 flex-shrink-0 text-blue-400" />
						<div>
							<h4 class="text-sm font-medium text-gray-200">{m.contact_email()}</h4>
							<a
								href="mailto:{contactInfo.email}"
								class="mt-1 text-sm text-gray-400 hover:text-blue-400"
							>
								{contactInfo.email}
							</a>
						</div>
					</div>
				</div>
			</div>

			<!-- Opening Hours -->
			<div>
				<h3 class="text-lg font-semibold text-white">{m.museum_openingHours()}</h3>
				<div class="mt-4 space-y-2">
					<div class="flex items-center space-x-3">
						<Clock class="h-5 w-5 flex-shrink-0 text-blue-400" />
						<div>
							<div class="text-sm text-gray-300">
								<p class="font-medium">Mar - Dom</p>
								<p class="text-gray-400">{contactInfo.hours.weekdays}</p>
							</div>
						</div>
					</div>
					<div class="ml-8">
						<p class="text-sm text-gray-300">
							<span class="font-medium">Sab - Dom:</span>
							<span class="text-gray-400">{contactInfo.hours.weekends}</span>
						</p>
						<p class="text-sm text-red-400">
							<span class="font-medium">Chiuso:</span>
							{contactInfo.hours.closed}
						</p>
					</div>
				</div>
			</div>

			<!-- Quick Links -->
			<div>
				<h3 class="text-lg font-semibold text-white">Link Rapidi</h3>
				<div class="mt-4">
					<ul class="space-y-2">
						{#each quickLinks as link}
							<li>
								<a
									href={link.href}
									class="text-sm text-gray-400 transition-colors duration-200 hover:text-blue-400"
								>
									{link.label()}
								</a>
							</li>
						{/each}
					</ul>
				</div>

				<!-- Newsletter Signup -->
				<div class="mt-6">
					<h4 class="text-sm font-semibold text-gray-200">{m.footer_newsletter()}</h4>
					<p class="mt-2 text-xs text-gray-400">
						Ricevi aggiornamenti su mostre ed eventi del museo.
					</p>
					<div class="mt-3 flex">
						<input
							type="email"
							placeholder="La tua email"
							class="flex-grow rounded-l-md border-0 bg-gray-800 px-3 py-2 text-sm text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500"
						/>
						<button
							type="button"
							class="rounded-r-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							Iscriviti
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Footer Bottom -->
		<div class="mt-12 border-t border-gray-800 pt-8">
			<div class="flex flex-col items-center justify-between space-y-4 md:flex-row md:space-y-0">
				<!-- Copyright -->
				<div class="text-center text-sm text-gray-400 md:text-left">
					<p>{m.footer_copyright()}</p>
				</div>

				<!-- Legal Links -->
				<div class="flex space-x-6">
					{#each legalLinks as link}
						<a
							href={link.href}
							class="text-sm text-gray-400 transition-colors duration-200 hover:text-blue-400"
						>
							{link.label()}
						</a>
					{/each}
				</div>

				<!-- Support Information -->
				<div class="text-center text-xs text-gray-500 md:text-right">
					<p>{m.footer_supportedBy()}</p>
					<p>Regione Calabria ‚Ä¢ Comune di Zungri</p>
				</div>
			</div>
		</div>
	</div>
</footer>



================================================================================
File: lib/components/Header.svelte
================================================================================

<!--
/**
 * @file Header.svelte
 * @description Main navigation header for the Zungri Museum website.
 * Features responsive design with mobile menu, multilingual navigation,
 * and museum branding.
 *
 * Key features:
 * - Fully responsive navigation with mobile hamburger menu
 * - Language switcher integration
 * - Museum logo and branding
 * - Navigation links for all main sections
 * - Shopping cart and booking CTAs
 * - Optimized for all screen sizes including very small devices
 *
 * @dependencies
 * - $lib/components/LanguageSwitcher.svelte: Language switching component
 * - $lib/paraglide/messages: Internationalization messages
 * - lucide-svelte: Icons for navigation
 * - $app/page: Current page state for active link highlighting
 *
 * @notes
 * - Uses Tailwind CSS for responsive design
 * - Implements mobile-first approach
 * - Supports keyboard navigation for accessibility
 * - Handles very small screens (320px+)
 */
-->
<script lang="ts">
	import { page } from '$app/state';
	import LanguageSwitcher from './LanguageSwitcher.svelte';
	import * as m from '$lib/paraglide/messages';
	import { Menu, X, ShoppingBag, Calendar, MapPin } from 'lucide-svelte';

	// Mobile menu state
	let mobileMenuOpen = $state(false);

	// Navigation items with i18n labels
	const navigationItems = [
		{
			href: '/',
			label: m.navigation_home,
			icon: null
		},
		{
			href: '/about',
			label: m.navigation_about,
			icon: null
		},
		{
			href: '/plan-your-visit',
			label: m.navigation_visit,
			icon: MapPin
		},
		{
			href: '/exhibitions',
			label: m.navigation_exhibitions,
			icon: null
		},
		{
			href: '/contact',
			label: m.navigation_contact,
			icon: null
		}
	];

	// Action buttons with i18n labels
	const actionButtons = [
		{
			href: '/book',
			label: m.navigation_book,
			icon: Calendar,
			variant: 'primary'
		},
		{
			href: '/shop',
			label: m.navigation_shop,
			icon: ShoppingBag,
			variant: 'secondary'
		}
	];

	// Check if current route is active
	function isActiveRoute(href: string): boolean {
		if (href === '/') {
			return page.url.pathname === '/';
		}
		return page.url.pathname.startsWith(href);
	}

	// Close mobile menu when route changes
	$effect(() => {
		page.url.pathname;
		mobileMenuOpen = false;
	});

	// Handle mobile menu toggle
	function toggleMobileMenu() {
		mobileMenuOpen = !mobileMenuOpen;
	}

	// Handle escape key to close mobile menu
	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape' && mobileMenuOpen) {
			mobileMenuOpen = false;
		}
	}

	// Close mobile menu when clicking outside (optional - can be removed if causing issues)
	function handleClickOutside(event: MouseEvent) {
		if (mobileMenuOpen && event.target && !(event.target as Element).closest('header')) {
			mobileMenuOpen = false;
		}
	}
</script>

<svelte:document on:keydown={handleKeydown} />

<header class="sticky top-0 z-50 bg-white shadow-md">
	<div class="mx-auto max-w-7xl px-3 sm:px-4 lg:px-8">
		<div class="flex h-14 items-center justify-between sm:h-16">
			<!-- Logo and Museum Name -->
			<div class="flex min-w-0 flex-shrink-0 items-center">
				<a
					href="/"
					class="flex items-center space-x-2 text-blue-600 transition-colors duration-200 hover:text-blue-700 sm:space-x-3"
				>
					<!-- Museum Logo/Icon -->
					<div
						class="flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 sm:h-10 sm:w-10"
					>
						<svg
							class="h-4 w-4 sm:h-6 sm:w-6"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
							/>
						</svg>
					</div>
					<div class="xs:block hidden min-w-0 sm:block">
						<h1 class="truncate text-base font-bold text-gray-900 sm:text-xl">Museo di Zungri</h1>
						<p class="hidden text-xs text-gray-600 sm:block">Calabria, Italia</p>
					</div>
				</a>
			</div>

			<!-- Desktop Navigation -->
			<nav class="hidden lg:flex lg:items-center lg:space-x-6 xl:space-x-8">
				{#each navigationItems as item}
					<a
						href={item.href}
						class="inline-flex items-center space-x-1 whitespace-nowrap text-sm font-medium transition-colors duration-200 {isActiveRoute(
							item.href
						)
							? 'border-b-2 border-blue-600 text-blue-600'
							: 'text-gray-700 hover:text-blue-600'}"
					>
						{#if item.icon}
							<svelte:component this={item.icon} class="h-4 w-4" />
						{/if}
						<span>{item.label()}</span>
					</a>
				{/each}
			</nav>

			<!-- Action Buttons and Language Switcher (Desktop) -->
			<div class="hidden md:flex md:items-center md:space-x-2 lg:space-x-4">
				{#each actionButtons as button}
					<a
						href={button.href}
						class="inline-flex items-center space-x-1 whitespace-nowrap rounded-md px-2 py-2 text-xs font-medium transition-colors duration-200 sm:space-x-2 sm:px-4 sm:text-sm {button.variant ===
						'primary'
							? 'bg-blue-600 text-white hover:bg-blue-700'
							: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50'}"
					>
						<svelte:component this={button.icon} class="h-3 w-3 sm:h-4 sm:w-4" />
						<span class="hidden sm:inline">{button.label()}</span>
						<span class="sm:hidden">{button.label().split(' ')[0]}</span>
					</a>
				{/each}

				<!-- Language Switcher -->
				<div class="flex-shrink-0">
					<LanguageSwitcher />
				</div>
			</div>

			<!-- Mobile Menu Button -->
			<div class="flex md:hidden">
				<button
					type="button"
					class="inline-flex items-center justify-center rounded-md p-2 text-gray-700 transition-colors duration-200 hover:bg-gray-100 hover:text-blue-600 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
					aria-expanded={mobileMenuOpen}
					aria-label="Toggle navigation menu"
					on:click={toggleMobileMenu}
				>
					{#if mobileMenuOpen}
						<X class="h-5 w-5 sm:h-6 sm:w-6" />
					{:else}
						<Menu class="h-5 w-5 sm:h-6 sm:w-6" />
					{/if}
				</button>
			</div>
		</div>
	</div>

	<!-- Mobile Navigation Menu -->
	{#if mobileMenuOpen}
		<div class="mobile-menu md:hidden">
			<div
				class="max-h-screen overflow-y-auto border-t border-gray-200 bg-white px-3 pb-3 pt-2 shadow-lg sm:px-4"
			>
				<!-- Mobile Navigation Links -->
				<div class="space-y-1">
					{#each navigationItems as item}
						<a
							href={item.href}
							class="flex items-center space-x-3 rounded-md px-3 py-3 text-base font-medium transition-colors duration-200 {isActiveRoute(
								item.href
							)
								? 'bg-blue-50 text-blue-600'
								: 'text-gray-700 hover:bg-gray-50 hover:text-blue-600'}"
						>
							{#if item.icon}
								<svelte:component this={item.icon} class="h-5 w-5 flex-shrink-0" />
							{/if}
							<span class="truncate">{item.label()}</span>
						</a>
					{/each}
				</div>

				<!-- Mobile Action Buttons -->
				<div class="mt-4 space-y-2 border-t border-gray-200 pt-4">
					{#each actionButtons as button}
						<a
							href={button.href}
							class="flex items-center justify-center space-x-2 rounded-md px-4 py-3 text-base font-medium transition-colors duration-200 {button.variant ===
							'primary'
								? 'bg-blue-600 text-white hover:bg-blue-700'
								: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50'}"
						>
							<svelte:component this={button.icon} class="h-5 w-5 flex-shrink-0" />
							<span>{button.label()}</span>
						</a>
					{/each}
				</div>

				<!-- Mobile Language Switcher -->
				<div class="mt-4 border-t border-gray-200 pt-4">
					<LanguageSwitcher />
				</div>
			</div>
		</div>
	{/if}
</header>

<style>
	/* Custom responsive breakpoint for very small screens */
	@media (min-width: 375px) {
		.xs\:block {
			display: block;
		}
	}

	/* Ensure smooth transitions */
	.mobile-menu {
		animation: slideDown 0.2s ease-out;
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Ensure proper text truncation on very small screens */
	@media (max-width: 374px) {
		h1 {
			font-size: 0.875rem;
		}
	}
</style>



================================================================================
File: lib/components/LanguageSwitcher.svelte
================================================================================

<!--
/**
 * @file LanguageSwitcher.svelte
 * @description Language switcher component for the Zungri Museum website.
 * Allows users to switch between Italian, English, and German languages.
 * Uses Paraglide for internationalization and URL-based locale switching.
 *
 * Key features:
 * - Dropdown menu for language selection
 * - Current language indication
 * - Smooth transitions and hover effects
 * - Keyboard navigation support
 * - Automatic URL localization
 *
 * @dependencies
 * - $lib/paraglide/runtime: Paraglide i18n runtime for locale switching
 * - $lib/paraglide/messages: Language labels
 * - lucide-svelte: Icons for UI
 * - $app/navigation: SvelteKit navigation utilities
 *
 * @notes
 * - Uses Paraglide's setLocale function for language switching
 * - Supports keyboard navigation (Enter, Escape, Arrow keys)
 * - Implements proper ARIA attributes for accessibility
 * - Uses flag emojis for visual language identification
 */
-->
<script lang="ts">
	import { setLocale, getLocale, locales } from '$lib/paraglide/runtime';
	import * as m from '$lib/paraglide/messages';
	import { ChevronDown, Globe } from 'lucide-svelte';
	import { goto } from '$app/navigation';
	import { page } from '$app/state';

	// Language configuration with labels and flags
	const languageOptions = [
		{
			code: 'it',
			label: m.languages_it,
			nativeLabel: 'Italiano',
			flag: 'üáÆüáπ'
		},
		{
			code: 'en',
			label: m.languages_en,
			nativeLabel: 'English',
			flag: 'üá¨üáß'
		},
		{
			code: 'de',
			label: m.languages_de,
			nativeLabel: 'Deutsch',
			flag: 'üá©üá™'
		}
	];

	// Component state
	let isOpen = $state(false);
	let currentLocale = $state(getLocale());

	// Get current language info
	let currentLanguage = $derived(
		languageOptions.find((lang) => lang.code === currentLocale) || languageOptions[0]
	);

	// Update current locale when it changes
	$effect(() => {
		currentLocale = getLocale();
	});

	// Close dropdown when clicking outside or on route change
	$effect(() => {
		page.url.pathname;
		isOpen = false;
	});

	// Handle language change
	async function handleLanguageChange(newLocale: string) {
		try {
			// Set the new locale using Paraglide
			setLocale(newLocale as any);
			isOpen = false;

			// The page will automatically reload with the new locale
			// due to Paraglide's URL-based routing
		} catch (error) {
			console.error('Error changing language:', error);
		}
	}

	// Toggle dropdown
	function toggleDropdown() {
		isOpen = !isOpen;
	}

	// Close dropdown
	function closeDropdown() {
		isOpen = false;
	}

	// Handle keyboard navigation
	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape') {
			closeDropdown();
		} else if (event.key === 'Enter' || event.key === ' ') {
			event.preventDefault();
			toggleDropdown();
		}
	}

	// Handle option selection with keyboard
	function handleOptionKeydown(event: KeyboardEvent, locale: string) {
		if (event.key === 'Enter' || event.key === ' ') {
			event.preventDefault();
			handleLanguageChange(locale);
		}
	}
</script>

<div class="relative">
	<!-- Language Switcher Button -->
	<button
		type="button"
		class="inline-flex items-center space-x-2 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 shadow-sm transition-colors duration-200 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
		aria-expanded={isOpen}
		aria-haspopup="listbox"
		aria-label="Change language"
		on:click={toggleDropdown}
		on:keydown={handleKeydown}
	>
		<!-- Globe icon for desktop, flag for mobile -->
		<div class="flex items-center space-x-1">
			<Globe class="h-4 w-4 text-gray-500 sm:hidden" />
			<span class="hidden text-sm sm:inline">{currentLanguage.flag}</span>
			<span class="hidden sm:inline">{currentLanguage.nativeLabel}</span>
			<span class="sm:hidden">{currentLanguage.code.toUpperCase()}</span>
		</div>
		<ChevronDown
			class="h-4 w-4 text-gray-500 transition-transform duration-200 {isOpen
				? 'rotate-180'
				: 'rotate-0'}"
		/>
	</button>

	<!-- Dropdown Menu -->
	{#if isOpen}
		<div
			class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md border border-gray-200 bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
			role="listbox"
			aria-label="Language options"
		>
			{#each languageOptions as language}
				<button
					type="button"
					class="flex w-full items-center space-x-3 px-4 py-2 text-left text-sm transition-colors duration-200 {language.code ===
					currentLocale
						? 'bg-blue-50 text-blue-700'
						: 'text-gray-700 hover:bg-gray-50'}"
					role="option"
					aria-selected={language.code === currentLocale}
					tabindex={isOpen ? 0 : -1}
					on:click={() => handleLanguageChange(language.code)}
					on:keydown={(e) => handleOptionKeydown(e, language.code)}
				>
					<span class="text-lg">{language.flag}</span>
					<div class="flex flex-col">
						<span class="font-medium">{language.nativeLabel}</span>
						<span class="text-xs text-gray-500">{language.label()}</span>
					</div>
					{#if language.code === currentLocale}
						<div class="ml-auto">
							<svg
								class="h-4 w-4 text-blue-600"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									fill-rule="evenodd"
									d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
									clip-rule="evenodd"
								/>
							</svg>
						</div>
					{/if}
				</button>
			{/each}
		</div>
	{/if}
</div>

<!-- Close dropdown when clicking outside -->
<svelte:window
	on:click={(e) => {
		if (isOpen && !e.target?.closest('.relative')) {
			closeDropdown();
		}
	}}
/>



================================================================================
File: lib/components/PaymentForm.svelte
================================================================================

<script lang="ts">
	/**
	 * @file PaymentForm.svelte
	 * @purpose A simulated payment component that mimics Stripe Payment Element for development
	 * @dependencies
	 * - svelte: For component logic and lifecycle hooks.
	 * - lucide-svelte: For icons.
	 * - $lib/api/apiClient: For calling the simulated payment success endpoint.
	 * @notes
	 * - üé≠ THIS IS A SIMULATION - NOT REAL STRIPE INTEGRATION!
	 * - The component simulates the Stripe payment flow for development/testing
	 * - In production, this should be replaced with the actual Stripe Payment Element
	 * - Includes realistic loading states and payment simulation
	 * - TODO: Replace with real Stripe integration using @stripe/stripe-js
	 */

	import { Loader2, CreditCard, Check, AlertTriangle } from 'lucide-svelte';
	import { apiClient } from '$lib/api/apiClient';

	// Define props interface for type safety
	interface Props {
		clientSecret: string;
	}
	let { clientSecret }: Props = $props();

	let isLoading = $state(false); // Loading state for payment simulation
	let isProcessing = $state(false); // Processing state for payment submission
	let errorMessage = $state<string | undefined>();
	let successMessage = $state<string | undefined>();
	let paymentCompleted = $state(false);

	// Extract payment intent ID from client secret for simulation
	const paymentIntentId = $derived(() => {
		// Simulated client secret format: "pi_sim_xxxx_secret_yyyy"
		if (clientSecret) {
			const parts = clientSecret.split('_secret_');
			return parts[0] || null;
		}
		return null;
	});

	// Simulate the payment form loading
	$effect(() => {
		if (clientSecret) {
			isLoading = true;
			// Simulate loading time
			setTimeout(() => {
				isLoading = false;
			}, 1500);
		}
	});

	async function handleSimulatedPayment(event: Event) {
		event.preventDefault();

		if (!paymentIntentId() || paymentCompleted) {
			return;
		}

		isProcessing = true;
		errorMessage = undefined;
		successMessage = undefined;

		try {
			// Simulate payment processing time
			await new Promise((resolve) => setTimeout(resolve, 2000));

			// Call the simulated payment success endpoint
			await apiClient.request(
				'/payments/simulate-success',
				{
					method: 'POST',
					body: JSON.stringify({ payment_intent_id: paymentIntentId() })
				},
				fetch
			);

			// Simulate successful payment
			paymentCompleted = true;
			successMessage = 'Payment completed successfully!';

			// Redirect to success page after a short delay
			setTimeout(() => {
				window.location.href = '/payment-success?payment_intent=' + paymentIntentId();
			}, 1500);
		} catch (error) {
			console.error('Simulated payment error:', error);
			errorMessage = 'Payment simulation failed. Please try again.';
		} finally {
			isProcessing = false;
		}
	}

	// Simulate random payment failure for testing (10% chance)
	function simulateRandomFailure() {
		if (Math.random() < 0.1) {
			throw new Error('Simulated payment failure for testing');
		}
	}
</script>

<!-- üé≠ SIMULATION NOTICE -->
<div class="mb-4 rounded-md border border-amber-200 bg-amber-50 p-3">
	<div class="flex items-center space-x-2">
		<AlertTriangle class="h-4 w-4 text-amber-600" />
		<span class="text-sm font-medium text-amber-800">Simulation Mode</span>
	</div>
	<p class="mt-1 text-xs text-amber-700">
		This is a simulated payment form for development. No real payment will be processed.
	</p>
</div>

{#if paymentCompleted}
	<!-- Success State -->
	<div class="space-y-6">
		<div class="rounded-md border border-green-200 bg-green-50 p-4 text-center">
			<Check class="mx-auto h-12 w-12 text-green-600" />
			<h3 class="mt-2 text-lg font-semibold text-green-800">Payment Successful!</h3>
			<p class="mt-1 text-green-700">{successMessage}</p>
			<p class="mt-2 text-sm text-green-600">Redirecting to confirmation page...</p>
		</div>
	</div>
{:else}
	<!-- Simulated Payment Form -->
	<form onsubmit={handleSimulatedPayment} class="space-y-6">
		<!-- Simulated Payment Element -->
		<div class="space-y-4">
			{#if isLoading}
				<div
					class="flex h-32 items-center justify-center rounded-md border border-neutral-200 bg-neutral-50 text-neutral-500"
				>
					<Loader2 class="mr-2 h-5 w-5 animate-spin" />
					<span>Loading Payment Form...</span>
				</div>
			{:else}
				<!-- Simulated Card Input Fields -->
				<div class="space-y-3 rounded-md border border-neutral-200 bg-white p-4">
					<h4 class="flex items-center text-sm font-medium text-neutral-700">
						<CreditCard class="mr-2 h-4 w-4" />
						Simulated Payment Details
					</h4>

					<div class="grid grid-cols-1 gap-3">
						<!-- Simulated Card Number -->
						<div>
							<label for="sim-card-number" class="block text-xs font-medium text-neutral-600"
								>Card Number</label
							>
							<input
								id="sim-card-number"
								type="text"
								value="4242 4242 4242 4242"
								readonly
								class="mt-1 block w-full rounded-md border border-neutral-300 bg-neutral-50 px-3 py-2 text-sm text-neutral-500"
							/>
						</div>

						<div class="grid grid-cols-2 gap-3">
							<!-- Simulated Expiry -->
							<div>
								<label for="sim-expiry" class="block text-xs font-medium text-neutral-600"
									>Expiry</label
								>
								<input
									id="sim-expiry"
									type="text"
									value="12/34"
									readonly
									class="mt-1 block w-full rounded-md border border-neutral-300 bg-neutral-50 px-3 py-2 text-sm text-neutral-500"
								/>
							</div>

							<!-- Simulated CVC -->
							<div>
								<label for="sim-cvc" class="block text-xs font-medium text-neutral-600">CVC</label>
								<input
									id="sim-cvc"
									type="text"
									value="123"
									readonly
									class="mt-1 block w-full rounded-md border border-neutral-300 bg-neutral-50 px-3 py-2 text-sm text-neutral-500"
								/>
							</div>
						</div>

						<!-- Simulated Name -->
						<div>
							<label for="sim-name" class="block text-xs font-medium text-neutral-600"
								>Cardholder Name</label
							>
							<input
								id="sim-name"
								type="text"
								value="Test User"
								readonly
								class="mt-1 block w-full rounded-md border border-neutral-300 bg-neutral-50 px-3 py-2 text-sm text-neutral-500"
							/>
						</div>
					</div>

					<p class="text-xs text-neutral-500">
						These are simulated values for development testing.
					</p>
				</div>
			{/if}
		</div>

		<!-- Payment Button -->
		<button
			type="submit"
			disabled={isProcessing || isLoading || paymentCompleted}
			class="bg-primary-600 hover:bg-primary-700 focus-visible:outline-primary-600 w-full rounded-md px-4 py-3 font-semibold text-white shadow-sm transition-colors focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
		>
			{#if isProcessing}
				<div class="flex items-center justify-center">
					<Loader2 class="mr-2 h-5 w-5 animate-spin" />
					<span>Processing Payment...</span>
				</div>
			{:else}
				<span>üé≠ Simulate Payment</span>
			{/if}
		</button>

		<!-- Error Message -->
		{#if errorMessage}
			<div class="mt-4 text-center text-sm text-red-600" role="alert">
				{errorMessage}
			</div>
		{/if}

		<!-- Success Message -->
		{#if successMessage}
			<div class="mt-4 text-center text-sm text-green-600" role="alert">
				{successMessage}
			</div>
		{/if}
	</form>
{/if}

<!-- TODO Comment for Production -->
<!--
TODO: Replace this simulated payment form with real Stripe integration:

1. Install Stripe dependencies:
   npm install @stripe/stripe-js

2. Replace this component with real Stripe Payment Element:
   import { loadStripe } from '@stripe/stripe-js';

3. Use the real client_secret to initialize Stripe Elements:
   const stripe = await loadStripe(PUBLIC_STRIPE_PUBLISHABLE_KEY);
   const elements = stripe.elements({ clientSecret });

4. Mount the real Payment Element:
   const paymentElement = elements.create('payment');
   paymentElement.mount('#payment-element');

5. Handle real payment confirmation:
   const {error} = await stripe.confirmPayment({
     elements,
     confirmParams: {
       return_url: `${window.location.origin}/payment-success`
     }
   });

6. Remove all simulation code and endpoints from backend.
-->



================================================================================
File: lib/components/ProductCard.svelte
================================================================================

<script lang="ts">
	/** 
     * * @file ProductCard.svelte 
     * * @purpose A reusable component to display a single merchandise item
in a list or grid. * 
* @dependencies * - svelte: For component logic and transitions. * -
lucide-svelte: For icons. * - $lib/api/apiClient: For the `Merchandise` type definition. * -
$lib/stores/cartStore: For the `addToCart` action. * 
* @notes * - It displays a placeholder image,
as actual image serving is handled elsewhere. 
* - The "Add to Cart" button is disabled if the
product inventory is zero. 
* - The entire card is a link to the product's detail page. 
* - It
defaults to showing the 'en' translation for the product name. */

	import type { Merchandise } from '$lib/api/apiClient';
	import { cart } from '$lib/stores/cartStore';
	import { ShoppingCart } from 'lucide-svelte';

	let { product }: { product: Merchandise } = $props();

	/** Handles the click event for the "Add to Cart" button. */
	function handleAddToCart() {
		cart.addToCart(product, 1);
		// In a full application, a toast notification could be shown here.
	}

	// Determine the name to display, falling back from 'en' to the first available translation.
	const lang = 'en';
	const name = product.name_translations[lang] || Object.values(product.name_translations)[0];
</script>

<div
	class="rounded-card shadow-soft hover:shadow-large group relative flex h-full flex-col overflow-hidden border border-neutral-200 bg-white transition-all duration-300 hover:-translate-y-1"
>
	<a href="/shop/{product.id}" class="block" aria-label="View details for {name}">
		<div class="aspect-h-1 aspect-w-1 w-full overflow-hidden bg-neutral-100">
			<!-- Placeholder for product image. -->
			<div class="flex h-full w-full items-center justify-center text-neutral-400">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="48"
					height="48"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="1"
					stroke-linecap="round"
					stroke-linejoin="round"
					><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle
						cx="8.5"
						cy="8.5"
						r="1.5"
					></circle><polyline points="21 15 16 10 5 21"></polyline></svg
				>
			</div>
			<!-- Example of how a real image would be used:
    			<img src={`/api/v1/merchandise/image/${product.primary_image_path}`} alt={name} class="h-full w-full object-cover object-center transition-transform duration-300 group-hover:scale-105" />
    			-->
		</div>
		<div class="p-4">
			<h3 class="font-heading truncate text-lg font-semibold text-neutral-800" title={name}>
				{name}
			</h3>
			<p class="text-primary-600 mt-2 text-xl font-bold">
				‚Ç¨{product.price.toFixed(2)}
			</p>
		</div>
	</a>
	<div class="mt-auto p-4 pt-0">
		<button
			type="button"
			class="bg-primary-500 text-primary-50 hover:bg-primary-600 flex w-full items-center justify-center gap-2 rounded-md px-4 py-2 text-sm font-medium transition-colors disabled:cursor-not-allowed disabled:opacity-50"
			onclick={handleAddToCart}
			disabled={product.inventory <= 0}
		>
			<ShoppingCart class="h-4 w-4" />
			<span>{product.inventory > 0 ? 'Add to Cart' : 'Out of Stock'}</span>
		</button>
	</div>
</div>



================================================================================
File: lib/components/TicketSelector.svelte
================================================================================

<!--
@file TicketSelector Component - Ticket type and quantity selection
@description 
Interactive component for selecting ticket types and quantities for museum visits.
Updated to work with the new single-ticket booking store structure.

Key features:
- Single ticket type selection (matching new store structure)
- Quantity increment/decrement controls
- Real-time price calculations
- Multilingual ticket names and descriptions
- Input validation and error display
- Responsive design for all screen sizes

@dependencies
- Svelte 5: For reactive state management with runes
- Lucide Icons: For UI icons (plus, minus, ticket, users)
- Tailwind CSS: For styling and responsive design
- bookingStore: For ticket selection state management

@notes
- Now supports single ticket selection model as per the refactored store
- Prices are displayed in EUR format
- Maximum quantity limits can be configured
- Integrates with time slot capacity checking
- Handles multilingual content via translation props
-->

<script lang="ts">
	import { Plus, Minus, Ticket, Users, Info, AlertTriangle } from 'lucide-svelte';
	import {
		selectedTicket,
		availableTicketTypes,
		totalPrice,
		totalTickets,
		validationErrors,
		bookingActions
	} from '$lib/stores/bookingStore';
	import type { TicketType } from '$lib/stores/bookingStore';

	// Type definitions
	interface Props {
		language?: string;
		maxQuantityPerType?: number;
		maxTotalTickets?: number;
		showDescriptions?: boolean;
		class?: string;
		disabled?: boolean;
	}

	interface Translations {
		[key: string]: string;
	}

	// Props for customization
	let {
		language = 'en',
		maxQuantityPerType = 10,
		maxTotalTickets = 20,
		showDescriptions = true,
		class: className = '',
		disabled = false
	}: Props = $props();

	// Helper function to get localized text
	function getLocalizedText(translations: Translations | undefined, fallback: string = ''): string {
		if (!translations || typeof translations !== 'object') return fallback;
		return translations[language] || translations['en'] || translations['it'] || fallback;
	}

	// Format price for display
	function formatPrice(price: number): string {
		return new Intl.NumberFormat('en-EU', {
			style: 'currency',
			currency: 'EUR',
			minimumFractionDigits: 2
		}).format(price);
	}

	// Get current quantity for a ticket type - FIXED for new store structure
	function getQuantity(ticketTypeId: string): number {
		// Handle the case where selectedTicket is null or doesn't match the ticketTypeId
		if (!$selectedTicket || $selectedTicket.id !== ticketTypeId) {
			return 0;
		}
		return $selectedTicket.quantity;
	}

	// Update quantity for a ticket type - FIXED for new store structure
	function updateQuantity(ticketTypeId: string, newQuantity: number): void {
		// Validate quantity limits
		const clampedQuantity = Math.max(0, Math.min(newQuantity, maxQuantityPerType));

		// Since we only support one ticket type at a time, we can directly update
		bookingActions.updateTicketQuantity(ticketTypeId, clampedQuantity);
	}

	// Increment quantity
	function incrementQuantity(ticketTypeId: string): void {
		const currentQuantity = getQuantity(ticketTypeId);
		updateQuantity(ticketTypeId, currentQuantity + 1);
	}

	// Decrement quantity
	function decrementQuantity(ticketTypeId: string): void {
		const currentQuantity = getQuantity(ticketTypeId);
		updateQuantity(ticketTypeId, currentQuantity - 1);
	}

	// Handle direct input change
	function handleInputChange(ticketTypeId: string, event: Event): void {
		const target = event.target as HTMLInputElement;
		const value = parseInt(target.value) || 0;
		updateQuantity(ticketTypeId, value);
	}

	// Check if increment is disabled - UPDATED for new store structure
	function isIncrementDisabled(ticketTypeId: string): boolean {
		if (disabled) return true;
		const currentQuantity = getQuantity(ticketTypeId);

		// If this ticket type is not selected and another one is, disable increment
		if ($selectedTicket && $selectedTicket.id !== ticketTypeId && currentQuantity === 0) {
			return true;
		}

		return currentQuantity >= maxQuantityPerType || currentQuantity >= maxTotalTickets;
	}

	// Check if decrement is disabled
	function isDecrementDisabled(ticketTypeId: string): boolean {
		if (disabled) return true;
		return getQuantity(ticketTypeId) <= 0;
	}

	// Get ticket type subtitle (group size info)
	function getTicketSubtitle(ticketType: TicketType): string {
		if (ticketType.group_size && ticketType.group_size > 1) {
			return `Group of ${ticketType.group_size} people`;
		}
		return 'Individual ticket';
	}

	// Calculate subtotal for a ticket type
	function calculateSubtotal(ticketType: TicketType): number {
		const quantity = getQuantity(ticketType.id);
		return ticketType.price * quantity;
	}

	// Check if a ticket type is selected
	function isTicketTypeSelected(ticketTypeId: string): boolean {
		return $selectedTicket?.id === ticketTypeId;
	}

	// Check if another ticket type is selected (for showing disabled state)
	function isAnotherTicketSelected(ticketTypeId: string): boolean {
		return $selectedTicket !== null && $selectedTicket.id !== ticketTypeId;
	}
</script>

<div class="ticket-selector {className}">
	<!-- Header -->
	<div class="header mb-6">
		<div class="mb-2 flex items-center space-x-2">
			<Ticket class="text-primary-600 h-5 w-5" />
			<h3 class="text-lg font-semibold text-neutral-900">Select Tickets</h3>
		</div>
		<p class="text-sm text-neutral-600">Choose your ticket type and quantity</p>
	</div>

	<!-- Validation Errors -->
	{#if $validationErrors.tickets}
		<div class="error-message bg-error/10 border-error/20 mb-4 rounded-lg border p-3">
			<div class="flex items-center space-x-2">
				<AlertTriangle class="text-error h-4 w-4" />
				<span class="text-error font-medium">{$validationErrors.tickets}</span>
			</div>
		</div>
	{/if}

	<!-- Single Ticket Selection Notice -->
	{#if $selectedTicket}
		<div class="selection-notice bg-primary-50 border-primary-200 mb-4 rounded-lg border p-3">
			<div class="flex items-center space-x-2">
				<Info class="text-primary-600 h-4 w-4" />
				<span class="text-primary-800 text-sm">
					You can select one ticket type at a time. To change types, set the current selection to 0.
				</span>
			</div>
		</div>
	{/if}

	<!-- Ticket Types List -->
	<div class="ticket-types-list space-y-4">
		{#each $availableTicketTypes as ticketType (ticketType.id)}
			{@const quantity = getQuantity(ticketType.id)}
			{@const subtotal = calculateSubtotal(ticketType)}
			{@const name = getLocalizedText(ticketType.name_translations, 'Ticket')}
			{@const description = getLocalizedText(ticketType.description_translations, '')}
			{@const isSelected = isTicketTypeSelected(ticketType.id)}
			{@const isOtherSelected = isAnotherTicketSelected(ticketType.id)}

			<div
				class="ticket-type-card hover:shadow-medium rounded-lg border bg-white p-4 transition-all duration-200"
				class:border-primary-300={isSelected}
				class:bg-primary-50={isSelected}
				class:border-neutral-200={!isSelected}
				class:opacity-60={isOtherSelected}
			>
				<!-- Ticket Type Header -->
				<div class="ticket-header mb-3 flex items-start justify-between">
					<div class="ticket-info flex-1">
						<h4 class="ticket-name mb-1 text-lg font-semibold text-neutral-900">
							{name}
							{#if isSelected}
								<span class="text-primary-600 ml-2 text-sm">‚úì Selected</span>
							{/if}
						</h4>

						<div class="ticket-meta flex items-center space-x-4 text-sm text-neutral-600">
							<span class="subtitle">
								{getTicketSubtitle(ticketType)}
							</span>

							{#if ticketType.group_size}
								<div class="group-indicator flex items-center space-x-1">
									<Users class="h-3 w-3" />
									<span>{ticketType.group_size}</span>
								</div>
							{/if}
						</div>

						{#if showDescriptions && description}
							<p class="ticket-description mt-2 text-sm text-neutral-600">
								{description}
							</p>
						{/if}
					</div>

					<div class="price-info text-right">
						<div class="price text-xl font-bold text-neutral-900">
							{formatPrice(ticketType.price)}
						</div>
						{#if ticketType.group_size && ticketType.group_size > 1}
							<div class="price-per-person text-xs text-neutral-500">
								{formatPrice(ticketType.price / ticketType.group_size)} per person
							</div>
						{/if}
					</div>
				</div>

				<!-- Quantity Controls -->
				<div class="quantity-controls flex items-center justify-between">
					<div class="quantity-input flex items-center space-x-3">
						<!-- Decrement Button -->
						<button
							type="button"
							class="quantity-btn decrement-btn flex h-8 w-8 items-center justify-center rounded-full border border-neutral-300 transition-colors
                                {isDecrementDisabled(ticketType.id)
								? 'cursor-not-allowed bg-neutral-100 text-neutral-400'
								: 'focus:ring-primary-500 bg-white text-neutral-700 hover:border-neutral-400 hover:bg-neutral-50 focus:outline-none focus:ring-2'}"
							on:click={() => decrementQuantity(ticketType.id)}
							disabled={isDecrementDisabled(ticketType.id)}
							aria-label="Decrease quantity for {name}"
						>
							<Minus class="h-4 w-4" />
						</button>

						<!-- Quantity Display/Input -->
						<div class="quantity-display relative">
							<input
								type="number"
								class="quantity-input focus:ring-primary-500 focus:border-primary-500 h-8 w-16 rounded-md border border-neutral-300 text-center focus:outline-none focus:ring-2"
								value={quantity}
								min="0"
								max={maxQuantityPerType}
								disabled={disabled || isOtherSelected}
								on:input={(e) => handleInputChange(ticketType.id, e)}
								aria-label="Quantity for {name}"
							/>
						</div>

						<!-- Increment Button -->
						<button
							type="button"
							class="quantity-btn increment-btn flex h-8 w-8 items-center justify-center rounded-full border border-neutral-300 transition-colors
                                {isIncrementDisabled(ticketType.id)
								? 'cursor-not-allowed bg-neutral-100 text-neutral-400'
								: 'focus:ring-primary-500 bg-white text-neutral-700 hover:border-neutral-400 hover:bg-neutral-50 focus:outline-none focus:ring-2'}"
							on:click={() => incrementQuantity(ticketType.id)}
							disabled={isIncrementDisabled(ticketType.id)}
							aria-label="Increase quantity for {name}"
						>
							<Plus class="h-4 w-4" />
						</button>
					</div>

					<!-- Subtotal -->
					{#if quantity > 0}
						<div class="subtotal text-right">
							<div class="subtotal-amount text-primary-700 text-lg font-semibold">
								{formatPrice(subtotal)}
							</div>
							<div class="subtotal-label text-xs text-neutral-500">Subtotal</div>
						</div>
					{/if}
				</div>

				<!-- Quantity Info -->
				{#if quantity > 0}
					<div class="quantity-info bg-primary-50 mt-3 rounded-md p-2">
						<div class="text-primary-700 flex items-center justify-between text-xs">
							<span>Selected: {quantity} ticket{quantity !== 1 ? 's' : ''}</span>
							{#if ticketType.group_size && ticketType.group_size > 1}
								<span>Total people: {quantity * ticketType.group_size}</span>
							{/if}
						</div>
					</div>
				{/if}
			</div>
		{/each}
	</div>

	<!-- Booking Summary -->
	{#if $totalTickets > 0}
		<div class="booking-summary bg-primary-50 border-primary-200 mt-6 rounded-lg border p-4">
			<h4 class="summary-title text-primary-900 mb-3 text-lg font-semibold">Order Summary</h4>

			<div class="summary-details space-y-2">
				<!-- Selected Ticket Type -->
				{#if $selectedTicket}
					{@const selectedType = $availableTicketTypes.find((t) => t.id === $selectedTicket.id)}
					{#if selectedType}
						<div class="summary-row flex items-center justify-between text-sm">
							<span class="text-primary-800">
								{getLocalizedText(selectedType.name_translations, 'Ticket')}
							</span>
							<span class="text-primary-900 font-medium">
								{$selectedTicket.quantity} √ó {formatPrice(selectedType.price)}
							</span>
						</div>
					{/if}
				{/if}

				<!-- Total Price -->
				<div
					class="summary-row border-primary-200 flex items-center justify-between border-t pt-2 text-lg font-bold"
				>
					<span class="text-primary-900">Total:</span>
					<span class="text-primary-900">{formatPrice($totalPrice)}</span>
				</div>
			</div>

			<!-- Limits Warning -->
			{#if $totalTickets >= maxTotalTickets * 0.8}
				<div class="limits-warning bg-warning/10 border-warning/20 mt-3 rounded-md border p-2">
					<div class="flex items-center space-x-2">
						<Info class="text-warning h-4 w-4" />
						<span class="text-warning text-xs">
							Maximum {maxTotalTickets} tickets per booking
						</span>
					</div>
				</div>
			{/if}
		</div>
	{:else}
		<!-- Empty State -->
		<div
			class="empty-state mt-6 rounded-lg border-2 border-dashed border-neutral-300 bg-neutral-50 p-6 text-center"
		>
			<Ticket class="mx-auto mb-2 h-8 w-8 text-neutral-400" />
			<p class="text-neutral-600">No tickets selected</p>
			<p class="mt-1 text-sm text-neutral-500">Choose your ticket type above to continue</p>
		</div>
	{/if}
</div>

<style>
	/* Smooth transitions for all interactive elements */
	.quantity-btn,
	.quantity-input,
	.ticket-type-card {
		transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Hover effects for ticket cards */
	.ticket-type-card:hover:not(.opacity-60) {
		transform: translateY(-1px);
	}

	/* Focus ring for accessibility */
	.quantity-btn:focus-visible,
	.quantity-input:focus-visible {
		outline: 2px solid #2563eb;
		outline-offset: 2px;
	}

	/* Disabled state styling */
	.quantity-btn:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	/* Hide number input spinners on WebKit browsers */
	.quantity-input::-webkit-outer-spin-button,
	.quantity-input::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}

	/* Hide number input spinners on Firefox */
	.quantity-input[type='number'] {
		-moz-appearance: textfield;
	}

	/* Mobile responsive adjustments */
	@media (max-width: 640px) {
		.ticket-header {
			flex-direction: column;
			align-items: start;
		}

		.price-info {
			margin-top: 0.5rem;
			text-align: left;
		}

		.quantity-controls {
			flex-direction: column;
			align-items: start;
			gap: 1rem;
		}
	}

	/* Animation for subtotal appearance */
	.subtotal {
		animation: slideIn 0.3s ease-out;
	}

	@keyframes slideIn {
		from {
			opacity: 0;
			transform: translateX(10px);
		}
		to {
			opacity: 1;
			transform: translateX(0);
		}
	}

	/* Visual feedback for selected ticket */
	.ticket-type-card.border-primary-300 {
		box-shadow: 0 0 0 1px rgb(147 197 253 / 0.5);
	}
</style>



================================================================================
File: lib/components/TimeSlotPicker.svelte
================================================================================

<!--
@file TimeSlotPicker Component - Time slot selection for museum visits
@description 
Interactive component for selecting available time slots for museum visits.
Displays capacity information and handles loading states.

Key features:
- Real-time availability display
- Capacity indicators with visual cues
- Loading states during API calls
- Responsive grid layout
- Accessibility support
- Integration with booking store

@dependencies
- Svelte 5: For reactive state management with runes
- Lucide Icons: For time and capacity indicators
- Tailwind CSS: For styling and responsive design
- bookingStore: For time slot state management

@notes
- Time slots are fetched based on selected date and ticket type
- Capacity is shown as available/total format
- Fully booked slots are visually disabled
- Times are displayed in user's local timezone
- Supports both click and keyboard interaction
- Fixed selection issues by improving slot validation and interaction
- Error handling: Proper validation of slot availability and user selection
-->

<script lang="ts">
	import { Clock, Users, AlertCircle, Loader2 } from 'lucide-svelte';
	import {
		selectedDate,
		selectedTimeSlot,
		availableTimeSlots,
		isLoadingTimeSlots,
		bookingError,
		totalTickets,
		bookingActions
	} from '$lib/stores/bookingStore';

	import type { TimeSlot } from '$lib/stores/bookingStore';

	// Type definitions
	interface Props {
		class?: string;
		disabled?: boolean;
		showCapacity?: boolean;
		onselect?: () => void;
	}

	// Props for customization
	let { class: className = '', disabled = false, showCapacity = true, onselect }: Props = $props();

	// Format time for display
	function formatTime(timeString: string): string {
		try {
			const date = new Date(timeString);
			return date.toLocaleTimeString('en', {
				hour: '2-digit',
				minute: '2-digit',
				hour12: true
			});
		} catch (error) {
			console.error('[TimeSlotPicker] Error formatting time:', timeString, error);
			return timeString;
		}
	}

	// Format time range for display
	function formatTimeRange(startTime: string, endTime: string): string {
		return `${formatTime(startTime)} - ${formatTime(endTime)}`;
	}

	// Check if a time slot is selectable
	function isSlotSelectable(timeSlot: TimeSlot): boolean {
		console.log('[TimeSlotPicker] Checking slot selectability:', {
			timeSlotId: timeSlot.id,
			disabled,
			availableSlots: timeSlot.available_slots,
			totalTickets: $totalTickets,
			capacity: timeSlot.capacity
		});

		if (disabled) {
			console.log('[TimeSlotPicker] Slot not selectable: component disabled');
			return false;
		}

		if (timeSlot.available_slots <= 0) {
			console.log('[TimeSlotPicker] Slot not selectable: no available slots');
			return false;
		}

		const currentTickets = $totalTickets;
		if (currentTickets <= 0) {
			console.log('[TimeSlotPicker] Slot not selectable: no tickets selected');
			return false;
		}

		const canAccommodate = timeSlot.available_slots >= currentTickets;
		console.log('[TimeSlotPicker] Slot selectable:', canAccommodate);
		return canAccommodate;
	}

	// Get capacity status for styling
	function getCapacityStatus(timeSlot: TimeSlot): 'full' | 'low' | 'medium' | 'high' {
		const availableRatio = timeSlot.available_slots / timeSlot.capacity;

		if (timeSlot.available_slots <= 0) return 'full';
		if (availableRatio <= 0.2) return 'low';
		if (availableRatio <= 0.5) return 'medium';
		return 'high';
	}

	// Get capacity color classes
	function getCapacityClasses(status: string): string {
		switch (status) {
			case 'full':
				return 'text-red-600 bg-red-50 border-red-200';
			case 'low':
				return 'text-amber-600 bg-amber-50 border-amber-200';
			case 'medium':
				return 'text-blue-600 bg-blue-50 border-blue-200';
			case 'high':
				return 'text-green-600 bg-green-50 border-green-200';
			default:
				return 'text-neutral-600 bg-neutral-50 border-neutral-200';
		}
	}

	// Handle time slot selection
	function selectTimeSlot(timeSlot: TimeSlot): void {
		console.log('[TimeSlotPicker] Attempting to select time slot:', timeSlot.id);

		if (!isSlotSelectable(timeSlot)) {
			console.log('[TimeSlotPicker] Time slot not selectable, aborting');
			return;
		}

		console.log('[TimeSlotPicker] Selecting time slot:', timeSlot.id);
		bookingActions.setSelectedTimeSlot(timeSlot);

		// Call onselect callback if provided
		if (onselect) {
			// Use setTimeout to avoid calling during reactive update
			setTimeout(() => {
				console.log('[TimeSlotPicker] Calling onselect callback');
				onselect?.();
			}, 0);
		}
	}

	// Keyboard navigation
	function handleKeydown(event: KeyboardEvent, timeSlot: TimeSlot): void {
		if (event.key === 'Enter' || event.key === ' ') {
			event.preventDefault();
			selectTimeSlot(timeSlot);
		}
	}
</script>

<div class="time-slot-picker {className}">
	<!-- Header -->
	<div class="header mb-4">
		<div class="mb-2 flex items-center space-x-2">
			<Clock class="text-primary-600 h-5 w-5" />
			<h3 class="text-lg font-semibold text-neutral-900">Select Time Slot</h3>
		</div>

		{#if $selectedDate}
			<p class="text-sm text-neutral-600">
				Available times for {$selectedDate.toLocaleDateString('en', {
					weekday: 'long',
					year: 'numeric',
					month: 'long',
					day: 'numeric'
				})}
			</p>
		{/if}
	</div>

	<!-- Debug Information -->
	<div class="mb-4 rounded bg-neutral-50 p-2 text-xs text-neutral-500">
		Debug: Total tickets: {$totalTickets}, Available slots: {$availableTimeSlots.length}, Loading: {$isLoadingTimeSlots}
	</div>

	<!-- Loading State -->
	{#if $isLoadingTimeSlots}
		<div class="loading-state flex flex-col items-center justify-center space-y-3 py-12">
			<Loader2 class="text-primary-600 h-8 w-8 animate-spin" />
			<p class="text-neutral-600">Loading available time slots...</p>
		</div>

		<!-- Error State -->
	{:else if $bookingError}
		<div class="error-state flex flex-col items-center justify-center space-y-3 py-12">
			<AlertCircle class="h-8 w-8 text-red-600" />
			<p class="text-center text-red-600">{$bookingError}</p>
			<button
				type="button"
				class="rounded-md bg-blue-600 px-4 py-2 text-sm text-white hover:bg-blue-700"
				on:click={() => bookingActions.clearErrors()}
			>
				Try Again
			</button>
		</div>

		<!-- No Date Selected -->
	{:else if !$selectedDate}
		<div
			class="empty-state flex flex-col items-center justify-center space-y-3 rounded-lg border-2 border-dashed border-neutral-300 bg-neutral-50 py-12"
		>
			<Clock class="h-8 w-8 text-neutral-400" />
			<p class="text-center text-neutral-600">Please select a date to view available time slots</p>
		</div>

		<!-- No Time Slots Available -->
	{:else if $availableTimeSlots.length === 0}
		<div
			class="empty-state flex flex-col items-center justify-center space-y-3 rounded-lg border border-neutral-200 bg-neutral-50 py-12"
		>
			<AlertCircle class="h-8 w-8 text-neutral-400" />
			<p class="text-center text-neutral-600">No time slots available for the selected date</p>
			<p class="text-center text-sm text-neutral-500">
				Please choose a different date or check back later
			</p>
		</div>

		<!-- Time Slots Grid -->
	{:else}
		<div class="time-slots-grid grid gap-3 sm:grid-cols-2 lg:grid-cols-3">
			{#each $availableTimeSlots as timeSlot (timeSlot.id)}
				{@const isSelected = $selectedTimeSlot?.id === timeSlot.id}
				{@const isSelectable = isSlotSelectable(timeSlot)}
				{@const capacityStatus = getCapacityStatus(timeSlot)}
				{@const capacityClasses = getCapacityClasses(capacityStatus)}

				<button
					type="button"
					class="time-slot-card focus:ring-primary-500 relative rounded-lg border-2 p-4 text-left transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-1
                        {isSelected
						? 'border-primary-600 bg-primary-50 shadow-md'
						: isSelectable
							? 'hover:border-primary-300 cursor-pointer border-neutral-200 bg-white hover:-translate-y-0.5 hover:shadow-md'
							: 'cursor-not-allowed border-neutral-200 bg-neutral-50 opacity-60'}"
					on:click={() => selectTimeSlot(timeSlot)}
					on:keydown={(e) => handleKeydown(e, timeSlot)}
					disabled={!isSelectable}
					aria-label="Select time slot {formatTimeRange(timeSlot.start_time, timeSlot.end_time)}"
					aria-selected={isSelected}
				>
					<!-- Time Range -->
					<div class="time-range mb-2">
						<div class="text-lg font-semibold text-neutral-900">
							{formatTimeRange(timeSlot.start_time, timeSlot.end_time)}
						</div>
					</div>

					<!-- Capacity Information -->
					{#if showCapacity}
						<div class="capacity-info mb-2 flex items-center justify-between">
							<div class="flex items-center space-x-1">
								<Users class="h-4 w-4 text-neutral-500" />
								<span class="text-sm text-neutral-600">Capacity</span>
							</div>

							<div
								class="capacity-badge rounded-full border px-2 py-1 text-xs font-medium {capacityClasses}"
							>
								{timeSlot.available_slots}/{timeSlot.capacity}
							</div>
						</div>
					{/if}

					<!-- Status Indicators -->
					<div class="status-indicators mt-3 flex items-center justify-between">
						<!-- Availability Status -->
						<div class="availability-status text-xs">
							{#if capacityStatus === 'full'}
								<span class="font-medium text-red-600">Fully Booked</span>
							{:else if capacityStatus === 'low'}
								<span class="font-medium text-amber-600">Few Spots Left</span>
							{:else if capacityStatus === 'medium'}
								<span class="font-medium text-blue-600">Good Availability</span>
							{:else}
								<span class="font-medium text-green-600">Available</span>
							{/if}
						</div>

						<!-- Selection Indicator -->
						{#if isSelected}
							<div class="selection-indicator bg-primary-600 h-2 w-2 rounded-full"></div>
						{/if}
					</div>

					<!-- Insufficient Capacity Warning -->
					{#if $totalTickets > 0 && timeSlot.available_slots < $totalTickets && timeSlot.available_slots > 0}
						<div class="capacity-warning mt-2 rounded-md border border-amber-200 bg-amber-50 p-2">
							<p class="text-xs text-amber-600">
								Only {timeSlot.available_slots} spots available (you need {$totalTickets})
							</p>
						</div>
					{/if}

					<!-- Selectability Debug -->
					<div class="debug-info mt-2 text-xs text-neutral-400">
						Debug: Selectable={isSelectable}, Available={timeSlot.available_slots}, Need={$totalTickets}
					</div>
				</button>
			{/each}
		</div>

		<!-- Selected Time Slot Summary -->
		{#if $selectedTimeSlot}
			<div class="selected-summary bg-primary-50 border-primary-200 mt-6 rounded-lg border p-4">
				<div class="mb-2 flex items-center space-x-2">
					<Clock class="text-primary-600 h-4 w-4" />
					<span class="text-primary-900 font-medium">Selected Time Slot</span>
				</div>
				<p class="text-primary-800">
					{formatTimeRange($selectedTimeSlot.start_time, $selectedTimeSlot.end_time)}
				</p>
				<p class="text-primary-700 mt-1 text-sm">
					{$selectedTimeSlot.available_slots} spots available
				</p>
			</div>
		{/if}
	{/if}
</div>

<style>
	/* Hover animations for selectable time slots */
	.time-slot-card:not(:disabled):hover {
		transform: translateY(-2px);
	}

	/* Focus ring for accessibility */
	.time-slot-card:focus {
		outline: 2px solid #2563eb;
		outline-offset: 2px;
	}

	/* Smooth transitions */
	.time-slot-card {
		transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Mobile responsive adjustments */
	@media (max-width: 640px) {
		.time-slots-grid {
			grid-template-columns: 1fr;
		}

		.time-slot-card {
			padding: 1rem;
		}
	}

	/* Capacity badge animation */
	.capacity-badge {
		transition: all 0.2s ease-in-out;
	}

	/* Selection indicator pulse animation */
	.selection-indicator {
		animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
	}

	@keyframes pulse {
		0%,
		100% {
			opacity: 1;
		}
		50% {
			opacity: 0.5;
		}
	}

	/* Ensure clickable appearance for selectable slots */
	.time-slot-card:not(:disabled) {
		cursor: pointer;
	}

	.time-slot-card:disabled {
		cursor: not-allowed;
	}
</style>



================================================================================
File: lib/components/ui/Alert.svelte
================================================================================

<!--
/**
 * @file Alert.svelte
 * @description A reusable alert component for displaying messages.
 *
 * @props
 * - type (string, default 'info'): The type of alert ('info', 'success', 'warning', 'error').
 * - message (string, required): The message to display in the alert.
 * - class (string, default ''): Additional CSS classes to apply to the alert.
 * - show (boolean, default true): Controls the visibility of the alert.
 *
 * @slots
 * - icon: Optional slot for a custom icon.
 *
 * @notes
 * - Uses Tailwind CSS for styling.
 * - Automatically selects icon and colors based on the type.
 */
-->
<script lang="ts">
	interface $$Props {
		type?: 'info' | 'success' | 'warning' | 'error';
		message: string;
		class?: string;
		show?: boolean;
	}

	let { type = 'info', message, class: customClass = '', show = true }: $$Props = $props();

	const alertStyles = {
		info: {
			bg: 'bg-blue-900 border-blue-700',
			text: 'text-blue-300',
			icon: `M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon information-circle
		},
		success: {
			bg: 'bg-green-900 border-green-700',
			text: 'text-green-300',
			icon: `M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon check-circle
		},
		warning: {
			bg: 'bg-yellow-900 border-yellow-700',
			text: 'text-yellow-300',
			icon: `M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z` // Heroicon exclamation
		},
		error: {
			bg: 'bg-red-900 border-red-700',
			text: 'text-red-300',
			icon: `M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon x-circle
		}
	};

	let currentStyle = $derived(alertStyles[type]);
</script>

{#if show && message}
	<div
		class="mb-4 rounded-md border p-4 {currentStyle.bg} {currentStyle.text} {customClass}"
		role="alert"
	>
		<div class="flex items-center">
			<slot name="icon">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="mr-2 h-5 w-5"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d={currentStyle.icon}
					/>
				</svg>
			</slot>
			<span class="font-medium">{message}</span>
		</div>
	</div>
{/if}



================================================================================
File: lib/components/ui/Button.svelte
================================================================================

<!-- Button.svelte -->
<script lang="ts">
	import type { HTMLButtonAttributes } from 'svelte/elements';

	interface $$Props extends HTMLButtonAttributes {
		type?: 'button' | 'submit' | 'reset';
		disabled?: boolean;
		loading?: boolean;
		class?: string;
		variant?: 'primary' | 'secondary' | 'danger' | 'outline' | 'link';
		size?: 'sm' | 'md' | 'lg';
	}

	let {
		type = 'button',
		disabled = false,
		loading = false,
		class: customClass = '',
		variant = 'primary',
		size = 'md',
		...restProps
	}: $$Props = $props();

	const baseClasses =
		'font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 transition ease-in-out duration-150 flex items-center justify-center';

	const sizeClasses = {
		sm: 'px-3 py-1.5 text-xs',
		md: 'px-4 py-2 text-sm',
		lg: 'px-6 py-3 text-base'
	};

	const variantClasses = {
		primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
		secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
		danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
		outline: 'border border-gray-500 text-gray-300 hover:bg-gray-700 focus:ring-gray-500',
		link: 'text-blue-400 hover:text-blue-300 underline focus:ring-blue-500 p-0'
	};

	let isDisabled = $derived(disabled || loading);
</script>

<button
	{type}
	disabled={isDisabled}
	class="{baseClasses} {sizeClasses[size]} {variantClasses[variant]} {isDisabled
		? 'cursor-not-allowed opacity-50'
		: ''} {customClass}"
	on:click
	{...restProps}
>
	{#if loading}
		<svg
			class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
		>
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"
			></circle>
			<path
				class="opacity-75"
				fill="currentColor"
				d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
			></path>
		</svg>
	{:else}
		<slot />
	{/if}
</button>



================================================================================
File: lib/components/ui/Input.svelte
================================================================================

<!--
  /**
   * @file Input.svelte
   * @description A reusable input component for forms.
   *
   * @props
   * - type (string, default 'text'): The type of the input (e.g., 'text', 'email', 'password').
   * - id (string, required): The ID of the input, used for associating with a label.
   * - name (string, optional): The name of the input, useful for form submission. Defaults to id if not provided.
   * - label (string, optional): The label text to display for the input.
   * - placeholder (string, default ''): The placeholder text for the input.
   * - value (string, default '', bindable): The current value of the input. Two-way bindable using `bind:value`.
   * - required (boolean, default false): Whether the input is required.
   * - disabled (boolean, default false): Whether the input is disabled.
   * - class (string, default ''): Additional CSS classes to apply to the input wrapper.
   * - inputClass (string, default ''): Additional CSS classes to apply directly to the input element.
   * - labelClass (string, default ''): Additional CSS classes to apply directly to the label element.
   *
   * @events
   * - input: Fired when the input value changes. The event detail contains the new value.
   * - change: Fired when the input value changes and the element loses focus.
   * - blur: Fired when the input loses focus.
   * - focus: Fired when the input gains focus.
   *
   * @notes
   * - Uses Tailwind CSS for styling.
   * - Supports Svelte 5 runes for two-way binding with `bind:value`.
   * - The `value` prop is made bindable using `$bindable()`.
   */
  -->
<script lang="ts">
	import type { HTMLInputAttributes } from 'svelte/elements';

	interface $$Props extends Omit<HTMLInputAttributes, 'value'> {
		// Omit original value from HTMLInputAttributes
		type?: 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url';
		id: string;
		name?: string;
		label?: string;
		placeholder?: string;
		value?: string; // This will be the prop passed in for binding
		required?: boolean;
		disabled?: boolean;
		class?: string; // For the wrapper div
		inputClass?: string;
		labelClass?: string;
	}

	let {
		type = 'text',
		id,
		name = id,
		label = '',
		placeholder = '',
		value: initialValue = $bindable(''), // Use $bindable() for the prop intended for two-way binding
		required = false,
		disabled = false,
		class: wrapperClass = '',
		inputClass = '',
		labelClass = '',
		...restProps
	}: $$Props = $props();

	// The `initialValue` prop, which is now bindable, will automatically update
	// when `bind:value` is used on the component instance.
	// No need for an internal $state variable for `value` that mirrors the prop if using $bindable directly with the prop name.
	// The `value` in `<input bind:value... />` will now directly bind to the `initialValue` prop.
</script>

<div class="mb-4 {wrapperClass}">
	{#if label}
		<label for={id} class="mb-1 block text-sm font-medium text-gray-300 {labelClass}">
			{label}
			{#if required}<span class="text-red-500">*</span>{/if}
		</label>
	{/if}
	<input
		{type}
		{id}
		{name}
		{placeholder}
		bind:value={initialValue}
		{required}
		{disabled}
		class="w-full rounded-md border border-gray-600 bg-gray-700 px-3 py-2 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none {inputClass}"
		on:input
		on:change
		on:blur
		on:focus
		on:keydown
		on:keyup
		on:keypress
		{...restProps}
	/>
</div>



================================================================================
File: lib/index.ts
================================================================================

// place files you want to import through the `$lib` alias in this folder.



================================================================================
File: lib/paraglide/messages/_index.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from "../runtime.js"
import * as it from "./it.js"
import * as en from "./en.js"
import * as de from "./de.js"
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_loading = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_loading(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_loading", locale)
	if (locale === "it") return it.common_loading(inputs)
	if (locale === "en") return en.common_loading(inputs)
	return de.common_loading(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_submit = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_submit(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_submit", locale)
	if (locale === "it") return it.common_submit(inputs)
	if (locale === "en") return en.common_submit(inputs)
	return de.common_submit(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_cancel = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_cancel(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_cancel", locale)
	if (locale === "it") return it.common_cancel(inputs)
	if (locale === "en") return en.common_cancel(inputs)
	return de.common_cancel(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_error = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_error(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_error", locale)
	if (locale === "it") return it.common_error(inputs)
	if (locale === "en") return en.common_error(inputs)
	return de.common_error(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_tryagain1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_tryagain1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_tryagain1", locale)
	if (locale === "it") return it.common_tryagain1(inputs)
	if (locale === "en") return en.common_tryagain1(inputs)
	return de.common_tryagain1(inputs)
};
export { common_tryagain1 as "common_tryAgain" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_close = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_close(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_close", locale)
	if (locale === "it") return it.common_close(inputs)
	if (locale === "en") return en.common_close(inputs)
	return de.common_close(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_next = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_next(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_next", locale)
	if (locale === "it") return it.common_next(inputs)
	if (locale === "en") return en.common_next(inputs)
	return de.common_next(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_previous = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_previous(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_previous", locale)
	if (locale === "it") return it.common_previous(inputs)
	if (locale === "en") return en.common_previous(inputs)
	return de.common_previous(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_readmore1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_readmore1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_readmore1", locale)
	if (locale === "it") return it.common_readmore1(inputs)
	if (locale === "en") return en.common_readmore1(inputs)
	return de.common_readmore1(inputs)
};
export { common_readmore1 as "common_readMore" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_showless1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_showless1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_showless1", locale)
	if (locale === "it") return it.common_showless1(inputs)
	if (locale === "en") return en.common_showless1(inputs)
	return de.common_showless1(inputs)
};
export { common_showless1 as "common_showLess" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_home = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_home(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_home", locale)
	if (locale === "it") return it.navigation_home(inputs)
	if (locale === "en") return en.navigation_home(inputs)
	return de.navigation_home(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_about = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_about(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_about", locale)
	if (locale === "it") return it.navigation_about(inputs)
	if (locale === "en") return en.navigation_about(inputs)
	return de.navigation_about(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_visit = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_visit(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_visit", locale)
	if (locale === "it") return it.navigation_visit(inputs)
	if (locale === "en") return en.navigation_visit(inputs)
	return de.navigation_visit(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_contact = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_contact(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_contact", locale)
	if (locale === "it") return it.navigation_contact(inputs)
	if (locale === "en") return en.navigation_contact(inputs)
	return de.navigation_contact(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_book = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_book(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_book", locale)
	if (locale === "it") return it.navigation_book(inputs)
	if (locale === "en") return en.navigation_book(inputs)
	return de.navigation_book(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_shop = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_shop(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_shop", locale)
	if (locale === "it") return it.navigation_shop(inputs)
	if (locale === "en") return en.navigation_shop(inputs)
	return de.navigation_shop(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_exhibitions = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_exhibitions(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_exhibitions", locale)
	if (locale === "it") return it.navigation_exhibitions(inputs)
	if (locale === "en") return en.navigation_exhibitions(inputs)
	return de.navigation_exhibitions(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_collections = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_collections(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_collections", locale)
	if (locale === "it") return it.navigation_collections(inputs)
	if (locale === "en") return en.navigation_collections(inputs)
	return de.navigation_collections(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_events = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_events(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_events", locale)
	if (locale === "it") return it.navigation_events(inputs)
	if (locale === "en") return en.navigation_events(inputs)
	return de.navigation_events(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_news = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_news(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_news", locale)
	if (locale === "it") return it.navigation_news(inputs)
	if (locale === "en") return en.navigation_news(inputs)
	return de.navigation_news(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_en = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_en(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_en", locale)
	if (locale === "it") return it.languages_en(inputs)
	if (locale === "en") return en.languages_en(inputs)
	return de.languages_en(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_it = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_it(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_it", locale)
	if (locale === "it") return it.languages_it(inputs)
	if (locale === "en") return en.languages_it(inputs)
	return de.languages_it(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_de = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_de(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_de", locale)
	if (locale === "it") return it.languages_de(inputs)
	if (locale === "en") return en.languages_de(inputs)
	return de.languages_de(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_welcometitle1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_welcometitle1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_welcometitle1", locale)
	if (locale === "it") return it.museum_welcometitle1(inputs)
	if (locale === "en") return en.museum_welcometitle1(inputs)
	return de.museum_welcometitle1(inputs)
};
export { museum_welcometitle1 as "museum_welcomeTitle" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_welcomesubtitle1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_welcomesubtitle1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_welcomesubtitle1", locale)
	if (locale === "it") return it.museum_welcomesubtitle1(inputs)
	if (locale === "en") return en.museum_welcomesubtitle1(inputs)
	return de.museum_welcomesubtitle1(inputs)
};
export { museum_welcomesubtitle1 as "museum_welcomeSubtitle" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_openinghours1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_openinghours1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_openinghours1", locale)
	if (locale === "it") return it.museum_openinghours1(inputs)
	if (locale === "en") return en.museum_openinghours1(inputs)
	return de.museum_openinghours1(inputs)
};
export { museum_openinghours1 as "museum_openingHours" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_admissionfees1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_admissionfees1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_admissionfees1", locale)
	if (locale === "it") return it.museum_admissionfees1(inputs)
	if (locale === "en") return en.museum_admissionfees1(inputs)
	return de.museum_admissionfees1(inputs)
};
export { museum_admissionfees1 as "museum_admissionFees" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const museum_location = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_location(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_location", locale)
	if (locale === "it") return it.museum_location(inputs)
	if (locale === "en") return en.museum_location(inputs)
	return de.museum_location(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const museum_accessibility = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_accessibility(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_accessibility", locale)
	if (locale === "it") return it.museum_accessibility(inputs)
	if (locale === "en") return en.museum_accessibility(inputs)
	return de.museum_accessibility(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_current = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_current(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_current", locale)
	if (locale === "it") return it.exhibitions_current(inputs)
	if (locale === "en") return en.exhibitions_current(inputs)
	return de.exhibitions_current(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_upcoming = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_upcoming(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_upcoming", locale)
	if (locale === "it") return it.exhibitions_upcoming(inputs)
	if (locale === "en") return en.exhibitions_upcoming(inputs)
	return de.exhibitions_upcoming(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_past = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_past(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_past", locale)
	if (locale === "it") return it.exhibitions_past(inputs)
	if (locale === "en") return en.exhibitions_past(inputs)
	return de.exhibitions_past(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_permanent = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_permanent(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_permanent", locale)
	if (locale === "it") return it.exhibitions_permanent(inputs)
	if (locale === "en") return en.exhibitions_permanent(inputs)
	return de.exhibitions_permanent(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_temporary = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_temporary(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_temporary", locale)
	if (locale === "it") return it.exhibitions_temporary(inputs)
	if (locale === "en") return en.exhibitions_temporary(inputs)
	return de.exhibitions_temporary(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_featured = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_featured(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_featured", locale)
	if (locale === "it") return it.exhibitions_featured(inputs)
	if (locale === "en") return en.exhibitions_featured(inputs)
	return de.exhibitions_featured(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const exhibitions_viewdetails1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_viewdetails1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_viewdetails1", locale)
	if (locale === "it") return it.exhibitions_viewdetails1(inputs)
	if (locale === "en") return en.exhibitions_viewdetails1(inputs)
	return de.exhibitions_viewdetails1(inputs)
};
export { exhibitions_viewdetails1 as "exhibitions_viewDetails" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_duration = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_duration(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_duration", locale)
	if (locale === "it") return it.exhibitions_duration(inputs)
	if (locale === "en") return en.exhibitions_duration(inputs)
	return de.exhibitions_duration(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_curator = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_curator(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_curator", locale)
	if (locale === "it") return it.exhibitions_curator(inputs)
	if (locale === "en") return en.exhibitions_curator(inputs)
	return de.exhibitions_curator(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_sponsors = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_sponsors(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_sponsors", locale)
	if (locale === "it") return it.exhibitions_sponsors(inputs)
	if (locale === "en") return en.exhibitions_sponsors(inputs)
	return de.exhibitions_sponsors(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_title = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_title(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_title", locale)
	if (locale === "it") return it.booking_title(inputs)
	if (locale === "en") return en.booking_title(inputs)
	return de.booking_title(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_selectdate1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_selectdate1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_selectdate1", locale)
	if (locale === "it") return it.booking_selectdate1(inputs)
	if (locale === "en") return en.booking_selectdate1(inputs)
	return de.booking_selectdate1(inputs)
};
export { booking_selectdate1 as "booking_selectDate" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_selecttime1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_selecttime1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_selecttime1", locale)
	if (locale === "it") return it.booking_selecttime1(inputs)
	if (locale === "en") return en.booking_selecttime1(inputs)
	return de.booking_selecttime1(inputs)
};
export { booking_selecttime1 as "booking_selectTime" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_adults = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_adults(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_adults", locale)
	if (locale === "it") return it.booking_adults(inputs)
	if (locale === "en") return en.booking_adults(inputs)
	return de.booking_adults(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_children = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_children(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_children", locale)
	if (locale === "it") return it.booking_children(inputs)
	if (locale === "en") return en.booking_children(inputs)
	return de.booking_children(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_students = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_students(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_students", locale)
	if (locale === "it") return it.booking_students(inputs)
	if (locale === "en") return en.booking_students(inputs)
	return de.booking_students(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_seniors = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_seniors(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_seniors", locale)
	if (locale === "it") return it.booking_seniors(inputs)
	if (locale === "en") return en.booking_seniors(inputs)
	return de.booking_seniors(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_groups = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_groups(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_groups", locale)
	if (locale === "it") return it.booking_groups(inputs)
	if (locale === "en") return en.booking_groups(inputs)
	return de.booking_groups(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_guidedtour1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_guidedtour1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_guidedtour1", locale)
	if (locale === "it") return it.booking_guidedtour1(inputs)
	if (locale === "en") return en.booking_guidedtour1(inputs)
	return de.booking_guidedtour1(inputs)
};
export { booking_guidedtour1 as "booking_guidedTour" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_audioguide1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_audioguide1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_audioguide1", locale)
	if (locale === "it") return it.booking_audioguide1(inputs)
	if (locale === "en") return en.booking_audioguide1(inputs)
	return de.booking_audioguide1(inputs)
};
export { booking_audioguide1 as "booking_audioGuide" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_total = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_total(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_total", locale)
	if (locale === "it") return it.booking_total(inputs)
	if (locale === "en") return en.booking_total(inputs)
	return de.booking_total(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_proceed = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_proceed(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_proceed", locale)
	if (locale === "it") return it.booking_proceed(inputs)
	if (locale === "en") return en.booking_proceed(inputs)
	return de.booking_proceed(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_confirmation = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_confirmation(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_confirmation", locale)
	if (locale === "it") return it.booking_confirmation(inputs)
	if (locale === "en") return en.booking_confirmation(inputs)
	return de.booking_confirmation(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_planyourvisit2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_planyourvisit2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_planyourvisit2", locale)
	if (locale === "it") return it.visit_planyourvisit2(inputs)
	if (locale === "en") return en.visit_planyourvisit2(inputs)
	return de.visit_planyourvisit2(inputs)
};
export { visit_planyourvisit2 as "visit_planYourVisit" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_beforeyoucome2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_beforeyoucome2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_beforeyoucome2", locale)
	if (locale === "it") return it.visit_beforeyoucome2(inputs)
	if (locale === "en") return en.visit_beforeyoucome2(inputs)
	return de.visit_beforeyoucome2(inputs)
};
export { visit_beforeyoucome2 as "visit_beforeYouCome" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_whattoexpect2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_whattoexpect2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_whattoexpect2", locale)
	if (locale === "it") return it.visit_whattoexpect2(inputs)
	if (locale === "en") return en.visit_whattoexpect2(inputs)
	return de.visit_whattoexpect2(inputs)
};
export { visit_whattoexpect2 as "visit_whatToExpect" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_facilities = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_facilities(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_facilities", locale)
	if (locale === "it") return it.visit_facilities(inputs)
	if (locale === "en") return en.visit_facilities(inputs)
	return de.visit_facilities(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_cafeteria = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_cafeteria(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_cafeteria", locale)
	if (locale === "it") return it.visit_cafeteria(inputs)
	if (locale === "en") return en.visit_cafeteria(inputs)
	return de.visit_cafeteria(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_giftshop1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_giftshop1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_giftshop1", locale)
	if (locale === "it") return it.visit_giftshop1(inputs)
	if (locale === "en") return en.visit_giftshop1(inputs)
	return de.visit_giftshop1(inputs)
};
export { visit_giftshop1 as "visit_giftShop" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_parking = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_parking(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_parking", locale)
	if (locale === "it") return it.visit_parking(inputs)
	if (locale === "en") return en.visit_parking(inputs)
	return de.visit_parking(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_wheelchairaccess1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_wheelchairaccess1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_wheelchairaccess1", locale)
	if (locale === "it") return it.visit_wheelchairaccess1(inputs)
	if (locale === "en") return en.visit_wheelchairaccess1(inputs)
	return de.visit_wheelchairaccess1(inputs)
};
export { visit_wheelchairaccess1 as "visit_wheelchairAccess" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_familyfriendly1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_familyfriendly1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_familyfriendly1", locale)
	if (locale === "it") return it.visit_familyfriendly1(inputs)
	if (locale === "en") return en.visit_familyfriendly1(inputs)
	return de.visit_familyfriendly1(inputs)
};
export { visit_familyfriendly1 as "visit_familyFriendly" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_getintouch2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_getintouch2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_getintouch2", locale)
	if (locale === "it") return it.contact_getintouch2(inputs)
	if (locale === "en") return en.contact_getintouch2(inputs)
	return de.contact_getintouch2(inputs)
};
export { contact_getintouch2 as "contact_getInTouch" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_address = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_address(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_address", locale)
	if (locale === "it") return it.contact_address(inputs)
	if (locale === "en") return en.contact_address(inputs)
	return de.contact_address(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_phone = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_phone(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_phone", locale)
	if (locale === "it") return it.contact_phone(inputs)
	if (locale === "en") return en.contact_phone(inputs)
	return de.contact_phone(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_email = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_email(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_email", locale)
	if (locale === "it") return it.contact_email(inputs)
	if (locale === "en") return en.contact_email(inputs)
	return de.contact_email(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_socialmedia1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_socialmedia1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_socialmedia1", locale)
	if (locale === "it") return it.contact_socialmedia1(inputs)
	if (locale === "en") return en.contact_socialmedia1(inputs)
	return de.contact_socialmedia1(inputs)
};
export { contact_socialmedia1 as "contact_socialMedia" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_sendmessage1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_sendmessage1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_sendmessage1", locale)
	if (locale === "it") return it.contact_sendmessage1(inputs)
	if (locale === "en") return en.contact_sendmessage1(inputs)
	return de.contact_sendmessage1(inputs)
};
export { contact_sendmessage1 as "contact_sendMessage" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_yourname1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_yourname1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_yourname1", locale)
	if (locale === "it") return it.contact_yourname1(inputs)
	if (locale === "en") return en.contact_yourname1(inputs)
	return de.contact_yourname1(inputs)
};
export { contact_yourname1 as "contact_yourName" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_youremail1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_youremail1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_youremail1", locale)
	if (locale === "it") return it.contact_youremail1(inputs)
	if (locale === "en") return en.contact_youremail1(inputs)
	return de.contact_youremail1(inputs)
};
export { contact_youremail1 as "contact_yourEmail" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_subject = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_subject(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_subject", locale)
	if (locale === "it") return it.contact_subject(inputs)
	if (locale === "en") return en.contact_subject(inputs)
	return de.contact_subject(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_message = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_message(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_message", locale)
	if (locale === "it") return it.contact_message(inputs)
	if (locale === "en") return en.contact_message(inputs)
	return de.contact_message(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_messagesent1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_messagesent1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_messagesent1", locale)
	if (locale === "it") return it.contact_messagesent1(inputs)
	if (locale === "en") return en.contact_messagesent1(inputs)
	return de.contact_messagesent1(inputs)
};
export { contact_messagesent1 as "contact_messageSent" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_copyright = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_copyright(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_copyright", locale)
	if (locale === "it") return it.footer_copyright(inputs)
	if (locale === "en") return en.footer_copyright(inputs)
	return de.footer_copyright(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_privacy = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_privacy(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_privacy", locale)
	if (locale === "it") return it.footer_privacy(inputs)
	if (locale === "en") return en.footer_privacy(inputs)
	return de.footer_privacy(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_terms = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_terms(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_terms", locale)
	if (locale === "it") return it.footer_terms(inputs)
	if (locale === "en") return en.footer_terms(inputs)
	return de.footer_terms(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_newsletter = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_newsletter(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_newsletter", locale)
	if (locale === "it") return it.footer_newsletter(inputs)
	if (locale === "en") return en.footer_newsletter(inputs)
	return de.footer_newsletter(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const footer_followus1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_followus1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_followus1", locale)
	if (locale === "it") return it.footer_followus1(inputs)
	if (locale === "en") return en.footer_followus1(inputs)
	return de.footer_followus1(inputs)
};
export { footer_followus1 as "footer_followUs" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const footer_supportedby1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_supportedby1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_supportedby1", locale)
	if (locale === "it") return it.footer_supportedby1(inputs)
	if (locale === "en") return en.footer_supportedby1(inputs)
	return de.footer_supportedby1(inputs)
};
export { footer_supportedby1 as "footer_supportedBy" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_whattoexpected2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_whattoexpected2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_whattoexpected2", locale)
	if (locale === "it") return it.visit_whattoexpected2(inputs)
	if (locale === "en") return en.visit_whattoexpected2(inputs)
	return de.visit_whattoexpected2(inputs)
};
export { visit_whattoexpected2 as "visit_whatToExpected" }


================================================================================
File: lib/paraglide/messages/de.js
================================================================================

// eslint-disable


export const common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Wird geladen...`
};

export const common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Absenden`
};

export const common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Abbrechen`
};

export const common_error = /** @type {(inputs: {}) => string} */ () => {
	return `Ein Fehler ist aufgetreten`
};

export const common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Erneut versuchen`
};

export const common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Schlie√üen`
};

export const common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Weiter`
};

export const common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Zur√ºck`
};

export const common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Weiterlesen`
};

export const common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Weniger anzeigen`
};

export const navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Startseite`
};

export const navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `√úber uns`
};

export const navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Besuch planen`
};

export const navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Kontakt`
};

export const navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Tickets buchen`
};

export const navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Museumsshop`
};

export const navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Ausstellungen`
};

export const navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Sammlungen`
};

export const navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Veranstaltungen`
};

export const navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `Nachrichten`
};

export const languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `Englisch`
};

export const languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italienisch`
};

export const languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `Deutsch`
};

export const museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Willkommen im Museum von Zungri`
};

export const museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Entdecken Sie die reiche Geschichte und Traditionen S√ºditaliens`
};

export const museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `√ñffnungszeiten`
};

export const museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Eintrittspreise`
};

export const museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `Anfahrt`
};

export const museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Barrierefreiheit`
};

export const exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Aktuelle Ausstellungen`
};

export const exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Kommende Ausstellungen`
};

export const exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Vergangene Ausstellungen`
};

export const exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Dauerausstellung`
};

export const exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Sonderausstellungen`
};

export const exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Hauptausstellung`
};

export const exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `Details anzeigen`
};

export const exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Dauer`
};

export const exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Kurator`
};

export const exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsoren`
};

export const booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Besuch buchen`
};

export const booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Datum ausw√§hlen`
};

export const booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Zeit ausw√§hlen`
};

export const booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Erwachsene`
};

export const booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Kinder`
};

export const booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Studenten`
};

export const booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Senioren`
};

export const booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Gruppen`
};

export const booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `F√ºhrung`
};

export const booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audiof√ºhrung`
};

export const booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Gesamt`
};

export const booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Zur Zahlung`
};

export const booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Buchungsbest√§tigung`
};

export const visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihren Besuch planen`
};

export const visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Vor Ihrem Besuch`
};
export { visit_whattoexpect2 } from "./it.js"

export const visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Einrichtungen`
};

export const visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Cafeteria`
};

export const visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Geschenkeladen`
};

export const visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parkplatz`
};

export const visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Rollstuhlzugang`
};

export const visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Familienfreundlich`
};

export const contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Kontakt aufnehmen`
};

export const contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Adresse`
};

export const contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Telefon`
};

export const contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `E-Mail`
};

export const contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Soziale Medien`
};

export const contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht senden`
};

export const contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihr Name`
};

export const contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihre E-Mail`
};

export const contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Betreff`
};

export const contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht`
};

export const contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht erfolgreich gesendet`
};

export const footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `¬© 2025 Museum von Zungri. Alle Rechte vorbehalten.`
};

export const footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Datenschutz`
};

export const footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Nutzungsbedingungen`
};

export const footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Newsletter abonnieren`
};

export const footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Folgen Sie uns`
};

export const footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Unterst√ºtzt von`
};

export const visit_whattoexpected2 = /** @type {(inputs: {}) => string} */ () => {
	return `Was Sie erwartet`
};


================================================================================
File: lib/paraglide/messages/en.js
================================================================================

// eslint-disable


export const common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Loading...`
};

export const common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Submit`
};

export const common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Cancel`
};

export const common_error = /** @type {(inputs: {}) => string} */ () => {
	return `An error occurred`
};

export const common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Try again`
};

export const common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Close`
};

export const common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Next`
};

export const common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Previous`
};

export const common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Read more`
};

export const common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Show less`
};

export const navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Home`
};

export const navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `About`
};

export const navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Plan Your Visit`
};

export const navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Contact Us`
};

export const navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Book Tickets`
};

export const navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Museum Shop`
};

export const navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Exhibitions`
};

export const navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Collections`
};

export const navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Events`
};

export const navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `News`
};

export const languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `English`
};

export const languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italian`
};

export const languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `German`
};

export const museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Welcome to Zungri Museum`
};

export const museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Discover the rich history and traditions of Southern Italy`
};

export const museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `Opening Hours`
};

export const museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Admission Fees`
};

export const museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `How to Reach Us`
};

export const museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Accessibility`
};

export const exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Current Exhibitions`
};

export const exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Upcoming Exhibitions`
};

export const exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Past Exhibitions`
};

export const exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Permanent Collection`
};

export const exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Temporary Exhibitions`
};

export const exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Featured Exhibition`
};

export const exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `View Details`
};

export const exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Duration`
};

export const exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Curator`
};

export const exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsors`
};

export const booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Book Your Visit`
};

export const booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Select Date`
};

export const booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Select Time`
};

export const booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Adults`
};

export const booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Children`
};

export const booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Students`
};

export const booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Seniors`
};

export const booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Groups`
};

export const booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `Guided Tour`
};

export const booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audio Guide`
};

export const booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Total`
};

export const booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Proceed to Payment`
};

export const booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Booking Confirmation`
};

export const visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Plan Your Visit`
};

export const visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Before You Come`
};
export { visit_whattoexpect2 } from "./it.js"

export const visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Facilities`
};

export const visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Cafeteria`
};

export const visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Gift Shop`
};

export const visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parking`
};

export const visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Wheelchair Access`
};

export const visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Family Friendly`
};

export const contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Get In Touch`
};

export const contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Address`
};

export const contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Phone`
};

export const contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `Email`
};

export const contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Social Media`
};

export const contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Send Message`
};

export const contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Your Name`
};

export const contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `Your Email`
};

export const contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Subject`
};

export const contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Message`
};

export const contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Message Sent Successfully`
};

export const footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `¬© 2025 Zungri Museum. All rights reserved.`
};

export const footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Privacy Policy`
};

export const footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Terms and Conditions`
};

export const footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Subscribe to Newsletter`
};

export const footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Follow Us`
};

export const footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Supported by`
};

export const visit_whattoexpected2 = /** @type {(inputs: {}) => string} */ () => {
	return `What to Expect`
};


================================================================================
File: lib/paraglide/messages/it.js
================================================================================

// eslint-disable


export const common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Caricamento in corso...`
};

export const common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Invia`
};

export const common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Annulla`
};

export const common_error = /** @type {(inputs: {}) => string} */ () => {
	return `Si √® verificato un errore`
};

export const common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Riprova`
};

export const common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Chiudi`
};

export const common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Successivo`
};

export const common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Precedente`
};

export const common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Leggi di pi√π`
};

export const common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Mostra meno`
};

export const navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Home`
};

export const navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `Chi Siamo`
};

export const navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Pianifica la Visita`
};

export const navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Contatti`
};

export const navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Prenota Biglietti`
};

export const navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Negozio del Museo`
};

export const navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Mostre`
};

export const navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Collezioni`
};

export const navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Eventi`
};

export const navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `Notizie`
};

export const languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `English`
};

export const languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italiano`
};

export const languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `Deutsch`
};

export const museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Benvenuti al Museo di Zungri`
};

export const museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Scopri la ricca storia e tradizioni del Sud Italia`
};

export const museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `Orari di Apertura`
};

export const museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Prezzi dei Biglietti`
};

export const museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `Come Raggiungerci`
};

export const museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Accessibilit√†`
};

export const exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Mostre Attuali`
};

export const exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Prossime Mostre`
};

export const exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Mostre Passate`
};

export const exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Collezione Permanente`
};

export const exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Mostre Temporanee`
};

export const exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Mostra in Evidenza`
};

export const exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `Vedi Dettagli`
};

export const exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Durata`
};

export const exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Curatore`
};

export const exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsor`
};

export const booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Prenota la Tua Visita`
};

export const booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Seleziona Data`
};

export const booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Seleziona Orario`
};

export const booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Adulti`
};

export const booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Bambini`
};

export const booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Studenti`
};

export const booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Anziani`
};

export const booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Gruppi`
};

export const booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `Visita Guidata`
};

export const booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audioguida`
};

export const booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Totale`
};

export const booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Procedi al Pagamento`
};

export const booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Conferma Prenotazione`
};

export const visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Pianifica la Tua Visita`
};

export const visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Prima di Venire`
};

export const visit_whattoexpect2 = /** @type {(inputs: {}) => string} */ () => {
	return `Cosa Aspettarsi`
};

export const visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Servizi`
};

export const visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Caffetteria`
};

export const visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Negozio di Souvenir`
};

export const visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parcheggio`
};

export const visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Accesso per Sedie a Rotelle`
};

export const visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Adatto alle Famiglie`
};

export const contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Contattaci`
};

export const contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Indirizzo`
};

export const contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Telefono`
};

export const contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `Email`
};

export const contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Social Media`
};

export const contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Invia Messaggio`
};

export const contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Il Tuo Nome`
};

export const contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `La Tua Email`
};

export const contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Oggetto`
};

export const contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Messaggio`
};

export const contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Messaggio Inviato con Successo`
};

export const footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `¬© 2025 Museo di Zungri. Tutti i diritti riservati.`
};

export const footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Privacy Policy`
};

export const footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Termini e Condizioni`
};

export const footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Iscriviti alla Newsletter`
};

export const footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Seguici`
};

export const footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Con il sostegno di`
};
/** @type {(inputs: {}) => string} */
export const visit_whattoexpected2 = () => 'visit_whatToExpected'


================================================================================
File: lib/paraglide/messages.js
================================================================================

// eslint-disable
export * from './messages/_index.js'
// enabling auto-import by exposing all messages as m
export * as m from './messages/_index.js'


================================================================================
File: lib/paraglide/registry.js
================================================================================

// eslint-disable

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.PluralRulesOptions} [options]
 * @returns {string}
 */
export function plural(locale, input, options) { 
	return new Intl.PluralRules(locale, options).select(Number(input))
};

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.NumberFormatOptions} [options]
 * @returns {string}
 */
export function number(locale, input, options) {
	return new Intl.NumberFormat(locale, options).format(Number(input))
};

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.DateTimeFormatOptions} [options]
 * @returns {string}
 */
export function datetime(locale, input, options) {
	return new Intl.DateTimeFormat(locale, options).format(new Date(/** @type {string} */ (input)))
};


================================================================================
File: lib/paraglide/runtime.js
================================================================================

// eslint-disable

/** @type {any} */
const URLPattern = {}

/**
 * The project's base locale.
 *
 * @example
 *   if (locale === baseLocale) {
 *     // do something
 *   }
 */
export const baseLocale = "it";
/**
 * The project's locales that have been specified in the settings.
 *
 * @example
 *   if (locales.includes(userSelectedLocale) === false) {
 *     throw new Error('Locale is not available');
 *   }
 */
export const locales = /** @type {const} */ (["it", "en", "de"]);
/** @type {string} */
export const cookieName = "PARAGLIDE_LOCALE";
/** @type {number} */
export const cookieMaxAge = 34560000;
/** @type {string} */
export const cookieDomain = "";
/** @type {string} */
export const localStorageKey = "PARAGLIDE_LOCALE";
/**
 * @type {Array<"cookie" | "baseLocale" | "globalVariable" | "url" | "preferredLanguage" | "localStorage" | `custom-${string}`>}
 */
export const strategy = [
  "url",
  "cookie",
  "baseLocale"
];
/**
 * The used URL patterns.
 *
 * @type {Array<{ pattern: string, localized: Array<[Locale, string]> }> }
 */
export const urlPatterns = [
  {
    "pattern": ":protocol://:domain(.*)::port?/:path(.*)?",
    "localized": [
      [
        "en",
        ":protocol://:domain(.*)::port?/en/:path(.*)?"
      ],
      [
        "de",
        ":protocol://:domain(.*)::port?/de/:path(.*)?"
      ],
      [
        "it",
        ":protocol://:domain(.*)::port?/:path(.*)?"
      ]
    ]
  }
];
/**
 * @typedef {{
 * 		getStore(): {
 *   		locale?: Locale,
 * 			origin?: string,
 * 			messageCalls?: Set<string>
 *   	} | undefined,
 * 		run: (store: { locale?: Locale, origin?: string, messageCalls?: Set<string>},
 *    cb: any) => any
 * }} ParaglideAsyncLocalStorage
 */
/**
 * Server side async local storage that is set by `serverMiddleware()`.
 *
 * The variable is used to retrieve the locale and origin in a server-side
 * rendering context without effecting other requests.
 *
 * @type {ParaglideAsyncLocalStorage | undefined}
 */
export let serverAsyncLocalStorage = undefined;
export const disableAsyncLocalStorage = false;
export const experimentalMiddlewareLocaleSplitting = false;
export const isServer = import.meta.env?.SSR ?? typeof window === 'undefined';
/**
 * Sets the server side async local storage.
 *
 * The function is needed because the `runtime.js` file
 * must define the `serverAsyncLocalStorage` variable to
 * avoid a circular import between `runtime.js` and
 * `server.js` files.
 *
 * @param {ParaglideAsyncLocalStorage | undefined} value
 */
export function overwriteServerAsyncLocalStorage(value) {
    serverAsyncLocalStorage = value;
}
const TREE_SHAKE_COOKIE_STRATEGY_USED = true;
const TREE_SHAKE_URL_STRATEGY_USED = true;
const TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED = false;
const TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED = false;
const TREE_SHAKE_DEFAULT_URL_PATTERN_USED = true;
const TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED = false;

globalThis.__paraglide = {}

/**
 * This is a fallback to get started with a custom
 * strategy and avoid type errors.
 *
 * The implementation is overwritten
 * by \`overwriteGetLocale()\` and \`defineSetLocale()\`.
 *
 * @type {Locale|undefined}
 */
let _locale;
let localeInitiallySet = false;
/**
 * Get the current locale.
 *
 * @example
 *   if (getLocale() === 'de') {
 *     console.log('Germany üá©üá™');
 *   } else if (getLocale() === 'nl') {
 *     console.log('Netherlands üá≥üá±');
 *   }
 *
 * @type {() => Locale}
 */
export let getLocale = () => {
    /** @type {string | undefined} */
    let locale;
    // if running in a server-side rendering context
    // retrieve the locale from the async local storage
    if (serverAsyncLocalStorage) {
        const locale = serverAsyncLocalStorage?.getStore()?.locale;
        if (locale) {
            return locale;
        }
    }
    for (const strat of strategy) {
        if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            locale = extractLocaleFromCookie();
        }
        else if (strat === "baseLocale") {
            locale = baseLocale;
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED &&
            strat === "url" &&
            !isServer &&
            typeof window !== "undefined") {
            locale = extractLocaleFromUrl(window.location.href);
        }
        else if (TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED &&
            strat === "globalVariable" &&
            _locale !== undefined) {
            locale = _locale;
        }
        else if (TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED &&
            strat === "preferredLanguage" &&
            !isServer) {
            locale = extractLocaleFromNavigator();
        }
        else if (TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED &&
            strat === "localStorage" &&
            !isServer) {
            locale = localStorage.getItem(localStorageKey) ?? undefined;
        }
        else if (isCustomStrategy(strat) && customClientStrategies.has(strat)) {
            const handler = customClientStrategies.get(strat);
            locale = handler.getLocale();
        }
        // check if match, else continue loop
        if (locale !== undefined) {
            const asserted = assertIsLocale(locale);
            if (!localeInitiallySet) {
                _locale = asserted;
                // https://github.com/opral/inlang-paraglide-js/issues/455
                localeInitiallySet = true;
                setLocale(asserted, { reload: false });
            }
            return asserted;
        }
    }
    throw new Error("No locale found. Read the docs https://inlang.com/m/gerre34r/library-inlang-paraglideJs/errors#no-locale-found");
};
/**
 * Overwrite the \`getLocale()\` function.
 *
 * Use this function to overwrite how the locale is resolved. For example,
 * you can resolve the locale from the browser's preferred language,
 * a cookie, env variable, or a user's preference.
 *
 * @example
 *   overwriteGetLocale(() => {
 *     // resolve the locale from a cookie. fallback to the base locale.
 *     return Cookies.get('locale') ?? baseLocale
 *   }
 *
 * @type {(fn: () => Locale) => void}
 */
export const overwriteGetLocale = (fn) => {
    getLocale = fn;
};

/**
 * Set the locale.
 *
 * Set locale reloads the site by default on the client. Reloading
 * can be disabled by passing \`reload: false\` as an option. If
 * reloading is disabled, you need to ensure that the UI is updated
 * to reflect the new locale.
 *
 * @example
 *   setLocale('en');
 *
 * @example
 *   setLocale('en', { reload: false });
 *
 * @type {(newLocale: Locale, options?: { reload?: boolean }) => void}
 */
export let setLocale = (newLocale, options) => {
    const optionsWithDefaults = {
        reload: true,
        ...options,
    };
    // locale is already set
    // https://github.com/opral/inlang-paraglide-js/issues/430
    let currentLocale;
    try {
        currentLocale = getLocale();
    }
    catch {
        // do nothing, no locale has been set yet.
    }
    /** @type {string | undefined} */
    let newLocation = undefined;
    for (const strat of strategy) {
        if (TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED &&
            strat === "globalVariable") {
            // a default for a custom strategy to get started quickly
            // is likely overwritten by `defineSetLocale()`
            _locale = newLocale;
        }
        else if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            if (isServer ||
                typeof document === "undefined" ||
                typeof window === "undefined") {
                continue;
            }
            const domain = cookieDomain || window.location.hostname;
            // set the cookie
            document.cookie = `${cookieName}=${newLocale}; path=/; max-age=${cookieMaxAge}; domain=${domain}`;
        }
        else if (strat === "baseLocale") {
            // nothing to be set here. baseLocale is only a fallback
            continue;
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED &&
            strat === "url" &&
            typeof window !== "undefined") {
            // route to the new url
            //
            // this triggers a page reload but a user rarely
            // switches locales, so this should be fine.
            //
            // if the behavior is not desired, the implementation
            // can be overwritten by `defineSetLocale()` to avoid
            // a full page reload.
            newLocation = localizeUrl(window.location.href, {
                locale: newLocale,
            }).href;
        }
        else if (TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED &&
            strat === "localStorage" &&
            typeof window !== "undefined") {
            // set the localStorage
            localStorage.setItem(localStorageKey, newLocale);
        }
        else if (isCustomStrategy(strat) && customClientStrategies.has(strat)) {
            const handler = customClientStrategies.get(strat);
            handler.setLocale(newLocale);
        }
    }
    if (!isServer &&
        optionsWithDefaults.reload &&
        window.location &&
        newLocale !== currentLocale) {
        if (newLocation) {
            // reload the page by navigating to the new url
            window.location.href = newLocation;
        }
        else {
            // reload the page to reflect the new locale
            window.location.reload();
        }
    }
    return;
};
/**
 * Overwrite the \`setLocale()\` function.
 *
 * Use this function to overwrite how the locale is set. For example,
 * modify a cookie, env variable, or a user's preference.
 *
 * @example
 *   overwriteSetLocale((newLocale) => {
 *     // set the locale in a cookie
 *     return Cookies.set('locale', newLocale)
 *   });
 *
 * @param {(newLocale: Locale) => void} fn
 */
export const overwriteSetLocale = (fn) => {
    setLocale = fn;
};

/**
 * The origin of the current URL.
 *
 * Defaults to "http://y.com" in non-browser environments. If this
 * behavior is not desired, the implementation can be overwritten
 * by `overwriteGetUrlOrigin()`.
 *
 * @type {() => string}
 */
export let getUrlOrigin = () => {
    if (serverAsyncLocalStorage) {
        return serverAsyncLocalStorage.getStore()?.origin ?? "http://fallback.com";
    }
    else if (typeof window !== "undefined") {
        return window.location.origin;
    }
    return "http://fallback.com";
};
/**
 * Overwrite the getUrlOrigin function.
 *
 * Use this function in server environments to
 * define how the URL origin is resolved.
 *
 * @type {(fn: () => string) => void}
 */
export let overwriteGetUrlOrigin = (fn) => {
    getUrlOrigin = fn;
};

/**
 * Check if something is an available locale.
 *
 * @example
 *   if (isLocale(params.locale)) {
 *     setLocale(params.locale);
 *   } else {
 *     setLocale('en');
 *   }
 *
 * @param {any} locale
 * @returns {locale is Locale}
 */
export function isLocale(locale) {
    return !locale ? false : locales.includes(locale);
}

/**
 * Asserts that the input is a locale.
 *
 * @param {any} input - The input to check.
 * @returns {Locale} The input if it is a locale.
 * @throws {Error} If the input is not a locale.
 */
export function assertIsLocale(input) {
    if (isLocale(input) === false) {
        throw new Error(`Invalid locale: ${input}. Expected one of: ${locales.join(", ")}`);
    }
    return input;
}

/**
 * Extracts a locale from a request.
 *
 * Use the function on the server to extract the locale
 * from a request.
 *
 * The function goes through the strategies in the order
 * they are defined. If a strategy returns an invalid locale,
 * it will fall back to the next strategy.
 *
 * @example
 *   const locale = extractLocaleFromRequest(request);
 *
 * @type {(request: Request) => Locale}
 */
export const extractLocaleFromRequest = (request) => {
    /** @type {string|undefined} */
    let locale;
    for (const strat of strategy) {
        if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            locale = request.headers
                .get("cookie")
                ?.split("; ")
                .find((c) => c.startsWith(cookieName + "="))
                ?.split("=")[1];
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED && strat === "url") {
            locale = extractLocaleFromUrl(request.url);
        }
        else if (TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED &&
            strat === "preferredLanguage") {
            locale = extractLocaleFromHeader(request);
        }
        else if (strat === "globalVariable") {
            locale = _locale;
        }
        else if (strat === "baseLocale") {
            return baseLocale;
        }
        else if (strat === "localStorage") {
            continue;
        }
        else if (isCustomStrategy(strat) && customServerStrategies.has(strat)) {
            const handler = customServerStrategies.get(strat);
            locale = handler.getLocale(request);
        }
        if (locale !== undefined) {
            if (!isLocale(locale)) {
                locale = undefined;
            }
            else {
                return assertIsLocale(locale);
            }
        }
    }
    throw new Error("No locale found. There is an error in your strategy. Try adding 'baseLocale' as the very last strategy. Read more here https://inlang.com/m/gerre34r/library-inlang-paraglideJs/errors#no-locale-found");
};

/**
 * Extracts a cookie from the document.
 *
 * Will return undefined if the document is not available or if the cookie is not set.
 * The `document` object is not available in server-side rendering, so this function should not be called in that context.
 *
 * @returns {string | undefined}
 */
export function extractLocaleFromCookie() {
    if (typeof document === "undefined" || !document.cookie) {
        return;
    }
    const match = document.cookie.match(new RegExp(`(^| )${cookieName}=([^;]+)`));
    const locale = match?.[2];
    if (isLocale(locale)) {
        return locale;
    }
    return undefined;
}

/**
 * Extracts a locale from the accept-language header.
 *
 * Use the function on the server to extract the locale
 * from the accept-language header that is sent by the client.
 *
 * @example
 *   const locale = extractLocaleFromHeader(request);
 *
 * @type {(request: Request) => Locale}
 * @param {Request} request - The request object to extract the locale from.
 * @returns {string|undefined} The negotiated preferred language.
 */
export function extractLocaleFromHeader(request) {
    const acceptLanguageHeader = request.headers.get("accept-language");
    if (acceptLanguageHeader) {
        // Parse language preferences with their q-values and base language codes
        const languages = acceptLanguageHeader
            .split(",")
            .map((lang) => {
            const [tag, q = "1"] = lang.trim().split(";q=");
            // Get both the full tag and base language code
            const baseTag = tag?.split("-")[0]?.toLowerCase();
            return {
                fullTag: tag?.toLowerCase(),
                baseTag,
                q: Number(q),
            };
        })
            .sort((a, b) => b.q - a.q);
        for (const lang of languages) {
            if (isLocale(lang.fullTag)) {
                return lang.fullTag;
            }
            else if (isLocale(lang.baseTag)) {
                return lang.baseTag;
            }
        }
        return undefined;
    }
    return undefined;
}

/**
 * Negotiates a preferred language from navigator.languages.
 *
 * Use the function on the client to extract the locale
 * from the navigator.languages array.
 *
 * @example
 *   const locale = extractLocaleFromNavigator();
 *
 * @type {() => Locale | undefined}
 * @returns {string | undefined}
 */
export function extractLocaleFromNavigator() {
    if (!navigator?.languages?.length) {
        return undefined;
    }
    const languages = navigator.languages.map((lang) => ({
        fullTag: lang.toLowerCase(),
        baseTag: lang.split("-")[0]?.toLowerCase(),
    }));
    for (const lang of languages) {
        if (isLocale(lang.fullTag)) {
            return lang.fullTag;
        }
        else if (isLocale(lang.baseTag)) {
            return lang.baseTag;
        }
    }
    return undefined;
}

/**
 * If extractLocaleFromUrl is called many times on the same page and the URL
 * hasn't changed, we don't need to recompute it every time which can get expensive.
 * We might use a LRU cache if needed, but for now storing only the last result is enough.
 * https://github.com/opral/monorepo/pull/3575#discussion_r2066731243
 */
/** @type {string|undefined} */
let cachedUrl;
/** @type {Locale|undefined} */
let cachedLocale;
/**
 * Extracts the locale from a given URL using native URLPattern.
 *
 * @param {URL|string} url - The full URL from which to extract the locale.
 * @returns {Locale|undefined} The extracted locale, or undefined if no locale is found.
 */
export function extractLocaleFromUrl(url) {
    const urlString = typeof url === "string" ? url : url.href;
    if (cachedUrl === urlString) {
        return cachedLocale;
    }
    let result;
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        result = defaultUrlPatternExtractLocale(url);
    }
    else {
        const urlObj = typeof url === "string" ? new URL(url) : url;
        // Iterate over URL patterns
        for (const element of urlPatterns) {
            for (const [locale, localizedPattern] of element.localized) {
                const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
                if (!match) {
                    continue;
                }
                // Check if the locale is valid
                if (assertIsLocale(locale)) {
                    result = locale;
                    break;
                }
            }
            if (result)
                break;
        }
    }
    cachedUrl = urlString;
    cachedLocale = result;
    return result;
}
/**
 * https://github.com/opral/inlang-paraglide-js/issues/381
 *
 * @param {URL|string} url - The full URL from which to extract the locale.
 * @returns {Locale|undefined} The extracted locale, or undefined if no locale is found.
 */
function defaultUrlPatternExtractLocale(url) {
    const urlObj = new URL(url, "http://dummy.com");
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    if (pathSegments.length > 0) {
        const potentialLocale = pathSegments[0];
        if (isLocale(potentialLocale)) {
            return potentialLocale;
        }
    }
    // everything else has to be the base locale
    return baseLocale;
}

/**
 * Lower-level URL localization function, primarily used in server contexts.
 *
 * This function is designed for server-side usage where you need precise control
 * over URL localization, such as in middleware or request handlers. It works with
 * URL objects and always returns absolute URLs.
 *
 * For client-side UI components, use `localizeHref()` instead, which provides
 * a more convenient API with relative paths and automatic locale detection.
 *
 * @example
 * ```typescript
 * // Server middleware example
 * app.use((req, res, next) => {
 *   const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);
 *   const localized = localizeUrl(url, { locale: "de" });
 *
 *   if (localized.href !== url.href) {
 *     return res.redirect(localized.href);
 *   }
 *   next();
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using with URL patterns
 * const url = new URL("https://example.com/about");
 * localizeUrl(url, { locale: "de" });
 * // => URL("https://example.com/de/about")
 *
 * // Using with domain-based localization
 * const url = new URL("https://example.com/store");
 * localizeUrl(url, { locale: "de" });
 * // => URL("https://de.example.com/store")
 * ```
 *
 * @param {string | URL} url - The URL to localize. If string, must be absolute.
 * @param {Object} [options] - Options for localization
 * @param {string} [options.locale] - Target locale. If not provided, uses getLocale()
 * @returns {URL} The localized URL, always absolute
 */
export function localizeUrl(url, options) {
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        return localizeUrlDefaultPattern(url, options);
    }
    const targetLocale = options?.locale ?? getLocale();
    const urlObj = typeof url === "string" ? new URL(url) : url;
    // Iterate over URL patterns
    for (const element of urlPatterns) {
        // match localized patterns
        for (const [, localizedPattern] of element.localized) {
            const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
            if (!match) {
                continue;
            }
            const targetPattern = element.localized.find(([locale]) => locale === targetLocale)?.[1];
            if (!targetPattern) {
                continue;
            }
            const localizedUrl = fillPattern(targetPattern, aggregateGroups(match), urlObj.origin);
            return fillMissingUrlParts(localizedUrl, match);
        }
        const unlocalizedMatch = new URLPattern(element.pattern, urlObj.href).exec(urlObj.href);
        if (unlocalizedMatch) {
            const targetPattern = element.localized.find(([locale]) => locale === targetLocale)?.[1];
            if (targetPattern) {
                const localizedUrl = fillPattern(targetPattern, aggregateGroups(unlocalizedMatch), urlObj.origin);
                return fillMissingUrlParts(localizedUrl, unlocalizedMatch);
            }
        }
    }
    // If no match found, return the original URL
    return urlObj;
}
/**
 * https://github.com/opral/inlang-paraglide-js/issues/381
 *
 * @param {string | URL} url
 * @param {Object} [options]
 * @param {string} [options.locale]
 * @returns {URL}
 */
function localizeUrlDefaultPattern(url, options) {
    const urlObj = typeof url === "string" ? new URL(url, getUrlOrigin()) : new URL(url);
    const locale = options?.locale ?? getLocale();
    const currentLocale = extractLocaleFromUrl(urlObj);
    // If current locale matches target locale, no change needed
    if (currentLocale === locale) {
        return urlObj;
    }
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    // If current path starts with a locale, remove it
    if (pathSegments.length > 0 && isLocale(pathSegments[0])) {
        pathSegments.shift();
    }
    // For base locale, don't add prefix
    if (locale === baseLocale) {
        urlObj.pathname = "/" + pathSegments.join("/");
    }
    else {
        // For other locales, add prefix
        urlObj.pathname = "/" + locale + "/" + pathSegments.join("/");
    }
    return urlObj;
}
/**
 * Low-level URL de-localization function, primarily used in server contexts.
 *
 * This function is designed for server-side usage where you need precise control
 * over URL de-localization, such as in middleware or request handlers. It works with
 * URL objects and always returns absolute URLs.
 *
 * For client-side UI components, use `deLocalizeHref()` instead, which provides
 * a more convenient API with relative paths.
 *
 * @example
 * ```typescript
 * // Server middleware example
 * app.use((req, res, next) => {
 *   const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);
 *   const baseUrl = deLocalizeUrl(url);
 *
 *   // Store the base URL for later use
 *   req.baseUrl = baseUrl;
 *   next();
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using with URL patterns
 * const url = new URL("https://example.com/de/about");
 * deLocalizeUrl(url); // => URL("https://example.com/about")
 *
 * // Using with domain-based localization
 * const url = new URL("https://de.example.com/store");
 * deLocalizeUrl(url); // => URL("https://example.com/store")
 * ```
 *
 * @param {string | URL} url - The URL to de-localize. If string, must be absolute.
 * @returns {URL} The de-localized URL, always absolute
 */
export function deLocalizeUrl(url) {
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        return deLocalizeUrlDefaultPattern(url);
    }
    const urlObj = typeof url === "string" ? new URL(url) : url;
    // Iterate over URL patterns
    for (const element of urlPatterns) {
        // Iterate over localized versions
        for (const [, localizedPattern] of element.localized) {
            const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
            if (match) {
                // Convert localized URL back to the base pattern
                const groups = aggregateGroups(match);
                const baseUrl = fillPattern(element.pattern, groups, urlObj.origin);
                return fillMissingUrlParts(baseUrl, match);
            }
        }
        // match unlocalized pattern
        const unlocalizedMatch = new URLPattern(element.pattern, urlObj.href).exec(urlObj.href);
        if (unlocalizedMatch) {
            const baseUrl = fillPattern(element.pattern, aggregateGroups(unlocalizedMatch), urlObj.origin);
            return fillMissingUrlParts(baseUrl, unlocalizedMatch);
        }
    }
    // no match found return the original url
    return urlObj;
}
/**
 * De-localizes a URL using the default pattern (/:locale/*)
 * @param {string|URL} url
 * @returns {URL}
 */
function deLocalizeUrlDefaultPattern(url) {
    const urlObj = typeof url === "string" ? new URL(url, getUrlOrigin()) : new URL(url);
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    // If first segment is a locale, remove it
    if (pathSegments.length > 0 && isLocale(pathSegments[0])) {
        urlObj.pathname = "/" + pathSegments.slice(1).join("/");
    }
    return urlObj;
}
/**
 * Takes matches of implicit wildcards in the UrlPattern (when a part is missing
 * it is equal to '*') and adds them back to the result of fillPattern.
 *
 * At least protocol and hostname are required to create a valid URL inside fillPattern.
 *
 * @param {URL} url
 * @param {any} match
 * @returns {URL}
 */
function fillMissingUrlParts(url, match) {
    if (match.protocol.groups["0"]) {
        url.protocol = match.protocol.groups["0"] ?? "";
    }
    if (match.hostname.groups["0"]) {
        url.hostname = match.hostname.groups["0"] ?? "";
    }
    if (match.username.groups["0"]) {
        url.username = match.username.groups["0"] ?? "";
    }
    if (match.password.groups["0"]) {
        url.password = match.password.groups["0"] ?? "";
    }
    if (match.port.groups["0"]) {
        url.port = match.port.groups["0"] ?? "";
    }
    if (match.pathname.groups["0"]) {
        url.pathname = match.pathname.groups["0"] ?? "";
    }
    if (match.search.groups["0"]) {
        url.search = match.search.groups["0"] ?? "";
    }
    if (match.hash.groups["0"]) {
        url.hash = match.hash.groups["0"] ?? "";
    }
    return url;
}
/**
 * Fills a URL pattern with values for named groups, supporting all URLPattern-style modifiers.
 *
 * This function will eventually be replaced by https://github.com/whatwg/urlpattern/issues/73
 *
 * Matches:
 * - :name        -> Simple
 * - :name?       -> Optional
 * - :name+       -> One or more
 * - :name*       -> Zero or more
 * - :name(...)   -> Regex group
 * - {text}       -> Group delimiter
 * - {text}?      -> Optional group delimiter
 *
 * If the value is `null`, the segment is removed.
 *
 * @param {string} pattern - The URL pattern containing named groups.
 * @param {Record<string, string | null | undefined>} values - Object of values for named groups.
 * @param {string} origin - Base URL to use for URL construction.
 * @returns {URL} - The constructed URL with named groups filled.
 */
function fillPattern(pattern, values, origin) {
    // Pre-process the pattern to handle explicit port numbers
    // This detects patterns like "http://localhost:5173" and protects the port number
    // from being interpreted as a parameter
    let processedPattern = pattern.replace(/(https?:\/\/[^:/]+):(\d+)(\/|$)/g, (_, protocol, port, slash) => {
        // Replace ":5173" with "#PORT-5173#" to protect it from parameter replacement
        return `${protocol}#PORT-${port}#${slash}`;
    });
    // First, handle group delimiters with curly braces
    let processedGroupDelimiters = processedPattern.replace(/\{([^{}]*)\}([?+*]?)/g, (_, content, modifier) => {
        // For optional group delimiters
        if (modifier === "?") {
            // For optional groups, we'll include the content
            return content;
        }
        // For non-optional group delimiters, always include the content
        return content;
    });
    // Then handle named groups
    let filled = processedGroupDelimiters.replace(/(\/?):([a-zA-Z0-9_]+)(\([^)]*\))?([?+*]?)/g, (_, slash, name, __, modifier) => {
        const value = values[name];
        if (value === null) {
            // If value is null, remove the entire segment including the preceding slash
            return "";
        }
        if (modifier === "?") {
            // Optional segment
            return value !== undefined ? `${slash}${value}` : "";
        }
        if (modifier === "+" || modifier === "*") {
            // Repeatable segments
            if (value === undefined && modifier === "+") {
                throw new Error(`Missing value for "${name}" (one or more required)`);
            }
            return value ? `${slash}${value}` : "";
        }
        // Simple named group (no modifier)
        if (value === undefined) {
            throw new Error(`Missing value for "${name}"`);
        }
        return `${slash}${value}`;
    });
    // Restore port numbers
    filled = filled.replace(/#PORT-(\d+)#/g, ":$1");
    return new URL(filled, origin);
}
/**
 * Aggregates named groups from various parts of the URLPattern match result.
 *
 *
 * @type {(match: any) => Record<string, string | null | undefined>}
 */
export function aggregateGroups(match) {
    return {
        ...match.hash.groups,
        ...match.hostname.groups,
        ...match.password.groups,
        ...match.pathname.groups,
        ...match.port.groups,
        ...match.protocol.groups,
        ...match.search.groups,
        ...match.username.groups,
    };
}

/**
 * High-level URL localization function optimized for client-side UI usage.
 *
 * This is a convenience wrapper around `localizeUrl()` that provides features
 * needed in UI:
 *
 * - Accepts relative paths (e.g., "/about")
 * - Returns relative paths when possible
 * - Automatically detects current locale if not specified
 * - Handles string input/output instead of URL objects
 *
 * @example
 * ```typescript
 * // In a React/Vue/Svelte component
 * const NavLink = ({ href }) => {
 *   // Automatically uses current locale, keeps path relative
 *   return <a href={localizeHref(href)}>...</a>;
 * };
 *
 * // Examples:
 * localizeHref("/about")
 * // => "/de/about" (if current locale is "de")
 * localizeHref("/store", { locale: "fr" })
 * // => "/fr/store" (explicit locale)
 *
 * // Cross-origin links remain absolute
 * localizeHref("https://other-site.com/about")
 * // => "https://other-site.com/de/about"
 * ```
 *
 * For server-side URL localization (e.g., in middleware), use `localizeUrl()`
 * which provides more precise control over URL handling.
 *
 * @param {string} href - The href to localize (can be relative or absolute)
 * @param {Object} [options] - Options for localization
 * @param {string} [options.locale] - Target locale. If not provided, uses `getLocale()`
 * @returns {string} The localized href, relative if input was relative
 */
export function localizeHref(href, options) {
    const currentLocale = getLocale();
    const locale = options?.locale ?? currentLocale;
    const url = new URL(href, getUrlOrigin());
    const localized = localizeUrl(url, { locale });
    // if the origin is identical and the href is relative,
    // return the relative path
    if (href.startsWith("/") && url.origin === localized.origin) {
        // check for cross origin localization in which case an absolute URL must be returned.
        if (locale !== currentLocale) {
            const localizedCurrentLocale = localizeUrl(url, {
                locale: currentLocale,
            });
            if (localizedCurrentLocale.origin !== localized.origin) {
                return localized.href;
            }
        }
        return localized.pathname + localized.search + localized.hash;
    }
    return localized.href;
}
/**
 * High-level URL de-localization function optimized for client-side UI usage.
 *
 * This is a convenience wrapper around `deLocalizeUrl()` that provides features
 * needed in the UI:
 *
 * - Accepts relative paths (e.g., "/de/about")
 * - Returns relative paths when possible
 * - Handles string input/output instead of URL objects
 *
 * @example
 * ```typescript
 * // In a React/Vue/Svelte component
 * const LocaleSwitcher = ({ href }) => {
 *   // Remove locale prefix before switching
 *   const baseHref = deLocalizeHref(href);
 *   return locales.map(locale =>
 *     <a href={localizeHref(baseHref, { locale })}>
 *       Switch to {locale}
 *     </a>
 *   );
 * };
 *
 * // Examples:
 * deLocalizeHref("/de/about")  // => "/about"
 * deLocalizeHref("/fr/store")  // => "/store"
 *
 * // Cross-origin links remain absolute
 * deLocalizeHref("https://example.com/de/about")
 * // => "https://example.com/about"
 * ```
 *
 * For server-side URL de-localization (e.g., in middleware), use `deLocalizeUrl()`
 * which provides more precise control over URL handling.
 *
 * @param {string} href - The href to de-localize (can be relative or absolute)
 * @returns {string} The de-localized href, relative if input was relative
 * @see deLocalizeUrl - For low-level URL de-localization in server contexts
 */
export function deLocalizeHref(href) {
    const url = new URL(href, getUrlOrigin());
    const deLocalized = deLocalizeUrl(url);
    // If the origin is identical and the href is relative,
    // return the relative path instead of the full URL.
    if (href.startsWith("/") && url.origin === deLocalized.origin) {
        return deLocalized.pathname + deLocalized.search + deLocalized.hash;
    }
    return deLocalized.href;
}

/**
 * @param {string} safeModuleId
 * @param {Locale} locale
 */
export function trackMessageCall(safeModuleId, locale) {
    if (isServer === false)
        return;
    const store = serverAsyncLocalStorage?.getStore();
    if (store) {
        store.messageCalls?.add(`${safeModuleId}:${locale}`);
    }
}

/**
 * Generates a list of localized URLs for all provided URLs.
 *
 * This is useful for SSG (Static Site Generation) and sitemap generation.
 * NextJS and other frameworks use this function for SSG.
 *
 * @example
 * ```typescript
 * const urls = generateStaticLocalizedUrls([
 *   "https://example.com/about",
 *   "https://example.com/blog",
 * ]);
 * urls[0].href // => "https://example.com/about"
 * urls[1].href // => "https://example.com/blog"
 * urls[2].href // => "https://example.com/de/about"
 * urls[3].href // => "https://example.com/de/blog"
 * ...
 * ```
 *
 * @param {(string | URL)[]} urls - List of URLs to generate localized versions for. Can be absolute URLs or paths.
 * @returns {URL[]} List of localized URLs as URL objects
 */
export function generateStaticLocalizedUrls(urls) {
    const localizedUrls = new Set();
    // For default URL pattern, we can optimize the generation
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        for (const urlInput of urls) {
            const url = urlInput instanceof URL
                ? urlInput
                : new URL(urlInput, "http://localhost");
            // Base locale doesn't get a prefix
            localizedUrls.add(url);
            // Other locales get their code as prefix
            for (const locale of locales) {
                if (locale !== baseLocale) {
                    const localizedPath = `/${locale}${url.pathname}${url.search}${url.hash}`;
                    const localizedUrl = new URL(localizedPath, url.origin);
                    localizedUrls.add(localizedUrl);
                }
            }
        }
        return Array.from(localizedUrls);
    }
    // For custom URL patterns, we need to use localizeUrl for each URL and locale
    for (const urlInput of urls) {
        const url = urlInput instanceof URL
            ? urlInput
            : new URL(urlInput, "http://localhost");
        // Try each URL pattern to find one that matches
        let patternFound = false;
        for (const pattern of urlPatterns) {
            try {
                // Try to match the unlocalized pattern
                const unlocalizedMatch = new URLPattern(pattern.pattern, url.href).exec(url.href);
                if (!unlocalizedMatch)
                    continue;
                patternFound = true;
                // Track unique localized URLs to avoid duplicates when patterns are the same
                const seenUrls = new Set();
                // Generate localized URL for each locale
                for (const [locale] of pattern.localized) {
                    try {
                        const localizedUrl = localizeUrl(url, { locale });
                        const urlString = localizedUrl.href;
                        // Only add if we haven't seen this exact URL before
                        if (!seenUrls.has(urlString)) {
                            seenUrls.add(urlString);
                            localizedUrls.add(localizedUrl);
                        }
                    }
                    catch {
                        // Skip if localization fails for this locale
                        continue;
                    }
                }
                break;
            }
            catch {
                // Skip if pattern matching fails
                continue;
            }
        }
        // If no pattern matched, use the URL as is
        if (!patternFound) {
            localizedUrls.add(url);
        }
    }
    return Array.from(localizedUrls);
}

/**
 * @typedef {"cookie" | "baseLocale" | "globalVariable" | "url" | "preferredLanguage" | "localStorage"} BuiltInStrategy
 */
/**
 * @typedef {`custom_${string}`} CustomStrategy
 */
/**
 * @typedef {BuiltInStrategy | CustomStrategy} Strategy
 */
/**
 * @typedef {Array<Strategy>} Strategies
 */
/**
 * @typedef {{ getLocale: (request?: Request) => string | undefined }} CustomServerStrategyHandler
 */
/**
 * @typedef {{ getLocale: () => string | undefined, setLocale: (locale: string) => void }} CustomClientStrategyHandler
 */
export const customServerStrategies = new Map();
export const customClientStrategies = new Map();
/**
 * Checks if the given strategy is a custom strategy.
 *
 * @param {any} strategy The name of the custom strategy to validate.
 * Must be a string that starts with "custom-" followed by alphanumeric characters.
 * @returns {boolean} Returns true if it is a custom strategy, false otherwise.
 */
export function isCustomStrategy(strategy) {
    return typeof strategy === "string" && /^custom-[A-Za-z0-9]+$/.test(strategy);
}
/**
 * Defines a custom strategy that is executed on the server.
 *
 * @param {any} strategy The name of the custom strategy to define. Must follow the pattern `custom-<name>` where
 * `<name>` contains only alphanumeric characters.
 * @param {CustomServerStrategyHandler} handler The handler for the custom strategy, which should implement
 * the method `getLocale`.
 * @returns {void}
 */
export function defineCustomServerStrategy(strategy, handler) {
    if (!isCustomStrategy(strategy)) {
        throw new Error(`Invalid custom strategy: "${strategy}". Must be a custom strategy following the pattern custom-<name>` +
            " where <name> contains only alphanumeric characters.");
    }
    customServerStrategies.set(strategy, handler);
}
/**
 * Defines a custom strategy that is executed on the client.
 *
 * @param {any} strategy The name of the custom strategy to define. Must follow the pattern `custom-<name>` where
 * `<name>` contains only alphanumeric characters.
 * @param {CustomClientStrategyHandler} handler The handler for the custom strategy, which should implement the
 * methods `getLocale` and `setLocale`.
 * @returns {void}
 */
export function defineCustomClientStrategy(strategy, handler) {
    if (!isCustomStrategy(strategy)) {
        throw new Error(`Invalid custom strategy: "${strategy}". Must be a custom strategy following the pattern custom-<name>` +
            " where <name> contains only alphanumeric characters.");
    }
    customClientStrategies.set(strategy, handler);
}

// ------ TYPES ------

/**
 * A locale that is available in the project.
 *
 * @example
 *   setLocale(request.locale as Locale)
 *
 * @typedef {(typeof locales)[number]} Locale
 */




================================================================================
File: lib/paraglide/server.js
================================================================================

// eslint-disable

import * as runtime from "./runtime.js";

/**
 * Server middleware that handles locale-based routing and request processing.
 *
 * This middleware performs several key functions:
 *
 * 1. Determines the locale for the incoming request using configured strategies
 * 2. Handles URL localization and redirects (only for document requests)
 * 3. Maintains locale state using AsyncLocalStorage to prevent request interference
 *
 * When URL strategy is used:
 *
 * - The locale is extracted from the URL for all request types
 * - If URL doesn't match the determined locale, redirects to localized URL (only for document requests)
 * - De-localizes URLs before passing to server (e.g., `/fr/about` ‚Üí `/about`)
 *
 * @template T - The return type of the resolve function
 *
 * @param {Request} request - The incoming request object
 * @param {(args: { request: Request, locale: import("./runtime.js").Locale }) => T | Promise<T>} resolve - Function to handle the request
 * @param {{ onRedirect:(response: Response) => void }} [callbacks] - Callbacks to handle events from middleware
 * @returns {Promise<Response>}
 *
 * @example
 * ```typescript
 * // Basic usage in metaframeworks like NextJS, SvelteKit, Astro, Nuxt, etc.
 * export const handle = async ({ event, resolve }) => {
 *   return serverMiddleware(event.request, ({ request, locale }) => {
 *     // let the framework further resolve the request
 *     return resolve(request);
 *   });
 * };
 * ```
 *
 * @example
 * ```typescript
 * // Usage in a framework like Express JS or Hono
 * app.use(async (req, res, next) => {
 *   const result = await serverMiddleware(req, ({ request, locale }) => {
 *     // If a redirect happens this won't be called
 *     return next(request);
 *   });
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Usage in serverless environments like Cloudflare Workers
 * // ‚ö†Ô∏è WARNING: This should ONLY be used in serverless environments like Cloudflare Workers.
 * // Disabling AsyncLocalStorage in traditional server environments risks cross-request pollution where state from
 * // one request could leak into another concurrent request.
 * export default {
 *   fetch: async (request) => {
 *     return serverMiddleware(
 *       request,
 *       ({ request, locale }) => handleRequest(request, locale),
 *       { disableAsyncLocalStorage: true }
 *     );
 *   }
 * };
 * ```
 */
export async function paraglideMiddleware(request, resolve, callbacks) {
    if (!runtime.disableAsyncLocalStorage && !runtime.serverAsyncLocalStorage) {
        const { AsyncLocalStorage } = await import("async_hooks");
        runtime.overwriteServerAsyncLocalStorage(new AsyncLocalStorage());
    }
    else if (!runtime.serverAsyncLocalStorage) {
        runtime.overwriteServerAsyncLocalStorage(createMockAsyncLocalStorage());
    }
    const locale = runtime.extractLocaleFromRequest(request);
    const origin = new URL(request.url).origin;
    // if the client makes a request to a URL that doesn't match
    // the localizedUrl, redirect the client to the localized URL
    if (request.headers.get("Sec-Fetch-Dest") === "document" &&
        runtime.strategy.includes("url")) {
        const localizedUrl = runtime.localizeUrl(request.url, { locale });
        if (normalizeURL(localizedUrl.href) !== normalizeURL(request.url)) {
            // Create headers object with Vary header if preferredLanguage strategy is used
            /** @type {Record<string, string>} */
            const headers = {};
            if (runtime.strategy.includes("preferredLanguage")) {
                headers["Vary"] = "Accept-Language";
            }
            const response = new Response(null, {
                status: 307,
                headers: {
                    Location: localizedUrl.href,
                    ...headers,
                },
            });
            callbacks?.onRedirect(response);
            return response;
        }
    }
    // If the strategy includes "url", we need to de-localize the URL
    // before passing it to the server middleware.
    //
    // The middleware is responsible for mapping a localized URL to the
    // de-localized URL e.g. `/en/about` to `/about`. Otherwise,
    // the server can't render the correct page.
    const newRequest = runtime.strategy.includes("url")
        ? new Request(runtime.deLocalizeUrl(request.url), request)
        : // need to create a new request object because some metaframeworks (nextjs!) throw otherwise
            // https://github.com/opral/inlang-paraglide-js/issues/411
            new Request(request);
    // the message functions that have been called in this request
    /** @type {Set<string>} */
    const messageCalls = new Set();
    const response = await runtime.serverAsyncLocalStorage?.run({ locale, origin, messageCalls }, () => resolve({ locale, request: newRequest }));
    // Only modify HTML responses
    if (runtime.experimentalMiddlewareLocaleSplitting &&
        response.headers.get("Content-Type")?.includes("html")) {
        const body = await response.text();
        const messages = [];
        // using .values() to avoid polyfilling in older projects. else the following error is thrown
        // Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
        for (const messageCall of Array.from(messageCalls)) {
            const [id, locale] = 
            /** @type {[string, import("./runtime.js").Locale]} */ (messageCall.split(":"));
            messages.push(`${id}: ${compiledBundles[id]?.[locale]}`);
        }
        const script = `<script>globalThis.__paraglide_ssr = { ${messages.join(",")} }</script>`;
        // Insert the script before the closing head tag
        const newBody = body.replace("</head>", `${script}</head>`);
        // Create a new response with the modified body
        // Clone all headers except Content-Length which will be set automatically
        const newHeaders = new Headers(response.headers);
        newHeaders.delete("Content-Length"); // Let the browser calculate the correct length
        return new Response(newBody, {
            status: response.status,
            statusText: response.statusText,
            headers: newHeaders,
        });
    }
    return response;
}
/**
 * Normalize url for comparison.
 * Strips trailing slash
 * @param {string} url
 * @returns {string} normalized url string
 */
function normalizeURL(url) {
    const urlObj = new URL(url);
    // // strip trailing slash from pathname
    urlObj.pathname = urlObj.pathname.replace(/\/$/, "");
    return urlObj.href;
}
/**
 * Creates a mock AsyncLocalStorage implementation for environments where
 * native AsyncLocalStorage is not available or disabled.
 *
 * This mock implementation mimics the behavior of the native AsyncLocalStorage
 * but doesn't require the async_hooks module. It's designed to be used in
 * environments like Cloudflare Workers where AsyncLocalStorage is not available.
 *
 * @returns {import("./runtime.js").ParaglideAsyncLocalStorage}
 */
function createMockAsyncLocalStorage() {
    /** @type {any} */
    let currentStore = undefined;
    return {
        getStore() {
            return currentStore;
        },
        async run(store, callback) {
            currentStore = store;
            try {
                return await callback();
            }
            finally {
                currentStore = undefined;
            }
        },
    };
}
/**
 * The compiled messages for the server middleware.
 *
 * Only populated if `enableMiddlewareOptimizations` is set to `true`.
 *
 * @type {Record<string, Record<import("./runtime.js").Locale, string>>}
 */
const compiledBundles = {};



================================================================================
File: lib/schemas/payment.ts
================================================================================

/**
* @file frontend/src/lib/schemas/payment.ts
* @purpose Defines TypeScript types that correspond to the backend's payment-related Pydantic schemas.
*
* @dependencies
* - None
*
* @notes
* - These types ensure that the data sent from the SvelteKit frontend to the FastAPI backend matches the expected structure for creating payment intents.
* - This file centralizes payment-related type definitions for easy maintenance and type safety across the frontend application.
*/



/**
     * Mirrors the backend's `BookingCreate` schema.
     * Used when a booking is part of the checkout payload.
     */
export interface BookingCreate {
    time_slot_id: string; // UUID
    quantity: number;
    customer_name: string;
    customer_email: string;
    user_id?: string; // Optional UUID
}

/**
 * Mirrors the backend's `MerchandiseOrderItemCreate` schema.
 * Represents a single type of merchandise item in the cart.
 */
export interface MerchandiseOrderItemCreate {
    merchandise_id: string; // UUID
    quantity: number;
}

/**
 * Mirrors the backend's `OrderCreatePayload` schema.
 * This is the main data structure sent to the `create-payment-intent` endpoint.
 */
export interface OrderCreatePayload {
    booking?: BookingCreate;
    merchandise_items?: MerchandiseOrderItemCreate[];
    customer_name?: string;
    customer_email?: string;
}


================================================================================
File: lib/stores/authStore.ts
================================================================================

/**
 * @file Authentication Store (authStore.ts)
 * @description Manages the application's authentication state using Svelte stores
 * and interacts with the Supabase client-side auth events.
 *
 * @dependencies
 * - svelte/store: Provides `writable`, `get` for creating/accessing reactive stores.
 * - @supabase/supabase-js: Provides `Session` type.
 * - $lib/utils/supabaseClient: Provides the client-side Supabase instance.
 */

import { writable, type Writable, get } from 'svelte/store'; // Import get
import type { Session } from '@supabase/supabase-js';
import { supabase } from '$lib/utils/supabaseClient';

// --- Stores ---

/**
 * Writable store holding the current authenticated session object.
 * Null if the user is not logged in. Components can subscribe to this
 * to reactively update based on auth state using the $ prefix (e.g., $sessionStore).
 */
export const sessionStore: Writable<Session | null> = writable(null);

/**
 * Writable store indicating if the initial auth check (on page load/app start)
 * has completed. Useful for preventing UI flashes or premature redirects.
 */
export const authReady: Writable<boolean> = writable(false);


// --- Initialization ---

let authListenerInitialized = false;
let unsubscribe: (() => void) | null = null;

/**
 * Initializes the Supabase auth state change listener.
 * This should be called ONCE when the application root mounts client-side.
 * It listens for SIGNED_IN, SIGNED_OUT, TOKEN_REFRESHED events and updates
 * the sessionStore accordingly. It also sets authReady to true once the
 * initial session state is determined.
 *
 * @returns {() => void} A function to unsubscribe the listener.
 **/
export function initializeAuthListener(): () => void {
    console.log('[AuthStore] Attempting to initialize auth listener...');

    if (authListenerInitialized && unsubscribe) {
        console.log('[AuthStore] Listener already initialized.');
        return unsubscribe; // Return existing unsubscribe function
    }

    authListenerInitialized = true;

    // Immediately try to get the current session to set initial state
    supabase.auth.getSession().then(({ data }) => {
        console.log('[AuthStore] Initial session fetched client-side:', data.session ? data.session.user.id : 'null');
        // Only set the store if auth isn't already marked as ready by the listener firing first
        if (!get(authReady)) {
            sessionStore.set(data.session);
        }
        // Mark auth as ready only after attempting to get the initial session
        authReady.set(true);
        console.log('[AuthStore] Auth ready.');
    }).catch((error) => {
        console.error('[AuthStore] Error fetching initial session:', error);
        // Still mark as ready even if error occurs, assuming no session
        if (!get(authReady)) {
            sessionStore.set(null);
        }
        authReady.set(true);
    });


    // Subscribe to auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
        console.log(`[AuthStore onAuthStateChange] Event: ${event}`, session ? `User: ${session.user.id}` : 'No session');

        // Explicitly handle SIGNED_OUT
        if (event === 'SIGNED_OUT') {
            console.log('[AuthStore onAuthStateChange] SIGNED_OUT detected, setting store to null.');
            sessionStore.set(null);
        } else {
            // For SIGNED_IN, TOKEN_REFRESHED, USER_UPDATED etc., update with the provided session
            sessionStore.set(session);
        }

        // Ensure authReady is true after the first event fires as well
        if (!get(authReady)) {
            authReady.set(true);
        }
    });

    // Store the unsubscribe function for cleanup
    unsubscribe = subscription.unsubscribe;

    console.log('[AuthStore] Listener initialized.');
    return unsubscribe;
}

// --- Convenience Object (Optional) ---
// Export the stores directly. Components should use the $ prefix for auto-subscription.
export const authStore = {
    currentSession: sessionStore,
    ready: authReady
};


================================================================================
File: lib/stores/bookingStore.ts
================================================================================

/**
* @file Booking Store - Centralized state management for the booking process
* @description
* Manages the entire booking flow state using Svelte stores.
* Provides reactive state for date, time, ticket, and pricing.
* This version is refactored for simplicity and robustness, enforcing a single ticket type per booking
* to align with the backend API and simplify the user flow.
*
* @dependencies
* - Svelte: For reactive stores and state management.
* - apiClient: For fetching ticket types and availability data.
*
* @notes
* - Enforces a single ticket type selection model for clarity and API compatibility.
* - Time slots are now loaded on-demand after a date and ticket type have been selected.
* - State is reset hierarchically (e.g., changing date clears tickets and time) to ensure consistency.
* - Exports key interfaces like BookingSummary for use in other components.
* - Fixed availability data flow to ensure calendar displays visual indicators correctly.
* - Error handling: Comprehensive error states and validation with user feedback.
* - FIXED: bookingSummary isComplete logic to properly include customerInfo in dependencies.
*/



import { writable, derived, get, type Writable, type Readable } from 'svelte/store';
import { apiClient } from '$lib/api/apiClient';

// --- TYPE DEFINITIONS (EXPORTED FOR REUSE) ---

/** Represents the availability status of a date. */
export type DateAvailabilityStatus = 'available' | 'unavailable' | 'loading' | 'unknown';

/** Represents a ticket type available for booking. */
export interface TicketType {
    id: string;
    price: number;
    name_translations: Record<string, string>;
    description_translations?: Record<string, string>;
    group_size?: number;
    [key: string]: any;
}

/** Represents an available time slot for a booking. */
export interface TimeSlot {
    id: string;
    start_time: string;
    end_time: string;
    available_slots: number;
    capacity: number;
    [key: string]: any;
}

/** Represents the currently selected ticket and its quantity. */
export interface SelectedTicket {
    id: string;
    quantity: number;
}

/** Represents customer details for guest bookings. */
export interface CustomerInfo {
    name: string;
    email: string;
    isGuest: boolean;
}

/** A map of validation error messages for the booking form. */
interface ValidationErrors {
    [key: string]: string | undefined;
    date?: string;
    timeSlot?: string;
    tickets?: string;
    name?: string;
    email?: string;
    capacity?: string;
}

/** A summary of a single ticket line item in the booking. */
interface TicketSummary {
    type: TicketType;
    quantity: number;
    subtotal: number;
}

/** A comprehensive summary of the entire current booking state. */
export interface BookingSummary {
    date: Date | null;
    timeSlot: TimeSlot | null;
    tickets: TicketSummary[];
    totalPrice: number;
    totalTickets: number;
    isComplete: boolean;
}

/** Data structure for the booking creation API payload. */
interface BookingData {
    time_slot_id: string;
    quantity: number;
    customer_name: string;
    customer_email: string;
    user_id?: string;
}

// --- CORE BOOKING STATE ---

export const selectedDate: Writable<Date | null> = writable(null);
export const selectedTimeSlot: Writable<TimeSlot | null> = writable(null);
export const selectedTicket: Writable<SelectedTicket | null> = writable(null);
export const availableTicketTypes: Writable<TicketType[]> = writable([]);
export const availableTimeSlots: Writable<TimeSlot[]> = writable([]);

export const customerInfo: Writable<CustomerInfo> = writable({
    name: '',
    email: '',
    isGuest: true
});

// --- DATE AVAILABILITY CACHE ---
/**
 * Caches the availability status of dates for each ticket type.
 * Structure: Map<ticketTypeId, Map<dateString (YYYY-MM-DD), DateAvailabilityStatus>>
 */
export const dateAvailability: Writable<Map<string, Map<string, DateAvailabilityStatus>>> = writable(new Map());

// --- LOADING AND ERROR STATES ---
export const isLoadingDateAvailability: Writable<boolean> = writable(false);
export const isLoadingTicketTypes: Writable<boolean> = writable(false);
export const isLoadingTimeSlots: Writable<boolean> = writable(false);
export const isCreatingBooking: Writable<boolean> = writable(false);
export const bookingError: Writable<string | null> = writable(null);
export const validationErrors: Writable<ValidationErrors> = writable({});

// --- DERIVED STORES FOR COMPUTED VALUES ---

/** Calculates the total price based on the selected ticket and quantity. */
export const totalPrice: Readable<number> = derived(
    [selectedTicket, availableTicketTypes],
    ([$selectedTicket, $availableTicketTypes]) => {
        if (!$selectedTicket) return 0;

        const ticketType = $availableTicketTypes.find(tt => tt.id === $selectedTicket.id);
        if (ticketType) {
            return ticketType.price * $selectedTicket.quantity;
        }
        return 0;
    }
);

/** Calculates the total number of tickets selected. */
export const totalTickets: Readable<number> = derived(
    selectedTicket,
    ($selectedTicket) => $selectedTicket?.quantity ?? 0
);

/** Creates a comprehensive summary of the current booking for display. */
export const bookingSummary: Readable<BookingSummary> = derived(
    [selectedDate, selectedTimeSlot, selectedTicket, availableTicketTypes, totalPrice, totalTickets, customerInfo],
    ([$selectedDate, $selectedTimeSlot, $selectedTicket, $availableTicketTypes, $totalPrice, $totalTickets, $customerInfo]) => {
        const tickets: TicketSummary[] = [];

        if ($selectedTicket) {
            const ticketType = $availableTicketTypes.find(tt => tt.id === $selectedTicket.id);
            if (ticketType && $selectedTicket.quantity > 0) {
                tickets.push({
                    type: ticketType,
                    quantity: $selectedTicket.quantity,
                    subtotal: ticketType.price * $selectedTicket.quantity
                });
            }
        }

        // Fixed isComplete logic - now properly reactive to customerInfo changes
        const hasDate = !!$selectedDate;
        const hasTimeSlot = !!$selectedTimeSlot;
        const hasTickets = $totalTickets > 0;
        const hasCustomerName = !!$customerInfo.name && $customerInfo.name.trim().length >= 2;
        const hasCustomerEmail = !!$customerInfo.email && $customerInfo.email.includes('@');

        console.log('[BookingSummary] isComplete calculation:', {
            hasDate,
            hasTimeSlot,
            hasTickets,
            hasCustomerName,
            hasCustomerEmail,
            customerInfo: $customerInfo,
            selectedDate: $selectedDate,
            selectedTimeSlot: $selectedTimeSlot,
            totalTickets: $totalTickets
        });

        const isComplete = hasDate && hasTimeSlot && hasTickets && hasCustomerName && hasCustomerEmail;

        return {
            date: $selectedDate,
            timeSlot: $selectedTimeSlot,
            tickets,
            totalPrice: $totalPrice,
            totalTickets: $totalTickets,
            isComplete
        };
    }
);

// --- BOOKING ACTIONS ---

export const bookingActions = {
    /**
     * Fetches and caches the availability of all days in a given month for a specific ticket type.
     * @param {string} ticketTypeId - The ID of the ticket type.
     * @param {number} year - The year to check.
     * @param {number} month - The month to check (0-indexed, e.g., 0 for January).
     * @param {typeof fetch} [customFetch=fetch] - Optional custom fetch for SSR.
     */
    async loadDateAvailabilityForTicket(
        ticketTypeId: string,
        year: number,
        month: number,
        customFetch: typeof fetch = fetch
    ): Promise<void> {
        console.log(`[BookingStore] Loading availability for ticket ${ticketTypeId}, ${year}-${month + 1}`);

        isLoadingDateAvailability.set(true);

        // Get current availability map for this ticket type
        const currentMap = get(dateAvailability);
        let availabilityMap = currentMap.get(ticketTypeId) || new Map<string, DateAvailabilityStatus>();

        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const promises: Promise<void>[] = [];

        for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(year, month, day);
            const dateString = date.toISOString().split('T')[0];

            // Skip if we already have data for this date
            if (availabilityMap.has(dateString)) {
                console.log(`[BookingStore] Skipping ${dateString} - already loaded`);
                continue;
            }

            // Set loading state
            availabilityMap.set(dateString, 'loading');

            const promise = apiClient.getTimeSlots(ticketTypeId, dateString, customFetch)
                .then(timeSlots => {
                    const hasAvailability = timeSlots && timeSlots.length > 0 &&
                        timeSlots.some(slot => slot.available_slots > 0);
                    const status: DateAvailabilityStatus = hasAvailability ? 'available' : 'unavailable';
                    availabilityMap.set(dateString, status);
                    console.log(`[BookingStore] ${dateString}: ${status} (${timeSlots?.length || 0} slots)`);
                })
                .catch(error => {
                    console.error(`[BookingStore] Failed to check availability for ${dateString}:`, error);
                    if (error instanceof Error && (error.message.includes('404') || error.message.includes('No time slots found'))) {
                        availabilityMap.set(dateString, 'unavailable');
                    } else {
                        availabilityMap.set(dateString, 'unavailable');
                    }
                });

            promises.push(promise);
        }

        // Update the store with loading states immediately
        const updatedMap = new Map(currentMap);
        updatedMap.set(ticketTypeId, availabilityMap);
        dateAvailability.set(updatedMap);

        // Wait for all API calls to complete
        await Promise.allSettled(promises);

        // Update the store with final results
        const finalMap = new Map(get(dateAvailability));
        finalMap.set(ticketTypeId, availabilityMap);
        dateAvailability.set(finalMap);

        console.log(`[BookingStore] Completed loading availability for ${ticketTypeId}. Map size: ${availabilityMap.size}`);
        isLoadingDateAvailability.set(false);
    },

    async loadTicketTypes(customFetch: typeof fetch = fetch): Promise<void> {
        isLoadingTicketTypes.set(true);
        bookingError.set(null);
        try {
            const ticketTypes: TicketType[] = await apiClient.getTicketTypes(customFetch);
            availableTicketTypes.set(ticketTypes);
            console.log(`[BookingStore] Loaded ${ticketTypes.length} ticket types`);
        } catch (error) {
            console.error('[BookingStore] Failed to load ticket types:', error);
            bookingError.set('Unable to load ticket types. Please try again.');
        } finally {
            isLoadingTicketTypes.set(false);
        }
    },

    /**
     * Loads available time slots based on the current date and ticket selection.
     * @param {typeof fetch} [customFetch=fetch] - Optional custom fetch for SSR.
     */
    async loadTimeSlotsForSelection(customFetch: typeof fetch = fetch): Promise<void> {
        const date = get(selectedDate);
        const ticket = get(selectedTicket);

        if (!date || !ticket) {
            availableTimeSlots.set([]);
            return;
        }

        console.log(`[BookingStore] Loading time slots for ${date.toISOString().split('T')[0]} and ticket ${ticket.id}`);

        isLoadingTimeSlots.set(true);
        bookingError.set(null);
        try {
            const dateString = date.toISOString().split('T')[0];
            const timeSlots: TimeSlot[] = await apiClient.getTimeSlots(ticket.id, dateString, customFetch);
            availableTimeSlots.set(timeSlots);
            console.log(`[BookingStore] Loaded ${timeSlots.length} time slots`);

            const currentSlot = get(selectedTimeSlot);
            if (currentSlot && !timeSlots.find(slot => slot.id === currentSlot.id)) {
                selectedTimeSlot.set(null);
                console.log(`[BookingStore] Reset selected time slot - no longer available`);
            }
        } catch (error) {
            console.error('[BookingStore] Failed to load time slots:', error);
            if (error instanceof Error && error.message.includes('No time slots found')) {
                availableTimeSlots.set([]);
                bookingError.set('No available time slots for this date and ticket type. Please try a different date.');
            } else {
                bookingError.set('Unable to load available time slots. Please try again.');
                availableTimeSlots.set([]);
            }
        } finally {
            isLoadingTimeSlots.set(false);
        }
    },

    /**
     * Updates the selected ticket type and quantity. Replaces any existing selection.
     * @param {string} ticketTypeId - The ID of the ticket type.
     * @param {number} quantity - The new quantity.
     */
    updateTicketQuantity(ticketTypeId: string, quantity: number): void {
        const currentTicket = get(selectedTicket);
        console.log(`[BookingStore] Updating ticket quantity: ${ticketTypeId} = ${quantity}`);

        if (quantity > 0) {
            selectedTicket.set({ id: ticketTypeId, quantity });
        } else {
            selectedTicket.set(null);
        }

        // If ticket type changed, clear availability cache and dependent state
        if (currentTicket?.id !== ticketTypeId) {
            console.log(`[BookingStore] Ticket type changed, clearing dependent state`);
            // Don't clear the entire dateAvailability cache, just reset selection-dependent state
            selectedDate.set(null);
            selectedTimeSlot.set(null);
            availableTimeSlots.set([]);
        }

        validationErrors.update(current => ({ ...current, tickets: undefined, capacity: undefined }));
    },

    /**
     * Sets the selected date and clears dependent state (time slot).
     * @param {Date} date - The selected date.
     */
    setSelectedDate(date: Date): void {
        console.log(`[BookingStore] Setting selected date: ${date.toISOString().split('T')[0]}`);
        selectedDate.set(date);
        selectedTimeSlot.set(null);
        availableTimeSlots.set([]);
        validationErrors.update(current => ({ ...current, date: undefined }));
    },

    /**
     * Sets the selected time slot.
     * @param {TimeSlot} timeSlot - The selected time slot object.
     */
    setSelectedTimeSlot(timeSlot: TimeSlot): void {
        console.log(`[BookingStore] Setting selected time slot: ${timeSlot.id}`);
        selectedTimeSlot.set(timeSlot);
        validationErrors.update(current => ({ ...current, timeSlot: undefined, capacity: undefined }));
    },

    /**
     * Updates customer information for guest bookings.
     * @param {Partial<CustomerInfo>} info - Partial customer information.
     */
    updateCustomerInfo(info: Partial<CustomerInfo>): void {
        console.log(`[BookingStore] Updating customer info:`, info);
        customerInfo.update(current => ({ ...current, ...info }));
        validationErrors.update(current => ({ ...current, name: undefined, email: undefined }));
    },

    /**
     * Validates the entire booking state before proceeding to payment.
     * @returns {boolean} - True if the booking is valid.
     */
    validateBooking(): boolean {
        const errors: ValidationErrors = {};
        const summary = get(bookingSummary);
        const customer = get(customerInfo);

        console.log(`[BookingStore] Validating booking:`, { summary, customer });

        if (!summary.date) errors.date = 'Please select a visit date';
        if (summary.totalTickets === 0) errors.tickets = 'Please select a ticket';
        if (!summary.timeSlot) errors.timeSlot = 'Please select a time slot';

        if (customer.isGuest) {
            if (!customer.name || customer.name.trim().length < 2) errors.name = 'Please enter a valid name';
            if (!customer.email || !customer.email.includes('@')) errors.email = 'Please enter a valid email address';
        }

        if (summary.timeSlot && summary.totalTickets > summary.timeSlot.available_slots) {
            errors.capacity = `Only ${summary.timeSlot.available_slots} tickets are available for this slot.`;
        }

        validationErrors.set(errors);
        const isValid = Object.keys(errors).length === 0;
        console.log(`[BookingStore] Validation result: ${isValid ? 'VALID' : 'INVALID'}`, errors);
        return isValid;
    },

    /**
     * This method is now DEPRECATED in favor of creating a full order payload for the
     * `/payments/create-payment-intent` endpoint. A standalone booking creation via the
     * frontend is no longer the standard flow.
     * This function is maintained for potential direct use or testing but should not be
     * part of the main checkout flow.
     */
    async createBooking(customFetch: typeof fetch = fetch): Promise<any> {
        if (!this.validateBooking()) {
            const errorMsg = 'Please correct the validation errors before proceeding.';
            bookingError.set(errorMsg);
            throw new Error(errorMsg);
        }

        isCreatingBooking.set(true);
        bookingError.set(null);

        try {
            const summary = get(bookingSummary);
            const customer = get(customerInfo);
            const ticket = get(selectedTicket);

            const bookingData: BookingData = {
                time_slot_id: summary.timeSlot!.id,
                quantity: ticket!.quantity,
                customer_name: customer.name,
                customer_email: customer.email,
            };

            // The standalone booking endpoint is no longer the primary path.
            // This demonstrates how it *would* work if needed.
            console.warn("[BookingStore] Using deprecated createBooking flow. The standard flow is via the checkout/payment intent page.");
            const booking = await apiClient.createBooking(bookingData, customFetch);
            // In a real scenario, we might reset state here.
            // this.resetBooking();
            return booking;
        } catch (error) {
            console.error('[BookingStore] Failed to create booking:', error);
            const errorMsg = 'An error occurred while creating your booking. Please try again.';
            bookingError.set(errorMsg);
            throw error;
        } finally {
            isCreatingBooking.set(false);
        }
    },

    /**
     * Resets all booking state to initial values for a new booking.
     * Also clears associated validation and error messages.
     */
    resetBooking(): void {
        console.log(`[BookingStore] Resetting booking state`);
        selectedDate.set(null);
        selectedTimeSlot.set(null);
        selectedTicket.set(null);
        availableTimeSlots.set([]);
        dateAvailability.set(new Map()); // Clear availability cache
        customerInfo.set({ name: '', email: '', isGuest: true });
        bookingError.set(null);
        validationErrors.set({});
    },

    /** Clears all error states from the store. */
    clearErrors(): void {
        bookingError.set(null);
        validationErrors.set({});
    }
};


================================================================================
File: lib/stores/cartStore.ts
================================================================================

/**
    * @file cartStore.ts
    * @purpose Manages the state of the user's shopping cart for merchandise.
    * 
    * @dependencies
    * - svelte/store: For creating writable and derived stores.
    * - $lib/api/apiClient: For the Merchandise type definition.
    *
    * @notes
    * - The cart state is persisted to `localStorage` to survive page reloads and new sessions.
    * - It provides reactive derived stores for `cartCount` and `cartTotal` for easy display in the UI.
    * - All interactions with the cart (add, remove, update) are handled through exported functions.
    * - Error handling: Assumes valid product data is passed in; validation should occur at the component level.
    */

import { writable, derived, type Writable } from 'svelte/store';
import type { Merchandise } from '$lib/api/apiClient';

/** Defines the structure of an item within the shopping cart. */
export interface CartItem extends Merchandise {
    quantity: number;
}

const CART_STORAGE_KEY = 'zungri-museum-cart';

/**
 * Creates a Svelte store for the shopping cart that automatically
 * synchronizes its state with the browser's localStorage.
 * @returns An object with store subscription and action methods.
 */
function createCartStore() {
    const isBrowser = typeof window !== 'undefined';
    const initialValue: CartItem[] = isBrowser
        ? JSON.parse(localStorage.getItem(CART_STORAGE_KEY) || '[]')
        : [];

    const store: Writable<CartItem[]> = writable(initialValue);

    // If in a browser environment, subscribe to the store to update localStorage on any change.
    if (isBrowser) {
        store.subscribe((value) => {
            localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(value));
        });
    }

    /**
     * Adds a product to the cart or increments its quantity if it already exists.
     * @param product The merchandise item to add.
     * @param quantity The number of items to add. Defaults to 1.
     */
    function addToCart(product: Merchandise, quantity = 1) {
        store.update((items) => {
            const existingItem = items.find((item) => item.id === product.id);
            if (existingItem) {
                // Update quantity if item already in cart
                existingItem.quantity = Math.min(existingItem.quantity + quantity, product.inventory);
            } else {
                // Add new item to cart
                items.push({ ...product, quantity });
            }
            return items;
        });
    }

    /**
     * Removes an item entirely from the cart.
     * @param productId The ID of the product to remove.
     */
    function removeFromCart(productId: string) {
        store.update((items) => items.filter((item) => item.id !== productId));
    }

    /**
     * Updates the quantity of a specific item in the cart.
     * If quantity is 0 or less, the item is removed.
     * @param productId The ID of the product to update.
     * @param quantity The new quantity.
     */
    function updateQuantity(productId: string, quantity: number) {
        store.update((items) => {
            if (quantity <= 0) {
                return items.filter((item) => item.id !== productId);
            }
            const itemToUpdate = items.find((item) => item.id === productId);
            if (itemToUpdate) {
                itemToUpdate.quantity = Math.min(quantity, itemToUpdate.inventory);
            }
            return items;
        });
    }

    /** Empties the entire cart. */
    function clearCart() {
        store.set([]);
    }

    return {
        subscribe: store.subscribe,
        addToCart,
        removeFromCart,
        updateQuantity,
        clearCart
    };
}

/** The main cart store instance. */
export const cart = createCartStore();

/** A derived store that calculates the total number of items in the cart. */
export const cartCount = derived(cart, ($cart) => {
    return $cart.reduce((total, item) => total + item.quantity, 0);
});

/** A derived store that calculates the total price of all items in the cart. */
export const cartTotal = derived(cart, ($cart) => {
    return $cart.reduce((total, item) => total + item.price * item.quantity, 0);
});


================================================================================
File: lib/utils/session.ts
================================================================================

/**
        * @file session.ts
        * @purpose Session management utilities
        * 
        * @dependencies
        * - $app/stores: SvelteKit session store
        *
        * @notes
        * - Provides reactive session access
        * - Handles session state changes
        */

import { session as svelteSession } from '$app/stores';
import { derived } from 'svelte/store';

export const session = derived(svelteSession, ($session) => {
    return $session.data?.session || null;
});


================================================================================
File: lib/utils/supabaseClient.ts
================================================================================

/**
 * @file supabaseClient.ts
 * @purpose Creates and exports the Supabase client instance for client-side usage
 * 
 * @dependencies
 * - @supabase/supabase-js: Provides Supabase client functionality
 * - $env/static/public: Access to public environment variables
 *
 * @notes
 * - Uses PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY from environment
 * - Singleton pattern ensures only one instance is created
 */

import { createClient } from '@supabase/supabase-js';
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';

// Create and export the Supabase client
export const supabase = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
    }
});


================================================================================
File: lib/utils/supabaseServer.ts
================================================================================

/**
        * @file supabaseServer.ts
        * @purpose Creates server-side Supabase client with proper session handling
        * 
        * @dependencies
        * - @supabase/ssr: Server-side Supabase utilities
        * - cookie: Cookie parsing library
        * - $env/static/public: Public environment variables
        *
        * @notes
        * - Handles cookie-based authentication for server-side operations
        * - Properly manages session tokens
        */

import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';

export function createSupabaseServerClient() {
    const cookieStore = cookies();

    return createServerClient(
        PUBLIC_SUPABASE_URL,
        PUBLIC_SUPABASE_ANON_KEY,
        {
            cookies: {
                get(name: string) {
                    return cookieStore.get(name)?.value;
                },
                set(name: string, value: string, options) {
                    cookieStore.set({ name, value, ...options });
                },
                remove(name: string, options) {
                    cookieStore.set({ name, value: '', ...options });
                },
            },
        }
    );
}


================================================================================
File: paraglide/messages/_index.js
================================================================================

// eslint-disable
export * from './common_loading.js'
export * from './common_submit.js'
export * from './common_cancel.js'
export * from './common_error.js'
export * from './common_tryagain1.js'
export * from './common_close.js'
export * from './common_next.js'
export * from './common_previous.js'
export * from './common_readmore1.js'
export * from './common_showless1.js'
export * from './navigation_home.js'
export * from './navigation_about.js'
export * from './navigation_visit.js'
export * from './navigation_contact.js'
export * from './navigation_book.js'
export * from './navigation_shop.js'
export * from './navigation_exhibitions.js'
export * from './navigation_collections.js'
export * from './navigation_events.js'
export * from './navigation_news.js'
export * from './languages_en.js'
export * from './languages_it.js'
export * from './languages_de.js'
export * from './museum_welcometitle1.js'
export * from './museum_welcomesubtitle1.js'
export * from './museum_openinghours1.js'
export * from './museum_admissionfees1.js'
export * from './museum_location.js'
export * from './museum_accessibility.js'
export * from './exhibitions_current.js'
export * from './exhibitions_upcoming.js'
export * from './exhibitions_past.js'
export * from './exhibitions_permanent.js'
export * from './exhibitions_temporary.js'
export * from './exhibitions_featured.js'
export * from './exhibitions_viewdetails1.js'
export * from './exhibitions_duration.js'
export * from './exhibitions_curator.js'
export * from './exhibitions_sponsors.js'
export * from './booking_title.js'
export * from './booking_selectdate1.js'
export * from './booking_selecttime1.js'
export * from './booking_adults.js'
export * from './booking_children.js'
export * from './booking_students.js'
export * from './booking_seniors.js'
export * from './booking_groups.js'
export * from './booking_guidedtour1.js'
export * from './booking_audioguide1.js'
export * from './booking_total.js'
export * from './booking_proceed.js'
export * from './booking_confirmation.js'
export * from './visit_planyourvisit2.js'
export * from './visit_beforeyoucome2.js'
export * from './visit_whattoexpected2.js'
export * from './visit_facilities.js'
export * from './visit_cafeteria.js'
export * from './visit_giftshop1.js'
export * from './visit_parking.js'
export * from './visit_wheelchairaccess1.js'
export * from './visit_familyfriendly1.js'
export * from './contact_getintouch2.js'
export * from './contact_address.js'
export * from './contact_phone.js'
export * from './contact_email.js'
export * from './contact_socialmedia1.js'
export * from './contact_sendmessage1.js'
export * from './contact_yourname1.js'
export * from './contact_youremail1.js'
export * from './contact_subject.js'
export * from './contact_message.js'
export * from './contact_messagesent1.js'
export * from './footer_copyright.js'
export * from './footer_privacy.js'
export * from './footer_terms.js'
export * from './footer_newsletter.js'
export * from './footer_followus1.js'
export * from './footer_supportedby1.js'


================================================================================
File: paraglide/messages/booking_adults.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Adults`
};

const de_booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Erwachsene`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_adults = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_adults(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_adults", locale)
	if (locale === "en") return en_booking_adults(inputs)
	return de_booking_adults(inputs)
};


================================================================================
File: paraglide/messages/booking_audioguide1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audio Guide`
};

const de_booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audiof√ºhrung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_audioguide1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_audioguide1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_audioguide1", locale)
	if (locale === "en") return en_booking_audioguide1(inputs)
	return de_booking_audioguide1(inputs)
};
export { booking_audioguide1 as "booking_audioGuide" }


================================================================================
File: paraglide/messages/booking_children.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Children`
};

const de_booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Kinder`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_children = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_children(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_children", locale)
	if (locale === "en") return en_booking_children(inputs)
	return de_booking_children(inputs)
};


================================================================================
File: paraglide/messages/booking_confirmation.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Booking Confirmation`
};

const de_booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Buchungsbest√§tigung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_confirmation = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_confirmation(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_confirmation", locale)
	if (locale === "en") return en_booking_confirmation(inputs)
	return de_booking_confirmation(inputs)
};


================================================================================
File: paraglide/messages/booking_groups.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Groups`
};

const de_booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Gruppen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_groups = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_groups(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_groups", locale)
	if (locale === "en") return en_booking_groups(inputs)
	return de_booking_groups(inputs)
};


================================================================================
File: paraglide/messages/booking_guidedtour1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `Guided Tour`
};

const de_booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `F√ºhrung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_guidedtour1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_guidedtour1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_guidedtour1", locale)
	if (locale === "en") return en_booking_guidedtour1(inputs)
	return de_booking_guidedtour1(inputs)
};
export { booking_guidedtour1 as "booking_guidedTour" }


================================================================================
File: paraglide/messages/booking_proceed.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Proceed to Payment`
};

const de_booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Zur Zahlung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_proceed = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_proceed(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_proceed", locale)
	if (locale === "en") return en_booking_proceed(inputs)
	return de_booking_proceed(inputs)
};


================================================================================
File: paraglide/messages/booking_selectdate1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Select Date`
};

const de_booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Datum ausw√§hlen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_selectdate1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_selectdate1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_selectdate1", locale)
	if (locale === "en") return en_booking_selectdate1(inputs)
	return de_booking_selectdate1(inputs)
};
export { booking_selectdate1 as "booking_selectDate" }


================================================================================
File: paraglide/messages/booking_selecttime1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Select Time`
};

const de_booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Zeit ausw√§hlen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_selecttime1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_selecttime1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_selecttime1", locale)
	if (locale === "en") return en_booking_selecttime1(inputs)
	return de_booking_selecttime1(inputs)
};
export { booking_selecttime1 as "booking_selectTime" }


================================================================================
File: paraglide/messages/booking_seniors.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Seniors`
};

const de_booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Senioren`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_seniors = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_seniors(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_seniors", locale)
	if (locale === "en") return en_booking_seniors(inputs)
	return de_booking_seniors(inputs)
};


================================================================================
File: paraglide/messages/booking_students.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Students`
};

const de_booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Studenten`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_students = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_students(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_students", locale)
	if (locale === "en") return en_booking_students(inputs)
	return de_booking_students(inputs)
};


================================================================================
File: paraglide/messages/booking_title.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Book Your Visit`
};

const de_booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Besuch buchen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_title = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_title(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_title", locale)
	if (locale === "en") return en_booking_title(inputs)
	return de_booking_title(inputs)
};


================================================================================
File: paraglide/messages/booking_total.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Total`
};

const de_booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Gesamt`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_total = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_total(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_total", locale)
	if (locale === "en") return en_booking_total(inputs)
	return de_booking_total(inputs)
};


================================================================================
File: paraglide/messages/common_cancel.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Cancel`
};

const de_common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Abbrechen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_cancel = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_cancel(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_cancel", locale)
	if (locale === "en") return en_common_cancel(inputs)
	return de_common_cancel(inputs)
};


================================================================================
File: paraglide/messages/common_close.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Close`
};

const de_common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Schlie√üen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_close = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_close(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_close", locale)
	if (locale === "en") return en_common_close(inputs)
	return de_common_close(inputs)
};


================================================================================
File: paraglide/messages/common_error.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_error = /** @type {(inputs: {}) => string} */ () => {
	return `An error occurred`
};

const de_common_error = /** @type {(inputs: {}) => string} */ () => {
	return `Ein Fehler ist aufgetreten`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_error = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_error(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_error", locale)
	if (locale === "en") return en_common_error(inputs)
	return de_common_error(inputs)
};


================================================================================
File: paraglide/messages/common_loading.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Loading...`
};

const de_common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Wird geladen...`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_loading = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_loading(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_loading", locale)
	if (locale === "en") return en_common_loading(inputs)
	return de_common_loading(inputs)
};


================================================================================
File: paraglide/messages/common_next.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Next`
};

const de_common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Weiter`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_next = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_next(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_next", locale)
	if (locale === "en") return en_common_next(inputs)
	return de_common_next(inputs)
};


================================================================================
File: paraglide/messages/common_previous.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Previous`
};

const de_common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Zur√ºck`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_previous = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_previous(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_previous", locale)
	if (locale === "en") return en_common_previous(inputs)
	return de_common_previous(inputs)
};


================================================================================
File: paraglide/messages/common_readmore1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Read more`
};

const de_common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Weiterlesen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_readmore1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_readmore1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_readmore1", locale)
	if (locale === "en") return en_common_readmore1(inputs)
	return de_common_readmore1(inputs)
};
export { common_readmore1 as "common_readMore" }


================================================================================
File: paraglide/messages/common_showless1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Show less`
};

const de_common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Weniger anzeigen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_showless1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_showless1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_showless1", locale)
	if (locale === "en") return en_common_showless1(inputs)
	return de_common_showless1(inputs)
};
export { common_showless1 as "common_showLess" }


================================================================================
File: paraglide/messages/common_submit.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Submit`
};

const de_common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Absenden`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_submit = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_submit(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_submit", locale)
	if (locale === "en") return en_common_submit(inputs)
	return de_common_submit(inputs)
};


================================================================================
File: paraglide/messages/common_tryagain1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Try again`
};

const de_common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Erneut versuchen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_tryagain1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_tryagain1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_tryagain1", locale)
	if (locale === "en") return en_common_tryagain1(inputs)
	return de_common_tryagain1(inputs)
};
export { common_tryagain1 as "common_tryAgain" }


================================================================================
File: paraglide/messages/contact_address.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Address`
};

const de_contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Adresse`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_address = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_address(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_address", locale)
	if (locale === "en") return en_contact_address(inputs)
	return de_contact_address(inputs)
};


================================================================================
File: paraglide/messages/contact_email.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `Email`
};

const de_contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `E-Mail`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_email = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_email(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_email", locale)
	if (locale === "en") return en_contact_email(inputs)
	return de_contact_email(inputs)
};


================================================================================
File: paraglide/messages/contact_getintouch2.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Get In Touch`
};

const de_contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Kontakt aufnehmen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_getintouch2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_getintouch2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_getintouch2", locale)
	if (locale === "en") return en_contact_getintouch2(inputs)
	return de_contact_getintouch2(inputs)
};
export { contact_getintouch2 as "contact_getInTouch" }


================================================================================
File: paraglide/messages/contact_message.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Message`
};

const de_contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_message = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_message(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_message", locale)
	if (locale === "en") return en_contact_message(inputs)
	return de_contact_message(inputs)
};


================================================================================
File: paraglide/messages/contact_messagesent1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Message Sent Successfully`
};

const de_contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht erfolgreich gesendet`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_messagesent1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_messagesent1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_messagesent1", locale)
	if (locale === "en") return en_contact_messagesent1(inputs)
	return de_contact_messagesent1(inputs)
};
export { contact_messagesent1 as "contact_messageSent" }


================================================================================
File: paraglide/messages/contact_phone.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Phone`
};

const de_contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Telefon`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_phone = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_phone(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_phone", locale)
	if (locale === "en") return en_contact_phone(inputs)
	return de_contact_phone(inputs)
};


================================================================================
File: paraglide/messages/contact_sendmessage1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Send Message`
};

const de_contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht senden`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_sendmessage1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_sendmessage1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_sendmessage1", locale)
	if (locale === "en") return en_contact_sendmessage1(inputs)
	return de_contact_sendmessage1(inputs)
};
export { contact_sendmessage1 as "contact_sendMessage" }


================================================================================
File: paraglide/messages/contact_socialmedia1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Social Media`
};

const de_contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Soziale Medien`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_socialmedia1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_socialmedia1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_socialmedia1", locale)
	if (locale === "en") return en_contact_socialmedia1(inputs)
	return de_contact_socialmedia1(inputs)
};
export { contact_socialmedia1 as "contact_socialMedia" }


================================================================================
File: paraglide/messages/contact_subject.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Subject`
};

const de_contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Betreff`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_subject = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_subject(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_subject", locale)
	if (locale === "en") return en_contact_subject(inputs)
	return de_contact_subject(inputs)
};


================================================================================
File: paraglide/messages/contact_youremail1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `Your Email`
};

const de_contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihre E-Mail`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_youremail1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_youremail1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_youremail1", locale)
	if (locale === "en") return en_contact_youremail1(inputs)
	return de_contact_youremail1(inputs)
};
export { contact_youremail1 as "contact_yourEmail" }


================================================================================
File: paraglide/messages/contact_yourname1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Your Name`
};

const de_contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihr Name`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_yourname1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_yourname1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_yourname1", locale)
	if (locale === "en") return en_contact_yourname1(inputs)
	return de_contact_yourname1(inputs)
};
export { contact_yourname1 as "contact_yourName" }


================================================================================
File: paraglide/messages/exhibitions_curator.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Curator`
};

const de_exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Kurator`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_curator = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_curator(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_curator", locale)
	if (locale === "en") return en_exhibitions_curator(inputs)
	return de_exhibitions_curator(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_current.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Current Exhibitions`
};

const de_exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Aktuelle Ausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_current = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_current(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_current", locale)
	if (locale === "en") return en_exhibitions_current(inputs)
	return de_exhibitions_current(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_duration.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Duration`
};

const de_exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Dauer`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_duration = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_duration(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_duration", locale)
	if (locale === "en") return en_exhibitions_duration(inputs)
	return de_exhibitions_duration(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_featured.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Featured Exhibition`
};

const de_exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Hauptausstellung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_featured = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_featured(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_featured", locale)
	if (locale === "en") return en_exhibitions_featured(inputs)
	return de_exhibitions_featured(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_past.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Past Exhibitions`
};

const de_exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Vergangene Ausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_past = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_past(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_past", locale)
	if (locale === "en") return en_exhibitions_past(inputs)
	return de_exhibitions_past(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_permanent.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Permanent Collection`
};

const de_exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Dauerausstellung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_permanent = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_permanent(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_permanent", locale)
	if (locale === "en") return en_exhibitions_permanent(inputs)
	return de_exhibitions_permanent(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_sponsors.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsors`
};

const de_exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsoren`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_sponsors = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_sponsors(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_sponsors", locale)
	if (locale === "en") return en_exhibitions_sponsors(inputs)
	return de_exhibitions_sponsors(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_temporary.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Temporary Exhibitions`
};

const de_exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Sonderausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_temporary = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_temporary(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_temporary", locale)
	if (locale === "en") return en_exhibitions_temporary(inputs)
	return de_exhibitions_temporary(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_upcoming.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Upcoming Exhibitions`
};

const de_exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Kommende Ausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_upcoming = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_upcoming(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_upcoming", locale)
	if (locale === "en") return en_exhibitions_upcoming(inputs)
	return de_exhibitions_upcoming(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_viewdetails1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `View Details`
};

const de_exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `Details anzeigen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const exhibitions_viewdetails1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_viewdetails1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_viewdetails1", locale)
	if (locale === "en") return en_exhibitions_viewdetails1(inputs)
	return de_exhibitions_viewdetails1(inputs)
};
export { exhibitions_viewdetails1 as "exhibitions_viewDetails" }


================================================================================
File: paraglide/messages/footer_copyright.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `¬© 2025 Zungri Museum. All rights reserved.`
};

const de_footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `¬© 2025 Museum von Zungri. Alle Rechte vorbehalten.`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_copyright = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_copyright(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_copyright", locale)
	if (locale === "en") return en_footer_copyright(inputs)
	return de_footer_copyright(inputs)
};


================================================================================
File: paraglide/messages/footer_followus1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Follow Us`
};

const de_footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Folgen Sie uns`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const footer_followus1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_followus1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_followus1", locale)
	if (locale === "en") return en_footer_followus1(inputs)
	return de_footer_followus1(inputs)
};
export { footer_followus1 as "footer_followUs" }


================================================================================
File: paraglide/messages/footer_newsletter.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Subscribe to Newsletter`
};

const de_footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Newsletter abonnieren`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_newsletter = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_newsletter(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_newsletter", locale)
	if (locale === "en") return en_footer_newsletter(inputs)
	return de_footer_newsletter(inputs)
};


================================================================================
File: paraglide/messages/footer_privacy.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Privacy Policy`
};

const de_footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Datenschutz`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_privacy = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_privacy(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_privacy", locale)
	if (locale === "en") return en_footer_privacy(inputs)
	return de_footer_privacy(inputs)
};


================================================================================
File: paraglide/messages/footer_supportedby1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Supported by`
};

const de_footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Unterst√ºtzt von`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const footer_supportedby1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_supportedby1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_supportedby1", locale)
	if (locale === "en") return en_footer_supportedby1(inputs)
	return de_footer_supportedby1(inputs)
};
export { footer_supportedby1 as "footer_supportedBy" }


================================================================================
File: paraglide/messages/footer_terms.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Terms and Conditions`
};

const de_footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Nutzungsbedingungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_terms = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_terms(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_terms", locale)
	if (locale === "en") return en_footer_terms(inputs)
	return de_footer_terms(inputs)
};


================================================================================
File: paraglide/messages/languages_de.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `German`
};

const de_languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `Deutsch`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_de = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_de(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_de", locale)
	if (locale === "en") return en_languages_de(inputs)
	return de_languages_de(inputs)
};


================================================================================
File: paraglide/messages/languages_en.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `English`
};

const de_languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `Englisch`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_en = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_en(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_en", locale)
	if (locale === "en") return en_languages_en(inputs)
	return de_languages_en(inputs)
};


================================================================================
File: paraglide/messages/languages_it.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italian`
};

const de_languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italienisch`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_it = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_it(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_it", locale)
	if (locale === "en") return en_languages_it(inputs)
	return de_languages_it(inputs)
};


================================================================================
File: paraglide/messages/museum_accessibility.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Accessibility`
};

const de_museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Barrierefreiheit`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const museum_accessibility = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_accessibility(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_accessibility", locale)
	if (locale === "en") return en_museum_accessibility(inputs)
	return de_museum_accessibility(inputs)
};


================================================================================
File: paraglide/messages/museum_admissionfees1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Admission Fees`
};

const de_museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Eintrittspreise`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_admissionfees1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_admissionfees1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_admissionfees1", locale)
	if (locale === "en") return en_museum_admissionfees1(inputs)
	return de_museum_admissionfees1(inputs)
};
export { museum_admissionfees1 as "museum_admissionFees" }


================================================================================
File: paraglide/messages/museum_location.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `How to Reach Us`
};

const de_museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `Anfahrt`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const museum_location = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_location(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_location", locale)
	if (locale === "en") return en_museum_location(inputs)
	return de_museum_location(inputs)
};


================================================================================
File: paraglide/messages/museum_openinghours1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `Opening Hours`
};

const de_museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `√ñffnungszeiten`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_openinghours1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_openinghours1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_openinghours1", locale)
	if (locale === "en") return en_museum_openinghours1(inputs)
	return de_museum_openinghours1(inputs)
};
export { museum_openinghours1 as "museum_openingHours" }


================================================================================
File: paraglide/messages/museum_welcomesubtitle1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Discover the rich history and traditions of Southern Italy`
};

const de_museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Entdecken Sie die reiche Geschichte und Traditionen S√ºditaliens`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_welcomesubtitle1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_welcomesubtitle1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_welcomesubtitle1", locale)
	if (locale === "en") return en_museum_welcomesubtitle1(inputs)
	return de_museum_welcomesubtitle1(inputs)
};
export { museum_welcomesubtitle1 as "museum_welcomeSubtitle" }


================================================================================
File: paraglide/messages/museum_welcometitle1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Welcome to Zungri Museum`
};

const de_museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Willkommen im Museum von Zungri`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_welcometitle1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_welcometitle1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_welcometitle1", locale)
	if (locale === "en") return en_museum_welcometitle1(inputs)
	return de_museum_welcometitle1(inputs)
};
export { museum_welcometitle1 as "museum_welcomeTitle" }


================================================================================
File: paraglide/messages/navigation_about.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `About`
};

const de_navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `√úber uns`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_about = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_about(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_about", locale)
	if (locale === "en") return en_navigation_about(inputs)
	return de_navigation_about(inputs)
};


================================================================================
File: paraglide/messages/navigation_book.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Book Tickets`
};

const de_navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Tickets buchen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_book = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_book(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_book", locale)
	if (locale === "en") return en_navigation_book(inputs)
	return de_navigation_book(inputs)
};


================================================================================
File: paraglide/messages/navigation_collections.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Collections`
};

const de_navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Sammlungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_collections = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_collections(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_collections", locale)
	if (locale === "en") return en_navigation_collections(inputs)
	return de_navigation_collections(inputs)
};


================================================================================
File: paraglide/messages/navigation_contact.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Contact Us`
};

const de_navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Kontakt`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_contact = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_contact(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_contact", locale)
	if (locale === "en") return en_navigation_contact(inputs)
	return de_navigation_contact(inputs)
};


================================================================================
File: paraglide/messages/navigation_events.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Events`
};

const de_navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Veranstaltungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_events = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_events(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_events", locale)
	if (locale === "en") return en_navigation_events(inputs)
	return de_navigation_events(inputs)
};


================================================================================
File: paraglide/messages/navigation_exhibitions.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Exhibitions`
};

const de_navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Ausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_exhibitions = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_exhibitions(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_exhibitions", locale)
	if (locale === "en") return en_navigation_exhibitions(inputs)
	return de_navigation_exhibitions(inputs)
};


================================================================================
File: paraglide/messages/navigation_home.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Home`
};

const de_navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Startseite`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_home = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_home(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_home", locale)
	if (locale === "en") return en_navigation_home(inputs)
	return de_navigation_home(inputs)
};


================================================================================
File: paraglide/messages/navigation_news.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `News`
};

const de_navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `Nachrichten`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_news = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_news(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_news", locale)
	if (locale === "en") return en_navigation_news(inputs)
	return de_navigation_news(inputs)
};


================================================================================
File: paraglide/messages/navigation_shop.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Museum Shop`
};

const de_navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Museumsshop`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_shop = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_shop(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_shop", locale)
	if (locale === "en") return en_navigation_shop(inputs)
	return de_navigation_shop(inputs)
};


================================================================================
File: paraglide/messages/navigation_visit.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Plan Your Visit`
};

const de_navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Besuch planen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_visit = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_visit(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_visit", locale)
	if (locale === "en") return en_navigation_visit(inputs)
	return de_navigation_visit(inputs)
};


================================================================================
File: paraglide/messages/visit_beforeyoucome2.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Before You Come`
};

const de_visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Vor Ihrem Besuch`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_beforeyoucome2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_beforeyoucome2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_beforeyoucome2", locale)
	if (locale === "en") return en_visit_beforeyoucome2(inputs)
	return de_visit_beforeyoucome2(inputs)
};
export { visit_beforeyoucome2 as "visit_beforeYouCome" }


================================================================================
File: paraglide/messages/visit_cafeteria.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Cafeteria`
};

const de_visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Cafeteria`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_cafeteria = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_cafeteria(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_cafeteria", locale)
	if (locale === "en") return en_visit_cafeteria(inputs)
	return de_visit_cafeteria(inputs)
};


================================================================================
File: paraglide/messages/visit_facilities.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Facilities`
};

const de_visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Einrichtungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_facilities = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_facilities(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_facilities", locale)
	if (locale === "en") return en_visit_facilities(inputs)
	return de_visit_facilities(inputs)
};


================================================================================
File: paraglide/messages/visit_familyfriendly1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Family Friendly`
};

const de_visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Familienfreundlich`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_familyfriendly1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_familyfriendly1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_familyfriendly1", locale)
	if (locale === "en") return en_visit_familyfriendly1(inputs)
	return de_visit_familyfriendly1(inputs)
};
export { visit_familyfriendly1 as "visit_familyFriendly" }


================================================================================
File: paraglide/messages/visit_giftshop1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Gift Shop`
};

const de_visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Geschenkeladen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_giftshop1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_giftshop1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_giftshop1", locale)
	if (locale === "en") return en_visit_giftshop1(inputs)
	return de_visit_giftshop1(inputs)
};
export { visit_giftshop1 as "visit_giftShop" }


================================================================================
File: paraglide/messages/visit_parking.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parking`
};

const de_visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parkplatz`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_parking = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_parking(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_parking", locale)
	if (locale === "en") return en_visit_parking(inputs)
	return de_visit_parking(inputs)
};


================================================================================
File: paraglide/messages/visit_planyourvisit2.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Plan Your Visit`
};

const de_visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihren Besuch planen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_planyourvisit2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_planyourvisit2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_planyourvisit2", locale)
	if (locale === "en") return en_visit_planyourvisit2(inputs)
	return de_visit_planyourvisit2(inputs)
};
export { visit_planyourvisit2 as "visit_planYourVisit" }


================================================================================
File: paraglide/messages/visit_whattoexpected2.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_whattoexpected2 = /** @type {(inputs: {}) => string} */ () => {
	return `What to Expect`
};

const de_visit_whattoexpected2 = /** @type {(inputs: {}) => string} */ () => {
	return `Was Sie erwartet`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_whattoexpected2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_whattoexpected2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_whattoexpected2", locale)
	if (locale === "en") return en_visit_whattoexpected2(inputs)
	return de_visit_whattoexpected2(inputs)
};
export { visit_whattoexpected2 as "visit_whatToExpected" }


================================================================================
File: paraglide/messages/visit_wheelchairaccess1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Wheelchair Access`
};

const de_visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Rollstuhlzugang`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_wheelchairaccess1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_wheelchairaccess1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_wheelchairaccess1", locale)
	if (locale === "en") return en_visit_wheelchairaccess1(inputs)
	return de_visit_wheelchairaccess1(inputs)
};
export { visit_wheelchairaccess1 as "visit_wheelchairAccess" }


================================================================================
File: paraglide/messages.js
================================================================================

// eslint-disable
export * from './messages/_index.js'
// enabling auto-import by exposing all messages as m
export * as m from './messages/_index.js'


================================================================================
File: paraglide/registry.js
================================================================================

// eslint-disable

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.PluralRulesOptions} [options]
 * @returns {string}
 */
export function plural(locale, input, options) { 
	return new Intl.PluralRules(locale, options).select(Number(input))
};

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.NumberFormatOptions} [options]
 * @returns {string}
 */
export function number(locale, input, options) {
	return new Intl.NumberFormat(locale, options).format(Number(input))
};

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.DateTimeFormatOptions} [options]
 * @returns {string}
 */
export function datetime(locale, input, options) {
	return new Intl.DateTimeFormat(locale, options).format(new Date(/** @type {string} */ (input)))
};


================================================================================
File: paraglide/runtime.js
================================================================================

// eslint-disable

/** @type {any} */
const URLPattern = {}

/**
 * The project's base locale.
 *
 * @example
 *   if (locale === baseLocale) {
 *     // do something
 *   }
 */
export const baseLocale = "en";
/**
 * The project's locales that have been specified in the settings.
 *
 * @example
 *   if (locales.includes(userSelectedLocale) === false) {
 *     throw new Error('Locale is not available');
 *   }
 */
export const locales = /** @type {const} */ (["en", "de"]);
/** @type {string} */
export const cookieName = "PARAGLIDE_LOCALE";
/** @type {number} */
export const cookieMaxAge = 34560000;
/** @type {string} */
export const cookieDomain = "";
/** @type {string} */
export const localStorageKey = "PARAGLIDE_LOCALE";
/**
 * @type {Array<"cookie" | "baseLocale" | "globalVariable" | "url" | "preferredLanguage" | "localStorage" | `custom-${string}`>}
 */
export const strategy = [
    "cookie",
    "globalVariable",
    "baseLocale"
];
/**
 * The used URL patterns.
 *
 * @type {Array<{ pattern: string, localized: Array<[Locale, string]> }> }
 */
export const urlPatterns = [
    {
        "pattern": ":protocol://:domain(.*)::port?/:path(.*)?",
        "localized": [
            [
                "de",
                ":protocol://:domain(.*)::port?/de/:path(.*)?"
            ],
            [
                "en",
                ":protocol://:domain(.*)::port?/:path(.*)?"
            ]
        ]
    }
];
/**
 * @typedef {{
 * 		getStore(): {
 *   		locale?: Locale,
 * 			origin?: string,
 * 			messageCalls?: Set<string>
 *   	} | undefined,
 * 		run: (store: { locale?: Locale, origin?: string, messageCalls?: Set<string>},
 *    cb: any) => any
 * }} ParaglideAsyncLocalStorage
 */
/**
 * Server side async local storage that is set by `serverMiddleware()`.
 *
 * The variable is used to retrieve the locale and origin in a server-side
 * rendering context without effecting other requests.
 *
 * @type {ParaglideAsyncLocalStorage | undefined}
 */
export let serverAsyncLocalStorage = undefined;
export const disableAsyncLocalStorage = false;
export const experimentalMiddlewareLocaleSplitting = false;
export const isServer = typeof window === 'undefined';
/**
 * Sets the server side async local storage.
 *
 * The function is needed because the `runtime.js` file
 * must define the `serverAsyncLocalStorage` variable to
 * avoid a circular import between `runtime.js` and
 * `server.js` files.
 *
 * @param {ParaglideAsyncLocalStorage | undefined} value
 */
export function overwriteServerAsyncLocalStorage(value) {
    serverAsyncLocalStorage = value;
}
const TREE_SHAKE_COOKIE_STRATEGY_USED = true;
const TREE_SHAKE_URL_STRATEGY_USED = false;
const TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED = true;
const TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED = false;
const TREE_SHAKE_DEFAULT_URL_PATTERN_USED = true;
const TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED = false;

globalThis.__paraglide = {}

/**
 * This is a fallback to get started with a custom
 * strategy and avoid type errors.
 *
 * The implementation is overwritten
 * by \`overwriteGetLocale()\` and \`defineSetLocale()\`.
 *
 * @type {Locale|undefined}
 */
let _locale;
let localeInitiallySet = false;
/**
 * Get the current locale.
 *
 * @example
 *   if (getLocale() === 'de') {
 *     console.log('Germany üá©üá™');
 *   } else if (getLocale() === 'nl') {
 *     console.log('Netherlands üá≥üá±');
 *   }
 *
 * @type {() => Locale}
 */
export let getLocale = () => {
    /** @type {string | undefined} */
    let locale;
    // if running in a server-side rendering context
    // retrieve the locale from the async local storage
    if (serverAsyncLocalStorage) {
        const locale = serverAsyncLocalStorage?.getStore()?.locale;
        if (locale) {
            return locale;
        }
    }
    for (const strat of strategy) {
        if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            locale = extractLocaleFromCookie();
        }
        else if (strat === "baseLocale") {
            locale = baseLocale;
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED &&
            strat === "url" &&
            !isServer &&
            typeof window !== "undefined") {
            locale = extractLocaleFromUrl(window.location.href);
        }
        else if (TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED &&
            strat === "globalVariable" &&
            _locale !== undefined) {
            locale = _locale;
        }
        else if (TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED &&
            strat === "preferredLanguage" &&
            !isServer) {
            locale = extractLocaleFromNavigator();
        }
        else if (TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED &&
            strat === "localStorage" &&
            !isServer) {
            locale = localStorage.getItem(localStorageKey) ?? undefined;
        }
        else if (isCustomStrategy(strat) && customClientStrategies.has(strat)) {
            const handler = customClientStrategies.get(strat);
            locale = handler.getLocale();
        }
        // check if match, else continue loop
        if (locale !== undefined) {
            const asserted = assertIsLocale(locale);
            if (!localeInitiallySet) {
                _locale = asserted;
                // https://github.com/opral/inlang-paraglide-js/issues/455
                localeInitiallySet = true;
                setLocale(asserted, { reload: false });
            }
            return asserted;
        }
    }
    throw new Error("No locale found. Read the docs https://inlang.com/m/gerre34r/library-inlang-paraglideJs/errors#no-locale-found");
};
/**
 * Overwrite the \`getLocale()\` function.
 *
 * Use this function to overwrite how the locale is resolved. For example,
 * you can resolve the locale from the browser's preferred language,
 * a cookie, env variable, or a user's preference.
 *
 * @example
 *   overwriteGetLocale(() => {
 *     // resolve the locale from a cookie. fallback to the base locale.
 *     return Cookies.get('locale') ?? baseLocale
 *   }
 *
 * @type {(fn: () => Locale) => void}
 */
export const overwriteGetLocale = (fn) => {
    getLocale = fn;
};

/**
 * Set the locale.
 *
 * Set locale reloads the site by default on the client. Reloading
 * can be disabled by passing \`reload: false\` as an option. If
 * reloading is disabled, you need to ensure that the UI is updated
 * to reflect the new locale.
 *
 * @example
 *   setLocale('en');
 *
 * @example
 *   setLocale('en', { reload: false });
 *
 * @type {(newLocale: Locale, options?: { reload?: boolean }) => void}
 */
export let setLocale = (newLocale, options) => {
    const optionsWithDefaults = {
        reload: true,
        ...options,
    };
    // locale is already set
    // https://github.com/opral/inlang-paraglide-js/issues/430
    let currentLocale;
    try {
        currentLocale = getLocale();
    }
    catch {
        // do nothing, no locale has been set yet.
    }
    /** @type {string | undefined} */
    let newLocation = undefined;
    for (const strat of strategy) {
        if (TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED &&
            strat === "globalVariable") {
            // a default for a custom strategy to get started quickly
            // is likely overwritten by `defineSetLocale()`
            _locale = newLocale;
        }
        else if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            if (isServer ||
                typeof document === "undefined" ||
                typeof window === "undefined") {
                continue;
            }
            const domain = cookieDomain || window.location.hostname;
            // set the cookie
            document.cookie = `${cookieName}=${newLocale}; path=/; max-age=${cookieMaxAge}; domain=${domain}`;
        }
        else if (strat === "baseLocale") {
            // nothing to be set here. baseLocale is only a fallback
            continue;
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED &&
            strat === "url" &&
            typeof window !== "undefined") {
            // route to the new url
            //
            // this triggers a page reload but a user rarely
            // switches locales, so this should be fine.
            //
            // if the behavior is not desired, the implementation
            // can be overwritten by `defineSetLocale()` to avoid
            // a full page reload.
            newLocation = localizeUrl(window.location.href, {
                locale: newLocale,
            }).href;
        }
        else if (TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED &&
            strat === "localStorage" &&
            typeof window !== "undefined") {
            // set the localStorage
            localStorage.setItem(localStorageKey, newLocale);
        }
        else if (isCustomStrategy(strat) && customClientStrategies.has(strat)) {
            const handler = customClientStrategies.get(strat);
            handler.setLocale(newLocale);
        }
    }
    if (!isServer &&
        optionsWithDefaults.reload &&
        window.location &&
        newLocale !== currentLocale) {
        if (newLocation) {
            // reload the page by navigating to the new url
            window.location.href = newLocation;
        }
        else {
            // reload the page to reflect the new locale
            window.location.reload();
        }
    }
    return;
};
/**
 * Overwrite the \`setLocale()\` function.
 *
 * Use this function to overwrite how the locale is set. For example,
 * modify a cookie, env variable, or a user's preference.
 *
 * @example
 *   overwriteSetLocale((newLocale) => {
 *     // set the locale in a cookie
 *     return Cookies.set('locale', newLocale)
 *   });
 *
 * @param {(newLocale: Locale) => void} fn
 */
export const overwriteSetLocale = (fn) => {
    setLocale = fn;
};

/**
 * The origin of the current URL.
 *
 * Defaults to "http://y.com" in non-browser environments. If this
 * behavior is not desired, the implementation can be overwritten
 * by `overwriteGetUrlOrigin()`.
 *
 * @type {() => string}
 */
export let getUrlOrigin = () => {
    if (serverAsyncLocalStorage) {
        return serverAsyncLocalStorage.getStore()?.origin ?? "http://fallback.com";
    }
    else if (typeof window !== "undefined") {
        return window.location.origin;
    }
    return "http://fallback.com";
};
/**
 * Overwrite the getUrlOrigin function.
 *
 * Use this function in server environments to
 * define how the URL origin is resolved.
 *
 * @type {(fn: () => string) => void}
 */
export let overwriteGetUrlOrigin = (fn) => {
    getUrlOrigin = fn;
};

/**
 * Check if something is an available locale.
 *
 * @example
 *   if (isLocale(params.locale)) {
 *     setLocale(params.locale);
 *   } else {
 *     setLocale('en');
 *   }
 *
 * @param {any} locale
 * @returns {locale is Locale}
 */
export function isLocale(locale) {
    return !locale ? false : locales.includes(locale);
}

/**
 * Asserts that the input is a locale.
 *
 * @param {any} input - The input to check.
 * @returns {Locale} The input if it is a locale.
 * @throws {Error} If the input is not a locale.
 */
export function assertIsLocale(input) {
    if (isLocale(input) === false) {
        throw new Error(`Invalid locale: ${input}. Expected one of: ${locales.join(", ")}`);
    }
    return input;
}

/**
 * Extracts a locale from a request.
 *
 * Use the function on the server to extract the locale
 * from a request.
 *
 * The function goes through the strategies in the order
 * they are defined. If a strategy returns an invalid locale,
 * it will fall back to the next strategy.
 *
 * @example
 *   const locale = extractLocaleFromRequest(request);
 *
 * @type {(request: Request) => Locale}
 */
export const extractLocaleFromRequest = (request) => {
    /** @type {string|undefined} */
    let locale;
    for (const strat of strategy) {
        if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            locale = request.headers
                .get("cookie")
                ?.split("; ")
                .find((c) => c.startsWith(cookieName + "="))
                ?.split("=")[1];
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED && strat === "url") {
            locale = extractLocaleFromUrl(request.url);
        }
        else if (TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED &&
            strat === "preferredLanguage") {
            locale = extractLocaleFromHeader(request);
        }
        else if (strat === "globalVariable") {
            locale = _locale;
        }
        else if (strat === "baseLocale") {
            return baseLocale;
        }
        else if (strat === "localStorage") {
            continue;
        }
        else if (isCustomStrategy(strat) && customServerStrategies.has(strat)) {
            const handler = customServerStrategies.get(strat);
            locale = handler.getLocale(request);
        }
        if (locale !== undefined) {
            if (!isLocale(locale)) {
                locale = undefined;
            }
            else {
                return assertIsLocale(locale);
            }
        }
    }
    throw new Error("No locale found. There is an error in your strategy. Try adding 'baseLocale' as the very last strategy. Read more here https://inlang.com/m/gerre34r/library-inlang-paraglideJs/errors#no-locale-found");
};

/**
 * Extracts a cookie from the document.
 *
 * Will return undefined if the document is not available or if the cookie is not set.
 * The `document` object is not available in server-side rendering, so this function should not be called in that context.
 *
 * @returns {string | undefined}
 */
export function extractLocaleFromCookie() {
    if (typeof document === "undefined" || !document.cookie) {
        return;
    }
    const match = document.cookie.match(new RegExp(`(^| )${cookieName}=([^;]+)`));
    const locale = match?.[2];
    if (isLocale(locale)) {
        return locale;
    }
    return undefined;
}

/**
 * Extracts a locale from the accept-language header.
 *
 * Use the function on the server to extract the locale
 * from the accept-language header that is sent by the client.
 *
 * @example
 *   const locale = extractLocaleFromHeader(request);
 *
 * @type {(request: Request) => Locale}
 * @param {Request} request - The request object to extract the locale from.
 * @returns {string|undefined} The negotiated preferred language.
 */
export function extractLocaleFromHeader(request) {
    const acceptLanguageHeader = request.headers.get("accept-language");
    if (acceptLanguageHeader) {
        // Parse language preferences with their q-values and base language codes
        const languages = acceptLanguageHeader
            .split(",")
            .map((lang) => {
                const [tag, q = "1"] = lang.trim().split(";q=");
                // Get both the full tag and base language code
                const baseTag = tag?.split("-")[0]?.toLowerCase();
                return {
                    fullTag: tag?.toLowerCase(),
                    baseTag,
                    q: Number(q),
                };
            })
            .sort((a, b) => b.q - a.q);
        for (const lang of languages) {
            if (isLocale(lang.fullTag)) {
                return lang.fullTag;
            }
            else if (isLocale(lang.baseTag)) {
                return lang.baseTag;
            }
        }
        return undefined;
    }
    return undefined;
}

/**
 * Negotiates a preferred language from navigator.languages.
 *
 * Use the function on the client to extract the locale
 * from the navigator.languages array.
 *
 * @example
 *   const locale = extractLocaleFromNavigator();
 *
 * @type {() => Locale | undefined}
 * @returns {string | undefined}
 */
export function extractLocaleFromNavigator() {
    if (!navigator?.languages?.length) {
        return undefined;
    }
    const languages = navigator.languages.map((lang) => ({
        fullTag: lang.toLowerCase(),
        baseTag: lang.split("-")[0]?.toLowerCase(),
    }));
    for (const lang of languages) {
        if (isLocale(lang.fullTag)) {
            return lang.fullTag;
        }
        else if (isLocale(lang.baseTag)) {
            return lang.baseTag;
        }
    }
    return undefined;
}

/**
 * If extractLocaleFromUrl is called many times on the same page and the URL
 * hasn't changed, we don't need to recompute it every time which can get expensive.
 * We might use a LRU cache if needed, but for now storing only the last result is enough.
 * https://github.com/opral/monorepo/pull/3575#discussion_r2066731243
 */
/** @type {string|undefined} */
let cachedUrl;
/** @type {Locale|undefined} */
let cachedLocale;
/**
 * Extracts the locale from a given URL using native URLPattern.
 *
 * @param {URL|string} url - The full URL from which to extract the locale.
 * @returns {Locale|undefined} The extracted locale, or undefined if no locale is found.
 */
export function extractLocaleFromUrl(url) {
    const urlString = typeof url === "string" ? url : url.href;
    if (cachedUrl === urlString) {
        return cachedLocale;
    }
    let result;
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        result = defaultUrlPatternExtractLocale(url);
    }
    else {
        const urlObj = typeof url === "string" ? new URL(url) : url;
        // Iterate over URL patterns
        for (const element of urlPatterns) {
            for (const [locale, localizedPattern] of element.localized) {
                const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
                if (!match) {
                    continue;
                }
                // Check if the locale is valid
                if (assertIsLocale(locale)) {
                    result = locale;
                    break;
                }
            }
            if (result)
                break;
        }
    }
    cachedUrl = urlString;
    cachedLocale = result;
    return result;
}
/**
 * https://github.com/opral/inlang-paraglide-js/issues/381
 *
 * @param {URL|string} url - The full URL from which to extract the locale.
 * @returns {Locale|undefined} The extracted locale, or undefined if no locale is found.
 */
function defaultUrlPatternExtractLocale(url) {
    const urlObj = new URL(url, "http://dummy.com");
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    if (pathSegments.length > 0) {
        const potentialLocale = pathSegments[0];
        if (isLocale(potentialLocale)) {
            return potentialLocale;
        }
    }
    // everything else has to be the base locale
    return baseLocale;
}

/**
 * Lower-level URL localization function, primarily used in server contexts.
 *
 * This function is designed for server-side usage where you need precise control
 * over URL localization, such as in middleware or request handlers. It works with
 * URL objects and always returns absolute URLs.
 *
 * For client-side UI components, use `localizeHref()` instead, which provides
 * a more convenient API with relative paths and automatic locale detection.
 *
 * @example
 * ```typescript
 * // Server middleware example
 * app.use((req, res, next) => {
 *   const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);
 *   const localized = localizeUrl(url, { locale: "de" });
 *
 *   if (localized.href !== url.href) {
 *     return res.redirect(localized.href);
 *   }
 *   next();
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using with URL patterns
 * const url = new URL("https://example.com/about");
 * localizeUrl(url, { locale: "de" });
 * // => URL("https://example.com/de/about")
 *
 * // Using with domain-based localization
 * const url = new URL("https://example.com/store");
 * localizeUrl(url, { locale: "de" });
 * // => URL("https://de.example.com/store")
 * ```
 *
 * @param {string | URL} url - The URL to localize. If string, must be absolute.
 * @param {Object} [options] - Options for localization
 * @param {string} [options.locale] - Target locale. If not provided, uses getLocale()
 * @returns {URL} The localized URL, always absolute
 */
export function localizeUrl(url, options) {
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        return localizeUrlDefaultPattern(url, options);
    }
    const targetLocale = options?.locale ?? getLocale();
    const urlObj = typeof url === "string" ? new URL(url) : url;
    // Iterate over URL patterns
    for (const element of urlPatterns) {
        // match localized patterns
        for (const [, localizedPattern] of element.localized) {
            const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
            if (!match) {
                continue;
            }
            const targetPattern = element.localized.find(([locale]) => locale === targetLocale)?.[1];
            if (!targetPattern) {
                continue;
            }
            const localizedUrl = fillPattern(targetPattern, aggregateGroups(match), urlObj.origin);
            return fillMissingUrlParts(localizedUrl, match);
        }
        const unlocalizedMatch = new URLPattern(element.pattern, urlObj.href).exec(urlObj.href);
        if (unlocalizedMatch) {
            const targetPattern = element.localized.find(([locale]) => locale === targetLocale)?.[1];
            if (targetPattern) {
                const localizedUrl = fillPattern(targetPattern, aggregateGroups(unlocalizedMatch), urlObj.origin);
                return fillMissingUrlParts(localizedUrl, unlocalizedMatch);
            }
        }
    }
    // If no match found, return the original URL
    return urlObj;
}
/**
 * https://github.com/opral/inlang-paraglide-js/issues/381
 *
 * @param {string | URL} url
 * @param {Object} [options]
 * @param {string} [options.locale]
 * @returns {URL}
 */
function localizeUrlDefaultPattern(url, options) {
    const urlObj = typeof url === "string" ? new URL(url, getUrlOrigin()) : new URL(url);
    const locale = options?.locale ?? getLocale();
    const currentLocale = extractLocaleFromUrl(urlObj);
    // If current locale matches target locale, no change needed
    if (currentLocale === locale) {
        return urlObj;
    }
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    // If current path starts with a locale, remove it
    if (pathSegments.length > 0 && isLocale(pathSegments[0])) {
        pathSegments.shift();
    }
    // For base locale, don't add prefix
    if (locale === baseLocale) {
        urlObj.pathname = "/" + pathSegments.join("/");
    }
    else {
        // For other locales, add prefix
        urlObj.pathname = "/" + locale + "/" + pathSegments.join("/");
    }
    return urlObj;
}
/**
 * Low-level URL de-localization function, primarily used in server contexts.
 *
 * This function is designed for server-side usage where you need precise control
 * over URL de-localization, such as in middleware or request handlers. It works with
 * URL objects and always returns absolute URLs.
 *
 * For client-side UI components, use `deLocalizeHref()` instead, which provides
 * a more convenient API with relative paths.
 *
 * @example
 * ```typescript
 * // Server middleware example
 * app.use((req, res, next) => {
 *   const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);
 *   const baseUrl = deLocalizeUrl(url);
 *
 *   // Store the base URL for later use
 *   req.baseUrl = baseUrl;
 *   next();
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using with URL patterns
 * const url = new URL("https://example.com/de/about");
 * deLocalizeUrl(url); // => URL("https://example.com/about")
 *
 * // Using with domain-based localization
 * const url = new URL("https://de.example.com/store");
 * deLocalizeUrl(url); // => URL("https://example.com/store")
 * ```
 *
 * @param {string | URL} url - The URL to de-localize. If string, must be absolute.
 * @returns {URL} The de-localized URL, always absolute
 */
export function deLocalizeUrl(url) {
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        return deLocalizeUrlDefaultPattern(url);
    }
    const urlObj = typeof url === "string" ? new URL(url) : url;
    // Iterate over URL patterns
    for (const element of urlPatterns) {
        // Iterate over localized versions
        for (const [, localizedPattern] of element.localized) {
            const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
            if (match) {
                // Convert localized URL back to the base pattern
                const groups = aggregateGroups(match);
                const baseUrl = fillPattern(element.pattern, groups, urlObj.origin);
                return fillMissingUrlParts(baseUrl, match);
            }
        }
        // match unlocalized pattern
        const unlocalizedMatch = new URLPattern(element.pattern, urlObj.href).exec(urlObj.href);
        if (unlocalizedMatch) {
            const baseUrl = fillPattern(element.pattern, aggregateGroups(unlocalizedMatch), urlObj.origin);
            return fillMissingUrlParts(baseUrl, unlocalizedMatch);
        }
    }
    // no match found return the original url
    return urlObj;
}
/**
 * De-localizes a URL using the default pattern (/:locale/*)
 * @param {string|URL} url
 * @returns {URL}
 */
function deLocalizeUrlDefaultPattern(url) {
    const urlObj = typeof url === "string" ? new URL(url, getUrlOrigin()) : new URL(url);
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    // If first segment is a locale, remove it
    if (pathSegments.length > 0 && isLocale(pathSegments[0])) {
        urlObj.pathname = "/" + pathSegments.slice(1).join("/");
    }
    return urlObj;
}
/**
 * Takes matches of implicit wildcards in the UrlPattern (when a part is missing
 * it is equal to '*') and adds them back to the result of fillPattern.
 *
 * At least protocol and hostname are required to create a valid URL inside fillPattern.
 *
 * @param {URL} url
 * @param {any} match
 * @returns {URL}
 */
function fillMissingUrlParts(url, match) {
    if (match.protocol.groups["0"]) {
        url.protocol = match.protocol.groups["0"] ?? "";
    }
    if (match.hostname.groups["0"]) {
        url.hostname = match.hostname.groups["0"] ?? "";
    }
    if (match.username.groups["0"]) {
        url.username = match.username.groups["0"] ?? "";
    }
    if (match.password.groups["0"]) {
        url.password = match.password.groups["0"] ?? "";
    }
    if (match.port.groups["0"]) {
        url.port = match.port.groups["0"] ?? "";
    }
    if (match.pathname.groups["0"]) {
        url.pathname = match.pathname.groups["0"] ?? "";
    }
    if (match.search.groups["0"]) {
        url.search = match.search.groups["0"] ?? "";
    }
    if (match.hash.groups["0"]) {
        url.hash = match.hash.groups["0"] ?? "";
    }
    return url;
}
/**
 * Fills a URL pattern with values for named groups, supporting all URLPattern-style modifiers.
 *
 * This function will eventually be replaced by https://github.com/whatwg/urlpattern/issues/73
 *
 * Matches:
 * - :name        -> Simple
 * - :name?       -> Optional
 * - :name+       -> One or more
 * - :name*       -> Zero or more
 * - :name(...)   -> Regex group
 * - {text}       -> Group delimiter
 * - {text}?      -> Optional group delimiter
 *
 * If the value is `null`, the segment is removed.
 *
 * @param {string} pattern - The URL pattern containing named groups.
 * @param {Record<string, string | null | undefined>} values - Object of values for named groups.
 * @param {string} origin - Base URL to use for URL construction.
 * @returns {URL} - The constructed URL with named groups filled.
 */
function fillPattern(pattern, values, origin) {
    // Pre-process the pattern to handle explicit port numbers
    // This detects patterns like "http://localhost:5173" and protects the port number
    // from being interpreted as a parameter
    let processedPattern = pattern.replace(/(https?:\/\/[^:/]+):(\d+)(\/|$)/g, (_, protocol, port, slash) => {
        // Replace ":5173" with "#PORT-5173#" to protect it from parameter replacement
        return `${protocol}#PORT-${port}#${slash}`;
    });
    // First, handle group delimiters with curly braces
    let processedGroupDelimiters = processedPattern.replace(/\{([^{}]*)\}([?+*]?)/g, (_, content, modifier) => {
        // For optional group delimiters
        if (modifier === "?") {
            // For optional groups, we'll include the content
            return content;
        }
        // For non-optional group delimiters, always include the content
        return content;
    });
    // Then handle named groups
    let filled = processedGroupDelimiters.replace(/(\/?):([a-zA-Z0-9_]+)(\([^)]*\))?([?+*]?)/g, (_, slash, name, __, modifier) => {
        const value = values[name];
        if (value === null) {
            // If value is null, remove the entire segment including the preceding slash
            return "";
        }
        if (modifier === "?") {
            // Optional segment
            return value !== undefined ? `${slash}${value}` : "";
        }
        if (modifier === "+" || modifier === "*") {
            // Repeatable segments
            if (value === undefined && modifier === "+") {
                throw new Error(`Missing value for "${name}" (one or more required)`);
            }
            return value ? `${slash}${value}` : "";
        }
        // Simple named group (no modifier)
        if (value === undefined) {
            throw new Error(`Missing value for "${name}"`);
        }
        return `${slash}${value}`;
    });
    // Restore port numbers
    filled = filled.replace(/#PORT-(\d+)#/g, ":$1");
    return new URL(filled, origin);
}
/**
 * Aggregates named groups from various parts of the URLPattern match result.
 *
 *
 * @type {(match: any) => Record<string, string | null | undefined>}
 */
export function aggregateGroups(match) {
    return {
        ...match.hash.groups,
        ...match.hostname.groups,
        ...match.password.groups,
        ...match.pathname.groups,
        ...match.port.groups,
        ...match.protocol.groups,
        ...match.search.groups,
        ...match.username.groups,
    };
}

/**
 * High-level URL localization function optimized for client-side UI usage.
 *
 * This is a convenience wrapper around `localizeUrl()` that provides features
 * needed in UI:
 *
 * - Accepts relative paths (e.g., "/about")
 * - Returns relative paths when possible
 * - Automatically detects current locale if not specified
 * - Handles string input/output instead of URL objects
 *
 * @example
 * ```typescript
 * // In a React/Vue/Svelte component
 * const NavLink = ({ href }) => {
 *   // Automatically uses current locale, keeps path relative
 *   return <a href={localizeHref(href)}>...</a>;
 * };
 *
 * // Examples:
 * localizeHref("/about")
 * // => "/de/about" (if current locale is "de")
 * localizeHref("/store", { locale: "fr" })
 * // => "/fr/store" (explicit locale)
 *
 * // Cross-origin links remain absolute
 * localizeHref("https://other-site.com/about")
 * // => "https://other-site.com/de/about"
 * ```
 *
 * For server-side URL localization (e.g., in middleware), use `localizeUrl()`
 * which provides more precise control over URL handling.
 *
 * @param {string} href - The href to localize (can be relative or absolute)
 * @param {Object} [options] - Options for localization
 * @param {string} [options.locale] - Target locale. If not provided, uses `getLocale()`
 * @returns {string} The localized href, relative if input was relative
 */
export function localizeHref(href, options) {
    const currentLocale = getLocale();
    const locale = options?.locale ?? currentLocale;
    const url = new URL(href, getUrlOrigin());
    const localized = localizeUrl(url, { locale });
    // if the origin is identical and the href is relative,
    // return the relative path
    if (href.startsWith("/") && url.origin === localized.origin) {
        // check for cross origin localization in which case an absolute URL must be returned.
        if (locale !== currentLocale) {
            const localizedCurrentLocale = localizeUrl(url, {
                locale: currentLocale,
            });
            if (localizedCurrentLocale.origin !== localized.origin) {
                return localized.href;
            }
        }
        return localized.pathname + localized.search + localized.hash;
    }
    return localized.href;
}
/**
 * High-level URL de-localization function optimized for client-side UI usage.
 *
 * This is a convenience wrapper around `deLocalizeUrl()` that provides features
 * needed in the UI:
 *
 * - Accepts relative paths (e.g., "/de/about")
 * - Returns relative paths when possible
 * - Handles string input/output instead of URL objects
 *
 * @example
 * ```typescript
 * // In a React/Vue/Svelte component
 * const LocaleSwitcher = ({ href }) => {
 *   // Remove locale prefix before switching
 *   const baseHref = deLocalizeHref(href);
 *   return locales.map(locale =>
 *     <a href={localizeHref(baseHref, { locale })}>
 *       Switch to {locale}
 *     </a>
 *   );
 * };
 *
 * // Examples:
 * deLocalizeHref("/de/about")  // => "/about"
 * deLocalizeHref("/fr/store")  // => "/store"
 *
 * // Cross-origin links remain absolute
 * deLocalizeHref("https://example.com/de/about")
 * // => "https://example.com/about"
 * ```
 *
 * For server-side URL de-localization (e.g., in middleware), use `deLocalizeUrl()`
 * which provides more precise control over URL handling.
 *
 * @param {string} href - The href to de-localize (can be relative or absolute)
 * @returns {string} The de-localized href, relative if input was relative
 * @see deLocalizeUrl - For low-level URL de-localization in server contexts
 */
export function deLocalizeHref(href) {
    const url = new URL(href, getUrlOrigin());
    const deLocalized = deLocalizeUrl(url);
    // If the origin is identical and the href is relative,
    // return the relative path instead of the full URL.
    if (href.startsWith("/") && url.origin === deLocalized.origin) {
        return deLocalized.pathname + deLocalized.search + deLocalized.hash;
    }
    return deLocalized.href;
}

/**
 * @param {string} safeModuleId
 * @param {Locale} locale
 */
export function trackMessageCall(safeModuleId, locale) {
    if (isServer === false)
        return;
    const store = serverAsyncLocalStorage?.getStore();
    if (store) {
        store.messageCalls?.add(`${safeModuleId}:${locale}`);
    }
}

/**
 * Generates a list of localized URLs for all provided URLs.
 *
 * This is useful for SSG (Static Site Generation) and sitemap generation.
 * NextJS and other frameworks use this function for SSG.
 *
 * @example
 * ```typescript
 * const urls = generateStaticLocalizedUrls([
 *   "https://example.com/about",
 *   "https://example.com/blog",
 * ]);
 * urls[0].href // => "https://example.com/about"
 * urls[1].href // => "https://example.com/blog"
 * urls[2].href // => "https://example.com/de/about"
 * urls[3].href // => "https://example.com/de/blog"
 * ...
 * ```
 *
 * @param {(string | URL)[]} urls - List of URLs to generate localized versions for. Can be absolute URLs or paths.
 * @returns {URL[]} List of localized URLs as URL objects
 */
export function generateStaticLocalizedUrls(urls) {
    const localizedUrls = new Set();
    // For default URL pattern, we can optimize the generation
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        for (const urlInput of urls) {
            const url = urlInput instanceof URL
                ? urlInput
                : new URL(urlInput, "http://localhost");
            // Base locale doesn't get a prefix
            localizedUrls.add(url);
            // Other locales get their code as prefix
            for (const locale of locales) {
                if (locale !== baseLocale) {
                    const localizedPath = `/${locale}${url.pathname}${url.search}${url.hash}`;
                    const localizedUrl = new URL(localizedPath, url.origin);
                    localizedUrls.add(localizedUrl);
                }
            }
        }
        return Array.from(localizedUrls);
    }
    // For custom URL patterns, we need to use localizeUrl for each URL and locale
    for (const urlInput of urls) {
        const url = urlInput instanceof URL
            ? urlInput
            : new URL(urlInput, "http://localhost");
        // Try each URL pattern to find one that matches
        let patternFound = false;
        for (const pattern of urlPatterns) {
            try {
                // Try to match the unlocalized pattern
                const unlocalizedMatch = new URLPattern(pattern.pattern, url.href).exec(url.href);
                if (!unlocalizedMatch)
                    continue;
                patternFound = true;
                // Track unique localized URLs to avoid duplicates when patterns are the same
                const seenUrls = new Set();
                // Generate localized URL for each locale
                for (const [locale] of pattern.localized) {
                    try {
                        const localizedUrl = localizeUrl(url, { locale });
                        const urlString = localizedUrl.href;
                        // Only add if we haven't seen this exact URL before
                        if (!seenUrls.has(urlString)) {
                            seenUrls.add(urlString);
                            localizedUrls.add(localizedUrl);
                        }
                    }
                    catch {
                        // Skip if localization fails for this locale
                        continue;
                    }
                }
                break;
            }
            catch {
                // Skip if pattern matching fails
                continue;
            }
        }
        // If no pattern matched, use the URL as is
        if (!patternFound) {
            localizedUrls.add(url);
        }
    }
    return Array.from(localizedUrls);
}

/**
 * @typedef {"cookie" | "baseLocale" | "globalVariable" | "url" | "preferredLanguage" | "localStorage"} BuiltInStrategy
 */
/**
 * @typedef {`custom_${string}`} CustomStrategy
 */
/**
 * @typedef {BuiltInStrategy | CustomStrategy} Strategy
 */
/**
 * @typedef {Array<Strategy>} Strategies
 */
/**
 * @typedef {{ getLocale: (request?: Request) => string | undefined }} CustomServerStrategyHandler
 */
/**
 * @typedef {{ getLocale: () => string | undefined, setLocale: (locale: string) => void }} CustomClientStrategyHandler
 */
export const customServerStrategies = new Map();
export const customClientStrategies = new Map();
/**
 * Checks if the given strategy is a custom strategy.
 *
 * @param {any} strategy The name of the custom strategy to validate.
 * Must be a string that starts with "custom-" followed by alphanumeric characters.
 * @returns {boolean} Returns true if it is a custom strategy, false otherwise.
 */
export function isCustomStrategy(strategy) {
    return typeof strategy === "string" && /^custom-[A-Za-z0-9]+$/.test(strategy);
}
/**
 * Defines a custom strategy that is executed on the server.
 *
 * @param {any} strategy The name of the custom strategy to define. Must follow the pattern `custom-<name>` where
 * `<name>` contains only alphanumeric characters.
 * @param {CustomServerStrategyHandler} handler The handler for the custom strategy, which should implement
 * the method `getLocale`.
 * @returns {void}
 */
export function defineCustomServerStrategy(strategy, handler) {
    if (!isCustomStrategy(strategy)) {
        throw new Error(`Invalid custom strategy: "${strategy}". Must be a custom strategy following the pattern custom-<name>` +
            " where <name> contains only alphanumeric characters.");
    }
    customServerStrategies.set(strategy, handler);
}
/**
 * Defines a custom strategy that is executed on the client.
 *
 * @param {any} strategy The name of the custom strategy to define. Must follow the pattern `custom-<name>` where
 * `<name>` contains only alphanumeric characters.
 * @param {CustomClientStrategyHandler} handler The handler for the custom strategy, which should implement the
 * methods `getLocale` and `setLocale`.
 * @returns {void}
 */
export function defineCustomClientStrategy(strategy, handler) {
    if (!isCustomStrategy(strategy)) {
        throw new Error(`Invalid custom strategy: "${strategy}". Must be a custom strategy following the pattern custom-<name>` +
            " where <name> contains only alphanumeric characters.");
    }
    customClientStrategies.set(strategy, handler);
}

// ------ TYPES ------

/**
 * A locale that is available in the project.
 *
 * @example
 *   setLocale(request.locale as Locale)
 *
 * @typedef {(typeof locales)[number]} Locale
 */




================================================================================
File: paraglide/server.js
================================================================================

// eslint-disable

import * as runtime from "./runtime.js";

/**
 * Server middleware that handles locale-based routing and request processing.
 *
 * This middleware performs several key functions:
 *
 * 1. Determines the locale for the incoming request using configured strategies
 * 2. Handles URL localization and redirects (only for document requests)
 * 3. Maintains locale state using AsyncLocalStorage to prevent request interference
 *
 * When URL strategy is used:
 *
 * - The locale is extracted from the URL for all request types
 * - If URL doesn't match the determined locale, redirects to localized URL (only for document requests)
 * - De-localizes URLs before passing to server (e.g., `/fr/about` ‚Üí `/about`)
 *
 * @template T - The return type of the resolve function
 *
 * @param {Request} request - The incoming request object
 * @param {(args: { request: Request, locale: import("./runtime.js").Locale }) => T | Promise<T>} resolve - Function to handle the request
 * @param {{ onRedirect:(response: Response) => void }} [callbacks] - Callbacks to handle events from middleware
 * @returns {Promise<Response>}
 *
 * @example
 * ```typescript
 * // Basic usage in metaframeworks like NextJS, SvelteKit, Astro, Nuxt, etc.
 * export const handle = async ({ event, resolve }) => {
 *   return serverMiddleware(event.request, ({ request, locale }) => {
 *     // let the framework further resolve the request
 *     return resolve(request);
 *   });
 * };
 * ```
 *
 * @example
 * ```typescript
 * // Usage in a framework like Express JS or Hono
 * app.use(async (req, res, next) => {
 *   const result = await serverMiddleware(req, ({ request, locale }) => {
 *     // If a redirect happens this won't be called
 *     return next(request);
 *   });
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Usage in serverless environments like Cloudflare Workers
 * // ‚ö†Ô∏è WARNING: This should ONLY be used in serverless environments like Cloudflare Workers.
 * // Disabling AsyncLocalStorage in traditional server environments risks cross-request pollution where state from
 * // one request could leak into another concurrent request.
 * export default {
 *   fetch: async (request) => {
 *     return serverMiddleware(
 *       request,
 *       ({ request, locale }) => handleRequest(request, locale),
 *       { disableAsyncLocalStorage: true }
 *     );
 *   }
 * };
 * ```
 */
export async function paraglideMiddleware(request, resolve, callbacks) {
    if (!runtime.disableAsyncLocalStorage && !runtime.serverAsyncLocalStorage) {
        const { AsyncLocalStorage } = await import("async_hooks");
        runtime.overwriteServerAsyncLocalStorage(new AsyncLocalStorage());
    }
    else if (!runtime.serverAsyncLocalStorage) {
        runtime.overwriteServerAsyncLocalStorage(createMockAsyncLocalStorage());
    }
    const locale = runtime.extractLocaleFromRequest(request);
    const origin = new URL(request.url).origin;
    // if the client makes a request to a URL that doesn't match
    // the localizedUrl, redirect the client to the localized URL
    if (request.headers.get("Sec-Fetch-Dest") === "document" &&
        runtime.strategy.includes("url")) {
        const localizedUrl = runtime.localizeUrl(request.url, { locale });
        if (normalizeURL(localizedUrl.href) !== normalizeURL(request.url)) {
            // Create headers object with Vary header if preferredLanguage strategy is used
            /** @type {Record<string, string>} */
            const headers = {};
            if (runtime.strategy.includes("preferredLanguage")) {
                headers["Vary"] = "Accept-Language";
            }
            const response = new Response(null, {
                status: 307,
                headers: {
                    Location: localizedUrl.href,
                    ...headers,
                },
            });
            callbacks?.onRedirect(response);
            return response;
        }
    }
    // If the strategy includes "url", we need to de-localize the URL
    // before passing it to the server middleware.
    //
    // The middleware is responsible for mapping a localized URL to the
    // de-localized URL e.g. `/en/about` to `/about`. Otherwise,
    // the server can't render the correct page.
    const newRequest = runtime.strategy.includes("url")
        ? new Request(runtime.deLocalizeUrl(request.url), request)
        : // need to create a new request object because some metaframeworks (nextjs!) throw otherwise
            // https://github.com/opral/inlang-paraglide-js/issues/411
            new Request(request);
    // the message functions that have been called in this request
    /** @type {Set<string>} */
    const messageCalls = new Set();
    const response = await runtime.serverAsyncLocalStorage?.run({ locale, origin, messageCalls }, () => resolve({ locale, request: newRequest }));
    // Only modify HTML responses
    if (runtime.experimentalMiddlewareLocaleSplitting &&
        response.headers.get("Content-Type")?.includes("html")) {
        const body = await response.text();
        const messages = [];
        // using .values() to avoid polyfilling in older projects. else the following error is thrown
        // Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
        for (const messageCall of Array.from(messageCalls)) {
            const [id, locale] = 
            /** @type {[string, import("./runtime.js").Locale]} */ (messageCall.split(":"));
            messages.push(`${id}: ${compiledBundles[id]?.[locale]}`);
        }
        const script = `<script>globalThis.__paraglide_ssr = { ${messages.join(",")} }</script>`;
        // Insert the script before the closing head tag
        const newBody = body.replace("</head>", `${script}</head>`);
        // Create a new response with the modified body
        // Clone all headers except Content-Length which will be set automatically
        const newHeaders = new Headers(response.headers);
        newHeaders.delete("Content-Length"); // Let the browser calculate the correct length
        return new Response(newBody, {
            status: response.status,
            statusText: response.statusText,
            headers: newHeaders,
        });
    }
    return response;
}
/**
 * Normalize url for comparison.
 * Strips trailing slash
 * @param {string} url
 * @returns {string} normalized url string
 */
function normalizeURL(url) {
    const urlObj = new URL(url);
    // // strip trailing slash from pathname
    urlObj.pathname = urlObj.pathname.replace(/\/$/, "");
    return urlObj.href;
}
/**
 * Creates a mock AsyncLocalStorage implementation for environments where
 * native AsyncLocalStorage is not available or disabled.
 *
 * This mock implementation mimics the behavior of the native AsyncLocalStorage
 * but doesn't require the async_hooks module. It's designed to be used in
 * environments like Cloudflare Workers where AsyncLocalStorage is not available.
 *
 * @returns {import("./runtime.js").ParaglideAsyncLocalStorage}
 */
function createMockAsyncLocalStorage() {
    /** @type {any} */
    let currentStore = undefined;
    return {
        getStore() {
            return currentStore;
        },
        async run(store, callback) {
            currentStore = store;
            try {
                return await callback();
            }
            finally {
                currentStore = undefined;
            }
        },
    };
}
/**
 * The compiled messages for the server middleware.
 *
 * Only populated if `enableMiddlewareOptimizations` is set to `true`.
 *
 * @type {Record<string, Record<import("./runtime.js").Locale, string>>}
 */
const compiledBundles = {};



================================================================================
File: routes/+layout.server.ts
================================================================================

import type { LayoutServerLoad } from './$types';

/**
 * @file Root server layout loader for the Zungri Museum application.
 * @description This function runs on the server for every request and loads
 * essential data that is available to all pages. It primarily deals with
 * session and user authentication state.
 *
 * @param {object} event - The SvelteKit load event.
 * @returns {Promise<object>} An object containing session and user data.
 * This data is merged into the `data` prop available in all layouts and pages.
 */
export const load: LayoutServerLoad = async ({ locals: { session, user } }) => {
    return {
        session,
        user
    };
};


================================================================================
File: routes/+layout.svelte
================================================================================

<!--
/**
 * @file +layout.svelte (Root Layout)
 * @description The main layout for the entire Zungri Museum application.
 * Includes global styles, fonts, authentication setup, and the main
 * page structure with header and footer.
 *
 * Key features:
 * - Global CSS and font imports
 * - Supabase authentication listener initialization
 * - Main site header and footer
 * - Responsive layout structure
 * - Authentication state management
 *
 * @dependencies
 * - $lib/stores/authStore: Authentication state management
 * - $lib/components/Header.svelte: Main navigation header
 * - $lib/components/Footer.svelte: Site footer
 * - ../app.css: Global styles including Tailwind
 *
 * @notes
 * - Initializes auth listener once on client mount
 * - Uses Svelte 5 $effect for lifecycle management
 * - Provides consistent layout for all pages
 * - Handles authentication cleanup on unmount
 */
-->
<script lang="ts">
	import '../app.css'; // Global styles including Tailwind
	import { initializeAuthListener } from '$lib/stores/authStore';
	import Header from '$lib/components/Header.svelte';
	import Footer from '$lib/components/Footer.svelte';

	let { children } = $props();

	// Initialize the Supabase auth listener when the component mounts on the client
	$effect(() => {
		const unsubscribe = initializeAuthListener();
		return () => {
			if (unsubscribe) {
				unsubscribe();
			}
		};
	});
</script>

<!-- Page structure with header, main content, and footer -->
<div class="flex min-h-screen flex-col bg-gray-50">
	<!-- Main site header with navigation -->
	<Header />

	<!-- Main content area -->
	<main class="flex-grow">
		{@render children()}
	</main>

	<!-- Site footer -->
	<Footer />
</div>

<!-- Global styles -->
<style>
	:global(body) {
		font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
		line-height: 1.6;
	}

	:global(h1, h2, h3, h4, h5, h6) {
		font-family: 'Poppins', 'Inter', 'Segoe UI', sans-serif;
		font-weight: 600;
		line-height: 1.3;
	}

	/* Smooth scroll behavior */
	:global(html) {
		scroll-behavior: smooth;
	}

	/* Focus styles for accessibility */
	:global(*:focus) {
		outline: 2px solid #3b82f6;
		outline-offset: 2px;
	}

	/* Custom scrollbar for webkit browsers */
	:global(::-webkit-scrollbar) {
		width: 8px;
	}

	:global(::-webkit-scrollbar-track) {
		background: #f1f5f9;
	}

	:global(::-webkit-scrollbar-thumb) {
		background: #cbd5e1;
		border-radius: 4px;
	}

	:global(::-webkit-scrollbar-thumb:hover) {
		background: #94a3b8;
	}
</style>



================================================================================
File: routes/+layout.ts
================================================================================

// src/routes/+layout.ts
import { dev } from '$app/environment';
import { injectAnalytics } from '@vercel/analytics/sveltekit';

export const load = async ({ fetch, data, depends }) => {
    // Remove Supabase auth dependency since we're not using authentication
    // depends('supabase:auth')

    // Return any data that might be needed across the application
    // In this case, we're just passing through any data from the server
    return {
        // Pass through any data from +layout.server.ts if it exists
        ...data
    };
};

// Keep analytics injection for production monitoring
injectAnalytics({ mode: dev ? 'development' : 'production' });


================================================================================
File: routes/+page.svelte
================================================================================

<!--
/**
 * @file +page.svelte (Homepage)
 * @description Homepage for the Zungri Museum website featuring hero section,
 * featured exhibitions, visitor information, and calls-to-action.
 *
 * Key features:
 * - Hero section with museum introduction and primary CTAs
 * - Featured exhibitions showcase
 * - Visitor information and opening hours
 * - Newsletter signup
 * - Responsive design with engaging visuals
 * - Multilingual content support
 *
 * @dependencies
 * - $lib/paraglide/messages: Internationalization messages
 * - $lib/components/ui/Button.svelte: Reusable button component
 * - lucide-svelte: Icons for various sections
 *
 * @notes
 * - Uses Tailwind CSS for responsive design
 * - Implements museum branding and color scheme
 * - Includes accessibility considerations
 * - Features call-to-action buttons for booking and shopping
 */
-->
<script lang="ts">
	import * as m from '$lib/paraglide/messages';
	import Button from '$lib/components/ui/Button.svelte';
	import {
		Calendar,
		Clock,
		MapPin,
		Users,
		Camera,
		Star,
		ArrowRight,
		ChevronRight
	} from 'lucide-svelte';

	// Featured exhibitions data (this would typically come from a CMS or API)
	const featuredExhibitions = [
		{
			id: 1,
			title: 'Insediamenti Rupestri di Zungri',
			description: 'Scopri gli antichi insediamenti rupestri scavati nella roccia.',
			image: '/images/rupestri.jpeg',
			duration: 'Permanente',
			category: 'Archeologico'
		},
		{
			id: 2,
			title: 'Tradizioni Contadine Calabresi',
			description: 'Un viaggio attraverso le tradizioni agricole della Calabria.',
			image: '/images/storia.jpg',
			duration: 'Marzo - Giugno 2024',
			category: 'Etnografico'
		},
		{
			id: 3,
			title: 'Arte Sacra del Territorio',
			description: 'Tesori artistici delle chiese e dei monasteri locali.',
			image: '/images/arte-sacra.jpg',
			duration: 'Aprile - Settembre 2024',
			category: 'Arte'
		}
	];

	// Quick facts about the museum
	const museumFacts = [
		{
			icon: Clock,
			title: "Aperto tutto l'anno",
			description: 'Mar-Dom 9:00-17:00',
			color: 'text-blue-600'
		},
		{
			icon: Users,
			title: 'Visite guidate',
			description: 'Disponibili su prenotazione',
			color: 'text-green-600'
		},
		{
			icon: Camera,
			title: 'Fotografie benvenute',
			description: 'Cattura i tuoi momenti',
			color: 'text-purple-600'
		},
		{
			icon: MapPin,
			title: 'Nel cuore della Calabria',
			description: 'Facilmente raggiungibile',
			color: 'text-red-600'
		}
	];
</script>

<svelte:head>
	<title>{m.museum_welcomeTitle()} - Museo di Zungri</title>
	<meta name="description" content={m.museum_welcomeSubtitle()} />
	<meta property="og:title" content="{m.museum_welcomeTitle()} - Museo di Zungri" />
	<meta property="og:description" content={m.museum_welcomeSubtitle()} />
	<meta property="og:type" content="website" />
	<meta name="twitter:card" content="summary_large_image" />
</svelte:head>

<!-- Hero Section -->
<section class="relative bg-gradient-to-br from-blue-900 via-blue-800 to-blue-700 text-white">
	<!-- Background pattern/overlay -->
	<div class="absolute inset-0 bg-black/20"></div>
	<div class="absolute inset-0 bg-[url('/images/pattern.jpg')] opacity-10" aria-hidden="true"></div>

	<div class="relative mx-auto max-w-7xl px-4 py-20 sm:px-6 sm:py-28 lg:px-8">
		<div class="grid grid-cols-1 gap-12 lg:grid-cols-2 lg:items-center">
			<!-- Hero Content -->
			<div class="text-center lg:text-left">
				<h1 class="text-4xl font-bold tracking-tight sm:text-5xl lg:text-6xl">
					{m.museum_welcomeTitle()}
				</h1>
				<p class="mt-6 text-xl leading-8 text-blue-100">
					{m.museum_welcomeSubtitle()}
				</p>
				<p class="mt-4 text-lg text-blue-200">
					Esplora la storia millenaria degli insediamenti rupestri e immergiti nelle tradizioni
					della Calabria autentica.
				</p>

				<!-- CTA Buttons -->
				<div class="mt-10 flex flex-col gap-4 sm:flex-row sm:justify-center lg:justify-start">
					<Button
						class="inline-flex items-center justify-center space-x-2 bg-gray-400 text-blue-900 hover:bg-blue-50"
						size="lg"
					>
						<Calendar class="h-5 w-5" />
						<span>{m.navigation_book()}</span>
					</Button>
					<Button
						variant="outline"
						class="inline-flex items-center justify-center space-x-2 border-white text-white hover:bg-white hover:text-blue-900"
						size="lg"
					>
						<span>{m.navigation_visit()}</span>
						<ArrowRight class="h-5 w-5" />
					</Button>
				</div>
			</div>

			<!-- Hero Image/Visual -->
			<div class="relative">
				<div class="aspect-[4/3] overflow-hidden rounded-2xl bg-blue-800/50 shadow-2xl">
					<img
						src="/images/zungri-cave.jpg"
						alt="Insediamenti rupestri di Zungri"
						class="h-full w-full object-cover"
						loading="eager"
					/>
				</div>
				<!-- Floating stats card -->
				<div
					class="absolute -bottom-6 -right-6 rounded-xl bg-white p-6 shadow-lg lg:-bottom-8 lg:-right-8"
				>
					<div class="flex items-center space-x-4">
						<div class="flex -space-x-2">
							<div class="h-8 w-8 rounded-full bg-blue-100"></div>
							<div class="h-8 w-8 rounded-full bg-green-100"></div>
							<div class="h-8 w-8 rounded-full bg-purple-100"></div>
						</div>
						<div>
							<p class="text-sm font-semibold text-gray-900">500+ visitatori/mese</p>
							<div class="flex items-center space-x-1">
								{#each Array(5) as _}
									<Star class="h-4 w-4 fill-yellow-400 text-yellow-400" />
								{/each}
								<span class="text-sm text-gray-600">4.8/5</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<!-- Quick Facts Section -->
<section class="bg-white py-16">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-4">
			{#each museumFacts as fact}
				<div class="text-center">
					<div class="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-gray-50">
						<svelte:component this={fact.icon} class="h-8 w-8 {fact.color}" />
					</div>
					<h3 class="mt-6 text-lg font-semibold text-gray-900">{fact.title}</h3>
					<p class="mt-2 text-gray-600">{fact.description}</p>
				</div>
			{/each}
		</div>
	</div>
</section>

<!-- Featured Exhibitions -->
<section class="bg-gray-50 py-16">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="text-center">
			<h2 class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl lg:text-5xl">
				{m.exhibitions_featured()}
			</h2>
			<p class="mt-4 text-lg text-gray-600">
				Scopri le nostre collezioni permanenti e le esposizioni temporanee
			</p>
		</div>

		<div class="mt-12 grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
			{#each featuredExhibitions as exhibition}
				<article
					class="group overflow-hidden rounded-xl bg-white shadow-sm transition-all duration-300 hover:shadow-lg"
				>
					<div class="aspect-[16/9] overflow-hidden bg-gray-200">
						<img
							src={exhibition.image}
							alt={exhibition.title}
							class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
							loading="lazy"
						/>
					</div>
					<div class="p-6">
						<div class="flex items-center justify-between">
							<span
								class="inline-flex items-center rounded-full bg-blue-100 px-3 py-1 text-xs font-medium text-blue-800"
							>
								{exhibition.category}
							</span>
							<span class="text-sm text-gray-500">{exhibition.duration}</span>
						</div>
						<h3 class="mt-4 text-xl font-semibold text-gray-900 group-hover:text-blue-600">
							{exhibition.title}
						</h3>
						<p class="mt-2 text-gray-600">{exhibition.description}</p>
						<div class="mt-4">
							<a
								href="/exhibitions/{exhibition.id}"
								class="inline-flex items-center space-x-1 text-sm font-medium text-blue-600 hover:text-blue-700"
							>
								<span>{m.exhibitions_viewDetails()}</span>
								<ChevronRight class="h-4 w-4" />
							</a>
						</div>
					</div>
				</article>
			{/each}
		</div>

		<div class="mt-12 text-center">
			<Button
				variant="outline"
				class="inline-flex items-center space-x-2"
				onclick={() => (window.location.href = '/exhibitions')}
			>
				<span>Vedi tutte le mostre</span>
				<ArrowRight class="h-5 w-5" />
			</Button>
		</div>
	</div>
</section>

<!-- Visit Information & CTA -->
<section class="bg-blue-900 py-16 text-white">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="grid grid-cols-1 gap-12 lg:grid-cols-2 lg:items-center">
			<!-- Visit Info -->
			<div>
				<h2 class="text-3xl font-bold tracking-tight sm:text-4xl">
					{m.visit_planYourVisit()}
				</h2>
				<p class="mt-4 text-xl text-blue-100">
					Pianifica la tua visita al Museo di Zungri e vivi un'esperienza indimenticabile tra
					storia, cultura e tradizioni.
				</p>

				<div class="mt-8 space-y-4">
					<div class="flex items-center space-x-3">
						<Clock class="h-6 w-6 text-blue-300" />
						<div>
							<p class="font-semibold">{m.museum_openingHours()}</p>
							<p class="text-blue-200">Marted√¨ - Domenica: 9:00 - 17:00</p>
						</div>
					</div>
					<div class="flex items-center space-x-3">
						<MapPin class="h-6 w-6 text-blue-300" />
						<div>
							<p class="font-semibold">Come Raggiungerci</p>
							<p class="text-blue-200">Via Roma, 123 - 89020 Zungri (VV)</p>
						</div>
					</div>
					<div class="flex items-center space-x-3">
						<Users class="h-6 w-6 text-blue-300" />
						<div>
							<p class="font-semibold">Visite Guidate</p>
							<p class="text-blue-200">Disponibili su prenotazione</p>
						</div>
					</div>
				</div>
			</div>

			<!-- CTA Card -->
			<div class="rounded-2xl bg-white p-8 text-center text-gray-900 shadow-xl">
				<h3 class="text-2xl font-bold">Prenota la Tua Visita</h3>
				<p class="mt-4 text-gray-600">
					Evita le code e assicurati il tuo posto. Prenota online e risparmia tempo.
				</p>

				<div class="mt-6 space-y-4">
					<Button
						class="w-full bg-blue-600 text-white hover:bg-blue-700"
						size="lg"
						onclick={() => (window.location.href = '/book')}
					>
						<Calendar class="mr-2 h-5 w-5" />
						{m.navigation_book()}
					</Button>

					<Button
						variant="outline"
						class="w-full border-gray-300 text-gray-700 hover:bg-gray-50"
						size="lg"
						onclick={() => (window.location.href = '/shop')}
					>
						<span>{m.navigation_shop()}</span>
					</Button>
				</div>

				<p class="mt-4 text-sm text-gray-500">
					Cancellazione gratuita fino a 24 ore prima della visita
				</p>
			</div>
		</div>
	</div>
</section>

<!-- Newsletter Section -->
<section class="bg-gray-900 py-16">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="text-center">
			<h2 class="text-3xl font-bold tracking-tight text-white sm:text-4xl">Resta Aggiornato</h2>
			<p class="mt-4 text-lg text-gray-300">
				Iscriviti alla nostra newsletter per ricevere aggiornamenti su eventi, mostre e novit√† del
				museo.
			</p>
		</div>

		<div class="mx-auto mt-8 max-w-md">
			<div class="flex rounded-md shadow-sm">
				<input
					type="email"
					placeholder="La tua email"
					class="block w-full rounded-l-md border-0 bg-white px-4 py-3 text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-blue-500"
				/>
				<Button
					class="rounded-l-none bg-blue-600 px-6 text-white hover:bg-blue-700"
					onclick={() => console.log('Newsletter signup')}
				>
					Iscriviti
				</Button>
			</div>
			<p class="mt-3 text-center text-sm text-gray-400">
				Rispettiamo la tua privacy. Cancellazione facile in qualsiasi momento.
			</p>
		</div>
	</div>
</section>



================================================================================
File: routes/about/+page.server.ts
================================================================================




================================================================================
File: routes/about/+page.svelte
================================================================================

<!-- routes/about/+page.svelte -->
<!--
/**
* @file +page.svelte (About Page - Zungri Caves Museum)
* @description Rich, visually engaging About Us page for the Zungri Museum
* showcasing the history and significance of the cave settlement.
* Updated to use the South Italian Museum color palette and design system.
*
* Key features:
* - Hero section with Mediterranean-inspired visuals
* - Timeline of historical periods with terracotta accents
* - Interactive statistics with olive and stone tones
* - Image gallery sections with warm cream backgrounds
* - Enhanced typography using Italian-inspired fonts
* - Responsive design with cultural animations
*
* @dependencies
* - lucide-svelte: For icons
* - Tailwind CSS: For styling with custom South Italian palette
*/
-->
<script lang="ts">
	import {
		Landmark,
		Clock,
		Users,
		Mountain,
		Camera,
		BookOpen,
		MapPin,
		Calendar,
		Layers,
		Home
	} from 'lucide-svelte';

	// Static content - in production this would come from the server
	const pageTitle = 'Chi Siamo - Museo delle Grotte di Zungri';
	const heroDescription = 'Un viaggio nel cuore della cultura rupestre calabrese';

	const stats = [
		{ number: '100+', label: 'Case-Grotta', icon: Home },
		{ number: '3.000', label: 'Metri Quadrati', icon: Layers },
		{ number: '3.000', label: 'Manufatti', icon: BookOpen },
		{ number: 'IX-XIV', label: 'Secolo', icon: Calendar }
	];

	const timeline = [
		{
			period: 'IX-XIV Secolo',
			title: 'Insediamento Rupestre',
			description: 'Costruzione delle prime case-grotta scavate nella roccia arenaria',
			color: 'bg-terracotta-500',
			dotColor: 'bg-terracotta-600'
		},
		{
			period: 'Periodo Medievale',
			title: 'Comunit√† Italo-Greca',
			description: 'Insediamento di comunit√† monastiche basiliane e rifugiati',
			color: 'bg-primary-500',
			dotColor: 'bg-primary-600'
		},
		{
			period: 'Seconda Guerra Mondiale',
			title: 'Rifugi di Guerra',
			description: 'Le grotte vengono utilizzate come rifugi dai bombardamenti',
			color: 'bg-secondary-500',
			dotColor: 'bg-secondary-600'
		},
		{
			period: 'Oggi',
			title: 'Patrimonio Museale',
			description: 'Trasformazione in museo e sito turistico di interesse culturale',
			color: 'bg-olive-500',
			dotColor: 'bg-olive-600'
		}
	];

	const features = [
		{
			title: 'Architettura Rupestre',
			description:
				"Volte a cupola con fori centrali per l'aerazione e nicchie scavate nelle pareti",
			icon: Mountain,
			bgColor: 'bg-terracotta-50',
			iconColor: 'bg-gradient-to-br from-terracotta-500 to-terracotta-600'
		},
		{
			title: 'Rete di Collegamento',
			description: 'Scale e sentieri intagliati nella roccia collegano le diverse aree',
			icon: MapPin,
			bgColor: 'bg-primary-50',
			iconColor: 'bg-gradient-to-br from-primary-500 to-primary-600'
		},
		{
			title: 'Variet√† Strutturale',
			description: 'Da ambienti monocellulari a complessi abitativi su pi√π livelli',
			icon: Layers,
			bgColor: 'bg-secondary-50',
			iconColor: 'bg-gradient-to-br from-secondary-500 to-secondary-600'
		},
		{
			title: 'Conservazione Ottimale',
			description: "Condizioni naturali ideali: calde d'inverno e fresche d'estate",
			icon: Clock,
			bgColor: 'bg-olive-50',
			iconColor: 'bg-gradient-to-br from-olive-500 to-olive-600'
		}
	];
</script>

<svelte:head>
	<title>{pageTitle} - Museo di Zungri</title>
	<meta
		name="description"
		content="Scopri la storia millenaria e il patrimonio unico del Museo delle Grotte di Zungri, la 'Citt√† di Pietra' in Calabria. Esplora insediamenti rupestri e la cultura contadina."
	/>
</svelte:head>

<!-- Hero Section -->
<section
	class="from-cream-50 via-background-DEFAULT to-secondary-50 relative bg-gradient-to-br py-16 sm:py-24"
>
	<div
		class="absolute inset-0 opacity-20"
		style="background-image: url('data:image/svg+xml,%3Csvg width=&quot;60&quot; height=&quot;60&quot; viewBox=&quot;0 0 60 60&quot; xmlns=&quot;http://www.w3.org/2000/svg&quot;%3E%3Cg fill=&quot;none&quot; fill-rule=&quot;evenodd&quot;%3E%3Cg fill=&quot;%23cd853f&quot; fill-opacity=&quot;0.08&quot;%3E%3Cpath d=&quot;M36 34v-4h-2v4h-4v2h4v4h2v-4h4v-2h-4zm0-30V0h-2v4h-4v2h4v4h2V6h4V4h-4zM6 34v-4H4v4H0v2h4v4h2v-4h4v-2H6zM6 4V0H4v4H0v2h4v4h2V6h4V4H6z&quot;/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')"
	></div>

	<div class="relative mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="text-center">
			<div
				class="from-terracotta-500 to-terracotta-600 shadow-warm animate-float mx-auto mb-8 flex h-20 w-20 items-center justify-center rounded-full bg-gradient-to-br"
			>
				<Landmark class="h-10 w-10 text-white" />
			</div>

			<h1
				class="font-display mb-6 text-4xl font-bold tracking-tight text-neutral-900 sm:text-6xl lg:text-7xl"
			>
				Museo delle <span
					class="from-terracotta-600 to-terracotta-500 bg-gradient-to-r bg-clip-text text-transparent"
					>Grotte di Zungri</span
				>
			</h1>

			<p class="font-body mx-auto mb-12 max-w-2xl text-xl leading-relaxed text-neutral-600">
				{heroDescription}
			</p>

			<div
				class="bg-background-DEFAULT/90 shadow-soft backdrop-blur-xs inline-flex items-center gap-2 rounded-full px-6 py-3 text-sm font-medium text-neutral-700"
			>
				<MapPin class="text-terracotta-600 h-4 w-4" />
				Zungri, Provincia di Vibo Valentia, Calabria
			</div>
		</div>
	</div>
</section>

<!-- Stats Section -->
<section class="bg-background-DEFAULT py-16">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="grid grid-cols-2 gap-8 lg:grid-cols-4">
			{#each stats as stat, index}
				<div class="group text-center transition-transform duration-300 hover:scale-105">
					<div
						class="rounded-artifact shadow-medium group-hover:shadow-exhibit mx-auto mb-4 flex h-12 w-12 items-center justify-center text-white transition-shadow
						{index === 0
							? 'from-terracotta-500 to-terracotta-600 bg-gradient-to-br'
							: index === 1
								? 'from-primary-500 to-primary-600 bg-gradient-to-br'
								: index === 2
									? 'from-secondary-500 to-secondary-600 bg-gradient-to-br'
									: 'from-olive-500 to-olive-600 bg-gradient-to-br'}"
					>
						<svelte:component this={stat.icon} class="h-6 w-6" />
					</div>
					<div class="font-heading text-3xl font-bold text-neutral-900">{stat.number}</div>
					<div class="font-body text-sm text-neutral-600">{stat.label}</div>
				</div>
			{/each}
		</div>
	</div>
</section>

<!-- Main Content -->
<section class="bg-background-secondary py-16">
	<div class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
		<div class="mb-16 text-center">
			<h2 class="font-display mb-4 text-3xl font-bold text-neutral-900">
				Un Tesoro Nascosto nel Cuore della Calabria
			</h2>
			<p class="font-body mx-auto max-w-2xl text-lg text-neutral-600">
				Benvenuti al Museo delle Grotte di Zungri, un luogo dove la storia e la natura si fondono in
				un'esperienza indimenticabile.
			</p>
		</div>

		<!-- Features Grid -->
		<div class="mb-16 grid gap-8 md:grid-cols-2">
			{#each features as feature}
				<div
					class="rounded-card bg-background-DEFAULT shadow-soft hover:shadow-medium animate-fade-in group p-8 transition-all duration-300"
				>
					<div
						class="rounded-artifact mb-4 flex h-12 w-12 items-center justify-center {feature.iconColor} shadow-soft group-hover:shadow-medium text-white transition-shadow"
					>
						<svelte:component this={feature.icon} class="h-6 w-6" />
					</div>
					<h3 class="font-heading mb-3 text-xl font-semibold text-neutral-900">{feature.title}</h3>
					<p class="font-body text-neutral-600">{feature.description}</p>
				</div>
			{/each}
		</div>

		<!-- Detailed Content -->
		<div class="prose prose-lg font-body mx-auto max-w-none text-neutral-700">
			<div class="rounded-card bg-background-DEFAULT shadow-soft p-8">
				<h3 class="font-display mb-6 text-2xl font-bold text-neutral-900">
					L'Insediamento Rupestre: Un Viaggio nel Tempo
				</h3>

				<p class="mb-6 text-lg leading-relaxed">
					Esteso su circa <strong class="text-terracotta-600">3.000 metri quadrati</strong>,
					l'insediamento si compone di circa
					<strong class="text-terracotta-600">100 case-grotta</strong>, interamente scavate nella
					roccia arenaria. La loro datazione √® stimata tra il
					<strong class="text-terracotta-600">IX e il XIV secolo</strong>, con alcune ricerche che
					suggeriscono un'origine ancora pi√π antica.
				</p>

				<div class="rounded-artifact border-terracotta-500 bg-terracotta-50 mb-8 border-l-4 p-6">
					<p class="text-terracotta-900 font-medium">
						<span class="font-bold">Curiosit√†:</span> Le strutture variano da ambienti monocellulari
						a complessi abitativi su pi√π livelli, presentando forme circolari, quadrate o rettangolari.
						Caratteristiche distintive includono volte a cupola con fori centrali per l'aerazione, nicchie
						scavate nelle pareti e persino incavi per letti.
					</p>
				</div>

				<h3 class="font-display mb-6 text-2xl font-bold text-neutral-900">
					Vita e Misteri degli "Sbariati"
				</h3>

				<p class="mb-6 text-lg leading-relaxed">
					La ricerca storica suggerisce che queste grotte fossero abitate da comunit√†, forse di
					origine <strong class="text-primary-600">italo-greca</strong>, o da gruppi in fuga in
					cerca di rifugio. Il nome stesso, "Sbariati" o "Sbandati", allude a una comunit√† di
					sfollati o rifugiati.
				</p>

				<div class="rounded-artifact border-primary-500 bg-primary-50 mb-8 border-l-4 p-6">
					<p class="text-primary-900 font-medium">
						<span class="font-bold">Connessioni Storiche:</span> Le similitudini con siti rupestri in
						Cappadocia (Turchia) e Matera (Italia) rafforzano l'ipotesi di una forte influenza monastica
						basiliana.
					</p>
				</div>

				<h3 class="font-display mb-6 text-2xl font-bold text-neutral-900">
					Il Museo della Civilt√† Rupestre e Contadina
				</h3>

				<p class="mb-6 text-lg leading-relaxed">
					All'ingresso dell'Insediamento Rupestre si trova il <strong class="text-secondary-600"
						>Museo della Civilt√† Rupestre e Contadina di Zungri</strong
					>, ospitato in un antico frantoio. Questo museo conserva circa
					<strong class="text-secondary-600">3.000 manufatti</strong> che offrono uno spaccato autentico
					della vita quotidiana.
				</p>

				<div class="rounded-artifact border-olive-500 bg-olive-50 mb-8 border-l-4 p-6">
					<p class="text-olive-900 font-medium">
						<span class="font-bold">Cinema e Turismo:</span> La bellezza del luogo ha attratto il mondo
						del cinema, trasformando le Grotte di Zungri in una suggestiva Gerusalemme per le riprese
						del film "Il monaco che vinse l'Apocalisse" nel 2022.
					</p>
				</div>
			</div>
		</div>
	</div>
</section>

<!-- Timeline Section -->
<section class="bg-background-DEFAULT py-16">
	<div class="mx-auto max-w-6xl px-4 sm:px-6 lg:px-8">
		<div class="mb-12 text-center">
			<h2 class="font-display mb-4 text-3xl font-bold text-neutral-900">
				Storia attraverso i Secoli
			</h2>
			<p class="font-body mx-auto max-w-2xl text-lg text-neutral-600">
				Un viaggio cronologico attraverso le epoche che hanno segnato la vita delle grotte
			</p>
		</div>

		<div class="relative">
			<!-- Timeline line -->
			<div
				class="absolute left-1/2 top-0 h-full w-0.5 -translate-x-1/2 transform bg-neutral-200"
			></div>

			{#each timeline as item, index}
				<div
					class="animate-slide-up relative mb-12 flex items-center {index % 2 === 0
						? 'justify-start'
						: 'justify-end'}"
				>
					<div class="w-5/12 {index % 2 === 0 ? 'pr-8 text-right' : 'pl-8 text-left'}">
						<div
							class="rounded-card bg-background-secondary shadow-soft hover:shadow-medium p-6 transition-all duration-300"
						>
							<div class="font-body mb-2 text-sm font-medium text-neutral-500">{item.period}</div>
							<h3 class="font-heading mb-3 text-xl font-bold text-neutral-900">{item.title}</h3>
							<p class="font-body text-neutral-600">{item.description}</p>
						</div>
					</div>

					<!-- Timeline dot -->
					<div
						class="absolute left-1/2 flex h-8 w-8 items-center justify-center rounded-full {item.dotColor} shadow-medium -translate-x-1/2 transform"
					>
						<Clock class="h-4 w-4 text-white" />
					</div>
				</div>
			{/each}
		</div>
	</div>
</section>

<!-- Call to Action -->
<section class="from-terracotta-600 to-terracotta-500 bg-gradient-to-r py-16">
	<div class="mx-auto max-w-4xl px-4 text-center sm:px-6 lg:px-8">
		<h2 class="font-display mb-4 text-3xl font-bold text-white">Scopri il Nostro Patrimonio</h2>
		<p class="font-body text-terracotta-100 mb-8 text-xl">
			Invitiamo tutti i visitatori a scoprire questo gioiello architettonico e storico,
			un'esperienza che combina la ricchezza della storia, l'ingegnosit√† umana e la bellezza
			mozzafiato del paesaggio calabrese.
		</p>

		<div class="flex flex-col gap-4 sm:flex-row sm:justify-center sm:gap-6">
			<div class="font-body text-terracotta-100 flex items-center gap-2">
				<Camera class="h-5 w-5" />
				<span>Visite Guidate Disponibili</span>
			</div>
			<div class="font-body text-terracotta-100 flex items-center gap-2">
				<BookOpen class="h-5 w-5" />
				<span>Percorso Esplorabile</span>
			</div>
			<div class="font-body text-terracotta-100 flex items-center gap-2">
				<Users class="h-5 w-5" />
				<span>Adatto a Tutte le Et√†</span>
			</div>
		</div>
	</div>
</section>



================================================================================
File: routes/auth/+layout.svelte
================================================================================

<!--
/**
 * @file +layout.svelte
 * @description Enhanced layout for authentication pages with smooth transitions,
 * improved accessibility, responsive design, and better error handling.
 *
 * @features
 * - Elegant loading states with fade transitions
 * - Responsive design with proper spacing on all devices
 * - Improved accessibility with aria attributes
 * - Proper error handling with user feedback
 * - Dynamic navigation links based on current route
 * - Subtle animations for better user experience
 */
-->
<script lang="ts">
	import { fade, fly } from 'svelte/transition';
	import { sessionStore, authReady } from '$lib/stores/authStore';
	import { goto } from '$app/navigation';
	import { page } from '$app/state';

	let { children } = $props();

	let authError: string | null = $state(null);
	let isRedirecting = $state(false);

	// Auth page config
	const authRoutes = [
		{
			path: '/auth/login',
			links: [
				{
					label: 'Sign up',
					href: '/auth/signup',
					prompt: "Don't have an account?"
				},
				{
					label: 'Forgot your password?',
					href: '/auth/reset-password',
					prompt: '',
					size: 'sm'
				}
			]
		},
		{
			path: '/auth/signup',
			links: [
				{
					label: 'Log in',
					href: '/auth/login',
					prompt: 'Already have an account?'
				}
			]
		},
		{
			path: '/auth/reset-password',
			links: [
				{
					label: 'Back to login',
					href: '/auth/login',
					prompt: 'Remember your password?'
				}
			]
		}
		// Add new auth routes here, eg: verify-email, magic-link, etc
	];

	// Get current route info
	let currentPath = $derived(page.url.pathname);
	let currentAuthRoute = $derived(authRoutes.find((r) => r.path === currentPath));

	$effect(() => {
		let unsubAuthReady: (() => void) | undefined;
		let unsubSession: (() => void) | undefined;

		unsubAuthReady = authReady.subscribe((ready) => {
			if (ready) {
				unsubSession = sessionStore.subscribe((session) => {
					// Only try redirect if there is a session and we aren't already on /dashboard
					if (session && page.url.pathname !== '/dashboard') {
						isRedirecting = true;
						goto('/dashboard', { replaceState: true }).catch((error) => {
							isRedirecting = false;
							authError = 'Navigation error. Please try again.';
							console.error('[AuthLayout] Navigation error:', error);
						});
					}
				});
			}
		});

		return () => {
			unsubAuthReady && unsubAuthReady();
			unsubSession && unsubSession();
		};
	});
</script>

<div
	class="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-gray-900 to-gray-800 p-4 text-white sm:p-6"
>
	<div class="w-full max-w-md" in:fade={{ duration: 300, delay: 150 }}>
		<!-- Logo and branding -->
		<div class="mb-8 text-center">
			<a href="/" class="group inline-flex items-center" aria-label="Go to homepage">
				<span
					class="bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-3xl font-bold text-transparent transition-all duration-300 group-hover:from-blue-300 group-hover:to-blue-500"
				>
					Project NAME
				</span>
			</a>
			<p class="mt-2 text-sm text-gray-400">Your business connection platform</p>
		</div>
		<div
			class="overflow-hidden rounded-xl border border-gray-700 bg-gray-800 shadow-2xl"
			in:fly={{ y: 20, duration: 400, delay: 200 }}
		>
			<!-- State management -->
			{#if !$authReady}
				<div class="p-8 text-center" aria-live="polite">
					<div class="mb-4 flex justify-center">
						<div
							class="h-8 w-8 animate-spin rounded-full border-4 border-gray-600 border-t-blue-500"
						></div>
					</div>
					<p class="text-gray-300">Preparing your authentication...</p>
				</div>
			{:else if isRedirecting}
				<div class="p-8 text-center" aria-live="polite">
					<div class="mb-4 flex justify-center">
						<div
							class="h-8 w-8 animate-spin rounded-full border-4 border-gray-600 border-t-blue-500"
						></div>
					</div>
					<p class="text-gray-300">Redirecting to your dashboard...</p>
				</div>
			{:else if authError}
				<div class="bg-red-900/30 p-6 text-center" role="alert" aria-live="assertive">
					<p class="text-red-200">{authError}</p>
					<button
						class="mt-2 rounded-md bg-red-800 px-4 py-1 text-sm transition-colors hover:bg-red-700"
						on:click={() => (authError = null)}
					>
						Dismiss
					</button>
				</div>
				<div class="p-6 sm:p-8">
					{@render children()}
				</div>
			{:else}
				<div class="p-6 sm:p-8">
					{@render children()}
				</div>
			{/if}
		</div>
		<!-- Dynamic navigation links -->
		<div class="mt-6 text-center" in:fade={{ duration: 300, delay: 400 }}>
			{#if currentAuthRoute}
				{#each currentAuthRoute.links as l}
					{#if l.prompt}
						<p class="text-gray-300">
							{l.prompt}
							<a
								href={l.href}
								class={`font-medium text-blue-400 underline-offset-2 transition-colors hover:text-blue-300 hover:underline ${l.size === 'sm' ? 'text-sm' : ''}`}
							>
								{l.label}
							</a>
						</p>
					{:else}
						<p class="text-sm text-gray-400">
							<a href={l.href} class="transition-colors hover:text-gray-300">
								{l.label}
							</a>
						</p>
					{/if}
				{/each}
			{/if}
			<!-- Footer info -->
			<div class="mt-8 text-xs text-gray-500">
				<p>
					¬© {new Date().getFullYear()} B2B Deals, Inc. All rights reserved.
				</p>
				<div class="mt-2 flex justify-center space-x-4">
					<a href="/privacy" class="transition-colors hover:text-gray-400">Privacy</a>
					<a href="/terms" class="transition-colors hover:text-gray-400">Terms</a>
					<a href="/help" class="transition-colors hover:text-gray-400">Help</a>
				</div>
			</div>
		</div>
	</div>
</div>



================================================================================
File: routes/auth/login/+page.svelte
================================================================================

<!--
/**
 * @file +page.svelte (Login Page)
 * @description Allows users to log in to the application using their email and password.
 *
 * Key features:
 * - Email and password input fields.
 * - Form submission handling.
 * - Interaction with Supabase for authentication.
 * - Display of loading states and error messages.
 * - Redirection to the dashboard upon successful login.
 *
 * @dependencies
 * - $app/navigation: For programmatic navigation (goto).
 * - $lib/utils/supabaseClient: The Supabase client instance.
 * - $lib/components/ui/Input.svelte: Reusable input component.
 * - $lib/components/ui/Button.svelte: Reusable button component.
 * - $lib/components/ui/Alert.svelte: Reusable alert component.
 * - $lib/stores/session: For checking auth state (optional here, primarily for layout).
 *
 * @notes
 * - Uses Svelte 5 runes ($state) for managing component state.
 * - Implements client-side authentication logic.
 */
-->
<script lang="ts">
	import { goto } from '$app/navigation';
	import { supabase } from '$lib/utils/supabaseClient'; // Assuming this path from existing code
	import Input from '$lib/components/ui/Input.svelte';
	import Button from '$lib/components/ui/Button.svelte';
	import Alert from '$lib/components/ui/Alert.svelte';

	let email = $state('');
	let password = $state('');
	let loading = $state(false);
	let errorMessage = $state<string | null>(null);

	/**
	 * Handles the login form submission.
	 * Attempts to sign in the user with Supabase Auth.
	 * Manages loading states and displays errors if any.
	 * Redirects to '/dashboard' on successful login.
	 */
	async function handleLogin() {
		loading = true;
		errorMessage = null;

		try {
			const { error } = await supabase.auth.signInWithPassword({
				email: email,
				password: password
			});

			if (error) {
				console.error('Login error:', error);
				errorMessage = error.message;
			} else {
				// Supabase onAuthStateChange listener in session.ts will handle sessionStore update.
				// Redirect to dashboard.
				console.log('Login successful, redirecting to /dashboard...');
				goto('/dashboard');
			}
		} catch (err) {
			console.error('Unexpected error during login:', err);
			errorMessage = 'An unexpected error occurred. Please try again.';
		} finally {
			loading = false;
		}
	}
</script>

<h1 class="mb-6 text-center text-2xl font-semibold text-white">Log In</h1>

{#if errorMessage}
	<Alert type="error" message={errorMessage} class="mb-4" />
{/if}

<form on:submit|preventDefault={handleLogin} class="space-y-5">
	<Input
		type="email"
		id="email"
		bind:value={email}
		placeholder="you@example.com"
		required
		disabled={loading}
	/>

	<Input
		type="password"
		id="password"
		bind:value={password}
		placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
		required
		disabled={loading}
	/>

	<div>
		<a href="/auth/reset-password" class="text-sm text-blue-400 hover:underline">Forgot password?</a
		>
	</div>

	<!-- Login page -->
	<Button type="submit" disabled={loading} {loading} class="w-full" variant="primary" size="lg">
		Sign In
	</Button>
</form>



================================================================================
File: routes/auth/reset-password/+page.svelte
================================================================================

<!-- src/routes/reset-password/+page.svelte -->
<script>
	import { supabase } from '$lib/utils/supabaseClient'; // Assuming this path from existing code
	import { goto } from '$app/navigation';

	let email = '';
	let loading = false;
	let message = '';
	let error = '';

	async function handleResetRequest() {
		if (!email) {
			error = 'Please enter your email address';
			return;
		}

		loading = true;
		error = '';
		message = '';

		try {
			const { error: resetError } = await supabase.auth.resetPasswordForEmail(email, {
				redirectTo: `${window.location.origin}/update-password`
			});

			if (resetError) {
				error = resetError.message;
			} else {
				message = 'Check your email for a password reset link!';
				email = ''; // Clear the form
			}
		} catch (err) {
			error = 'An unexpected error occurred. Please try again.';
			console.error('Reset password error:', err);
		} finally {
			loading = false;
		}
	}

	function handleSubmit(event) {
		event.preventDefault();
		handleResetRequest();
	}
</script>

<svelte:head>
	<title>Reset Password</title>
</svelte:head>

<div class="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
	<div class="w-full max-w-md space-y-8">
		<div>
			<h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Reset your password</h2>
			<p class="mt-2 text-center text-sm text-gray-600">
				Enter your email address and we'll send you a link to reset your password.
			</p>
		</div>

		<form class="mt-8 space-y-6" on:submit={handleSubmit}>
			<div>
				<label for="email" class="sr-only">Email address</label>
				<input
					id="email"
					name="email"
					type="email"
					required
					bind:value={email}
					disabled={loading}
					class="relative block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
					placeholder="Email address"
				/>
			</div>

			{#if error}
				<div class="rounded-md bg-red-50 p-4">
					<div class="text-sm text-red-700">{error}</div>
				</div>
			{/if}

			{#if message}
				<div class="rounded-md bg-green-50 p-4">
					<div class="text-sm text-green-700">{message}</div>
				</div>
			{/if}

			<div>
				<button
					type="submit"
					disabled={loading}
					class="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
				>
					{#if loading}
						<svg
							class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
						>
							<circle
								class="opacity-25"
								cx="12"
								cy="12"
								r="10"
								stroke="currentColor"
								stroke-width="4"
							></circle>
							<path
								class="opacity-75"
								fill="currentColor"
								d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
							></path>
						</svg>
						Sending...
					{:else}
						Send reset link
					{/if}
				</button>
			</div>

			<div class="text-center">
				<a href="/login" class="font-medium text-indigo-600 hover:text-indigo-500">
					Back to sign in
				</a>
			</div>
		</form>
	</div>
</div>

<style>
	/* Add any custom styles here if needed */
</style>



================================================================================
File: routes/auth/signup/+page.server.ts
================================================================================

/**
 * @file Signup Page Server Load & Actions (signup/+page.server.ts)
 * @description Handles server-side logic for the signup page:
 * - Redirects authenticated users.
 * - Initializes the signup form using Superforms.
 * - Handles form submission for user registration via Supabase Auth.
 * - Provides comprehensive error handling for Supabase authentication errors.
 *
 * @dependencies
 * - @sveltejs/kit: Provides `Actions`, `fail`, `redirect` types and functions.
 * - App.Locals: Access to `supabase` client and `getSession` initialized in hooks.
 * - sveltekit-superforms: Provides `superValidate`, `message`, `setError`.
 * - sveltekit-superforms/adapters: Provides `zod` adapter.
 * - ./schema: Contains the Zod schema for signup form validation.
 */

import { fail, redirect } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';
import { message, superValidate, setError } from 'sveltekit-superforms';
import { zod } from 'sveltekit-superforms/adapters';
import { formSchema } from './schema';

export const load: PageServerLoad = async ({ locals: { getSession }, url }) => {
    const session = await getSession();
    // If user is already logged in, redirect them
    if (session) {
        console.log('[Signup Page Load] User already logged in, redirecting to dashboard.');
        // Use 'next' param if present, otherwise default to dashboard
        const redirectTo = url.searchParams.get('next') ?? '/dashboard';
        throw redirect(303, redirectTo);
    }

    // Initialize the signup form on page load
    return { form: await superValidate(zod(formSchema)) };
};

// Error patterns that indicate duplicate email
const duplicateEmailPatterns = [
    'already registered',
    'already exists',
    'A user with this email address has already been registered',
    'User already registered',
    'This email is already in use',
    'duplicate key value violates unique constraint',
    'unique constraint',
    'unique violation',
    'email address is already in use',
    'Email already in use'
];

// Helper function to check if an error message indicates a duplicate email
const isDuplicateEmailError = (message) => {
    if (!message) return false;
    return duplicateEmailPatterns.some(pattern =>
        message.toLowerCase().includes(pattern.toLowerCase()));
};

export const actions: Actions = {
    /**
     * Default action for handling email/password signup form submission.
     */
    default: async ({ request, locals: { supabase }, url }) => {
        console.log('[Signup Action] Received POST request.');

        try {
            // Validate the form data against the Zod schema
            const form = await superValidate(request, zod(formSchema));
            console.log('[Signup Action] Form validation result:', form);

            // Basic server-side check if validation failed (client-side should catch most)
            if (!form.valid) {
                console.log('[Signup Action] Form invalid.');
                // Return validation errors
                return fail(400, { form });
            }

            // Extract form data
            const { email, password, fullName } = form.data;

            console.log(`[Signup Action] Attempting signup for: ${email}`);
            const { data: signupData, error: signupError } = await supabase.auth.signUp({
                email,
                password,
                options: {
                    // Store optional data like full name in user_metadata
                    data: {
                        full_name: fullName || '' // Use provided name or empty string
                    },
                    // Use current URL as base for redirect
                    emailRedirectTo: `${url.origin}/auth/callback`
                }
            });



            // Handle Supabase Signup Errors
            if (signupError) {
                console.error('[Signup Action] Supabase signup error:', signupError);

                // Check specifically for duplicate email errors
                if (isDuplicateEmailError(signupError.message)) {
                    console.log('[Signup Action] Detected duplicate email error');
                    return setError(form, 'email', 'An account with this email already exists. Try logging in.');
                }

                // Handle password errors
                if (signupError.message.toLowerCase().includes('password')) {
                    return setError(form, 'password', signupError.message);
                }

                // Generic error for other cases
                return message(form, `Registration error: ${signupError.message}`, {
                    status: signupError.status || 500
                });
            }

            // --- Handle Signup Success ---
            // Check if email confirmation is required
            if (signupData.user && !signupData.session) {
                console.log('[Signup Action] Signup successful, email confirmation required.');
                return message(form, 'Signup successful! Please check your email to confirm your account.', { status: 200 });
            }

            // Handle case where signup might auto-verify
            if (signupData.session) {
                console.log('[Signup Action] Signup successful and session created. Redirecting...');
                throw redirect(303, '/dashboard');
            }

            // Fallback success message
            console.log('[Signup Action] Signup process completed.');
            return message(form, 'Signup process completed. Please check your email.', { status: 200 });

        } catch (error) {
            // Catch any unexpected errors not returned by Supabase API
            console.error('[Signup Action] Unexpected error:', error);

            // Create a new form to attach the error
            const form = await superValidate(zod(formSchema));

            // Check if it's a known error type or just show generic message
            const errorMessage = error instanceof Error
                ? error.message
                : 'An unexpected error occurred';

            return message(form, `An unexpected error occurred. Please try again later. (${errorMessage})`, { status: 500 });
        }
    }
};


================================================================================
File: routes/auth/signup/+page.svelte
================================================================================

<!--
/**
 * @file Signup Page Component (signup/+page.svelte)
 * @description Provides the user interface for signing up using email/password
 * or Google OAuth. Uses SvelteKit Superforms for form handling and validation,
 * styled with DaisyUI classes.
 *
 * @dependencies
 * - $lib/components/auth/GoogleSignInButton.svelte: Google sign-in button.
 * - ./schema: Zod schema definition for the signup form.
 * - sveltekit-superforms: `superForm` hook.
 * - sveltekit-superforms/adapters: `zodClient` adapter.
 * - ./$types: Page data types.
 */
-->

<script lang="ts">
	import { formSchema } from './schema';
	// REMOVED: import { enhance } from '$app/forms'; // Not needed when using superForm's enhance
	import { type SuperValidated, type Infer, superForm, message } from 'sveltekit-superforms';
	import { zodClient } from 'sveltekit-superforms/adapters';
	import type { PageData } from './$types';
	import { AlertCircle, CheckCircle } from 'lucide-svelte'; // Icons for messages

	// Props: `data` contains the validated form object from the load function
	let { data }: { data: PageData } = $props();

	// Initialize Superform for the signup form
	const form = superForm(data.form, {
		validators: zodClient(formSchema),
		taintedMessage: null, // Disable tainted message for signup form
		// Optionally reset form on success message
		onUpdated: ({ form: f }) => {
			if (f.message && f.valid) {
				// Consider resetting only if it's a success message (e.g., "Check email")
				if (f.message.toLowerCase().includes('success')) {
					// Check the message string directly
					form.reset(); // Reset form fields after successful signup message
				}
			}
		}
	});

	/// Destructure form state and helpers - THIS enhance is from superForm
	const { form: formData, errors, submitting, enhance, message: messageStore } = form;

	// Fix: In Svelte 5, we access the store value directly with $
	// messageStore is the Writable<string> store from superForm
	$effect(() => {
		// This effect will re-run whenever $messageStore changes
		console.log('Message updated:', $messageStore);
	});

	// Derived value to check if the message is a success message
	let isSuccessMessage = $derived(
		typeof $messageStore === 'string' && $messageStore?.toLowerCase().includes('success')
	);
</script>

<div class="hero bg-ui-bg min-h-screen">
	<div class="w-full max-w-sm shadow-2xl">
		<div class="text-center">
			<h1 class="text-2xl font-bold">SIGN UP!</h1>
			<p class="py-4">Crea il tuo account</p>
		</div>
		<div class="card bg-ui-bg-2 w-full max-w-sm shrink-0 shadow-2xl">
			<!-- Use the enhance function from superForm -->
			<form class="card-body" method="POST" use:enhance novalidate>
				<h2 class="card-title mb-4 justify-center text-2xl">Crea Account</h2>

				<!-- General Form Message (Success or Error) -->
				{#if $messageStore}
					<div
						role="alert"
						class="alert mb-4 p-2 text-sm"
						class:alert-success={isSuccessMessage}
						class:alert-error={!isSuccessMessage}
					>
						{#if isSuccessMessage}
							<CheckCircle class="h-6 w-6 shrink-0 stroke-current" />
						{:else}
							<AlertCircle class="h-6 w-6 shrink-0 stroke-current" />
						{/if}
						<!-- Safely render message text -->
						<span>{$messageStore}</span>
					</div>
				{/if}

				<!-- Full Name Input (Optional) -->
				<div class="form-control text-gray-300">
					<label class="label" for="full-name">
						<span class="label-text">Full Name (Optional)</span>
					</label>
					<input
						type="text"
						id="full-name"
						name="fullName"
						placeholder="Your Name"
						autocomplete="name"
						class="input input-bordered text-gray-300"
						class:input-error={$errors.fullName}
						aria-invalid={$errors.fullName ? 'true' : undefined}
						aria-describedby={$errors.fullName ? 'fullName-error' : undefined}
						bind:value={$formData.fullName}
						disabled={$submitting}
					/>
					{#if $errors.fullName}
						<div class="label" id="fullName-error">
							<span class="label-text-alt text-error">{$errors.fullName}</span>
						</div>
					{/if}
				</div>

				<!-- Email Input -->
				<div class="form-control">
					<label class="label" for="email-address">
						<span class="label-text">Email</span>
					</label>
					<input
						type="email"
						id="email-address"
						name="email"
						placeholder="you@example.com"
						autocomplete="email"
						required
						class="input input-bordered"
						class:input-error={$errors.email}
						aria-invalid={$errors.email ? 'true' : undefined}
						aria-describedby={$errors.email ? 'email-error' : undefined}
						bind:value={$formData.email}
						disabled={$submitting}
					/>
					{#if $errors.email}
						<div class="label" id="email-error">
							<span class="label-text-alt text-error">{$errors.email}</span>
						</div>
					{/if}
				</div>

				<!-- Password Input -->
				<div class="form-control">
					<label class="label" for="password">
						<span class="label-text">Password</span>
					</label>
					<input
						type="password"
						id="password"
						name="password"
						placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢ (min. 8 characters)"
						required
						class="input input-bordered"
						class:input-error={$errors.password}
						aria-invalid={$errors.password ? 'true' : undefined}
						aria-describedby={$errors.password ? 'password-error' : undefined}
						bind:value={$formData.password}
						disabled={$submitting}
					/>
					{#if $errors.password}
						<div class="label" id="password-error">
							<span class="label-text-alt text-error">{$errors.password}</span>
						</div>
					{/if}
				</div>

				<!-- Confirm Password Input -->
				<div class="form-control">
					<label class="label" for="confirmPassword">
						<span class="label-text">Confirm Password</span>
					</label>
					<input
						type="password"
						id="confirmPassword"
						name="confirmPassword"
						placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
						required
						class="input input-bordered"
						class:input-error={$errors.confirmPassword}
						aria-invalid={$errors.confirmPassword ? 'true' : undefined}
						aria-describedby={$errors.confirmPassword ? 'confirmPassword-error' : undefined}
						bind:value={$formData.confirmPassword}
						disabled={$submitting}
					/>
					{#if $errors.confirmPassword}
						<div class="label" id="confirmPassword-error">
							<span class="label-text-alt text-error">{$errors.confirmPassword}</span>
						</div>
					{/if}
				</div>

				<!-- Submit Button -->
				<div class=" form-control mt-6">
					<button type="submit" class="btn btn-primary" disabled={$submitting}>
						{#if $submitting}
							<span class="loading loading-spinner"></span>
							Creating Account...
						{:else}
							Registrati
						{/if}
					</button>
				</div>
				<!-- Placeholder for Social Logins -->
				<div class="relative my-4">
					<div class="absolute inset-0 flex items-center" aria-hidden="true">
						<div class="w-full border-t border-neutral-300"></div>
					</div>
					<div class="relative flex justify-center text-sm">
						<span class="bg-neutral-50 px-2 text-neutral-500">Or continue with</span>
					</div>
				</div>

				<div>
					<!-- <GoogleSignInButton /> -->
					<div class="text-center text-sm text-neutral-500">
						<!-- Google -->
						<button class="btn border-[#e5e5e5] bg-white text-black">
							<svg
								aria-label="Google logo"
								width="16"
								height="16"
								xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 512 512"
								><g
									><path d="m0 0H512V512H0" fill="#fff"></path><path
										fill="#34a853"
										d="M153 292c30 82 118 95 171 60h62v48A192 192 0 0190 341"
									></path><path
										fill="#4285f4"
										d="m386 400a140 175 0 0053-179H260v74h102q-7 37-38 57"
									></path><path fill="#fbbc02" d="m90 341a208 200 0 010-171l63 49q-12 37 0 73"
									></path><path
										fill="#ea4335"
										d="m153 219c22-69 116-109 179-50l55-54c-78-75-230-72-297 55"
									></path></g
								></svg
							>
							Signup with Google (PLACEHOLDER)
						</button>
					</div>
				</div>
			</form>
		</div>
	</div>
</div>



================================================================================
File: routes/auth/signup/schema.ts
================================================================================

/**
 * @file signup/schema.ts
 * @description Zod schema definition for the user signup form.
 * Includes validation rules for email, password, confirmPassword, and optionally full name.
 */
import { z } from 'zod';

export const formSchema = z
    .object({
        // Optional full name field
        fullName: z
            .string()
            .trim()
            .min(2, 'Full name must be at least 2 characters')
            .optional(), // Make it optional for signup
        email: z.string().email('Please enter a valid email address'),
        password: z
            .string()
            .min(8, 'Password must be at least 8 characters long')
            // Optional: Add complexity requirements if desired (e.g., regex)
            .max(100, 'Password must be no more than 100 characters'),
        confirmPassword: z.string() // Confirmation field
    })
    // Refine step to check if passwords match
    .refine((data) => data.password === data.confirmPassword, {
        message: "Passwords don't match",
        path: ['confirmPassword'] // Set the error path to the confirmation field
    });

// Infer the TypeScript type from the schema
export type FormSchema = z.infer<typeof formSchema>;



================================================================================
File: routes/auth/update-password/+page.svelte
================================================================================

<!-- src/routes/update-password/+page.svelte -->
<script>
	import { onMount } from 'svelte';
	import { supabase } from '$lib/utils/supabaseClient';
	import { goto } from '$app/navigation';
	import { page } from '$app/state';

	let password = '';
	let confirmPassword = '';
	let loading = false;
	let error = '';
	let isValidSession = false;

	onMount(async () => {
		// Check URL parameters first (from email link)
		const urlParams = new URLSearchParams(window.location.search);
		const accessToken = urlParams.get('access_token');
		const refreshToken = urlParams.get('refresh_token');
		const type = urlParams.get('type');

		console.log('URL params:', {
			accessToken: !!accessToken,
			refreshToken: !!refreshToken,
			type
		});

		if (accessToken && refreshToken && type === 'recovery') {
			try {
				const { data, error: setSessionError } = await supabase.auth.setSession({
					access_token: accessToken,
					refresh_token: refreshToken
				});

				console.log('Set session result:', {
					data: !!data.session,
					error: setSessionError
				});

				if (setSessionError) {
					console.error('Set session error:', setSessionError);
					error = 'Invalid or expired reset link. Please request a new password reset.';
				} else if (data.session) {
					isValidSession = true;
					// Clear the URL parameters for security
					window.history.replaceState({}, document.title, window.location.pathname);
				} else {
					error = 'Unable to establish session. Please request a new password reset.';
				}
			} catch (err) {
				console.error('Session setup error:', err);
				error = 'An error occurred processing the reset link. Please request a new password reset.';
			}
		} else {
			// Check if we already have a valid session
			const {
				data: { session },
				error: sessionError
			} = await supabase.auth.getSession();

			if (session && session.user) {
				console.log('Existing session found');
				isValidSession = true;
			} else {
				console.log('No valid session or tokens found');
				error = 'Invalid or expired reset link. Please request a new password reset.';
			}
		}
	});

	async function handlePasswordUpdate() {
		if (!password || !confirmPassword) {
			error = 'Please fill in all fields';
			return;
		}

		if (password.length < 6) {
			error = 'Password must be at least 6 characters long';
			return;
		}

		if (password !== confirmPassword) {
			error = 'Passwords do not match';
			return;
		}

		loading = true;
		error = '';

		try {
			const { error: updateError } = await supabase.auth.updateUser({
				password: password
			});

			if (updateError) {
				error = updateError.message;
			} else {
				// Success! Redirect to login or dashboard
				await goto('/login?message=Password updated successfully');
			}
		} catch (err) {
			error = 'An unexpected error occurred. Please try again.';
			console.error('Update password error:', err);
		} finally {
			loading = false;
		}
	}

	function handleSubmit(event) {
		event.preventDefault();
		handlePasswordUpdate();
	}
</script>

<svelte:head>
	<title>Update Password</title>
</svelte:head>

<div class="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
	<div class="w-full max-w-md space-y-8">
		<div>
			<h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Update your password</h2>
			<p class="mt-2 text-center text-sm text-gray-600">Enter your new password below.</p>
		</div>

		{#if !isValidSession && !error}
			<div class="flex justify-center">
				<svg
					class="h-8 w-8 animate-spin text-indigo-600"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
				>
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"
					></circle>
					<path
						class="opacity-75"
						fill="currentColor"
						d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
					></path>
				</svg>
			</div>
		{:else if error && !isValidSession}
			<div class="rounded-md bg-red-50 p-4">
				<div class="text-sm text-red-700">{error}</div>
				<div class="mt-3">
					<a href="/reset-password" class="font-medium text-red-600 hover:text-red-500">
						Request a new password reset
					</a>
				</div>
			</div>
		{:else if isValidSession}
			<form class="mt-8 space-y-6" on:submit={handleSubmit}>
				<div class="space-y-4">
					<div>
						<label for="password" class="block text-sm font-medium text-gray-700">
							New Password
						</label>
						<input
							id="password"
							name="password"
							type="password"
							required
							bind:value={password}
							disabled={loading}
							class="relative mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
							placeholder="Enter new password"
						/>
					</div>

					<div>
						<label for="confirm-password" class="block text-sm font-medium text-gray-700">
							Confirm New Password
						</label>
						<input
							id="confirm-password"
							name="confirm-password"
							type="password"
							required
							bind:value={confirmPassword}
							disabled={loading}
							class="relative mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
							placeholder="Confirm new password"
						/>
					</div>
				</div>

				{#if error}
					<div class="rounded-md bg-red-50 p-4">
						<div class="text-sm text-red-700">{error}</div>
					</div>
				{/if}

				<div>
					<button
						type="submit"
						disabled={loading}
						class="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
					>
						{#if loading}
							<svg
								class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
							>
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								></circle>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								></path>
							</svg>
							Updating...
						{:else}
							Update password
						{/if}
					</button>
				</div>
			</form>
		{/if}
	</div>
</div>



================================================================================
File: routes/book/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file Booking Page
	 * @purpose Provides a multi-step user interface for booking museum tickets.
	 *
	 * @dependencies
	 * - Svelte: For component logic and reactivity.
	 * - SvelteKit: For navigation (goto) and page state (page).
	 * - bookingStore: For all booking-related state and actions.
	 * - lucide-svelte: For icons.
	 *
	 * @notes
	 * - This component has been refactored to use a more logical step order: Tickets -> Date -> Time -> Details.
	 * - Fixed infinite loop issues by properly managing effect dependencies and preventing circular updates.
	 * - Date availability is now loaded only when the user navigates to a new, previously unloaded month.
	 * - Error handling: Prevents reactive loops through careful state management and effect consolidation.
	 * - Fixed availability display: Calendar now properly shows visual indicators for date availability.
	 * - Fixed time slot selection: Improved validation and user feedback for time slot picker.
	 */
	import { goto } from '$app/navigation';
	import { page } from '$app/state';
	import { fade, slide } from 'svelte/transition';
	import {
		bookingActions,
		bookingError,
		customerInfo,
		isCreatingBooking,
		isLoadingTimeSlots,
		isLoadingDateAvailability,
		selectedDate,
		selectedTimeSlot,
		totalTickets,
		validationErrors,
		selectedTicket,
		dateAvailability,
		availableTimeSlots
	} from '$lib/stores/bookingStore';
	// Component Imports
	import Calendar from '$lib/components/Calendar.svelte';
	import TimeSlotPicker from '$lib/components/TimeSlotPicker.svelte';
	import TicketSelector from '$lib/components/TicketSelector.svelte';
	import BookingSummary from './_components/BookingSummary.svelte';
	import CustomerForm from './_components/CustomerForm.svelte';
	import Alert from '$lib/components/ui/Alert.svelte';
	import {
		Loader,
		ChevronLeft,
		ChevronRight,
		Calendar as CalendarIcon,
		Clock,
		Ticket,
		User,
		Check,
		Info,
		AlertTriangle
	} from 'lucide-svelte';

	// Define types for stores
	interface Ticket {
		id: string;
	}
	interface CustomerInfo {
		name: string;
		email: string;
	}
	interface ValidationErrors {
		name?: string;
		email?: string;
	}
	interface DateAvailabilityStatus {
		/* Define as per your bookingStore, e.g., 'available' | 'unavailable' | 'loading' | 'unknown' */
	}
	interface BookingActions {
		loadDateAvailabilityForTicket: (ticketId: string, year: number, month: number) => void;
		loadTimeSlotsForSelection: () => void;
		validateBooking: () => boolean;
	}

	interface BookingStep {
		id: number;
		title: string;
		description: string;
		icon: any;
		isComplete: () => boolean;
	}

	// --- STATE MANAGEMENT ---
	let currentStep = $state(1);
	let calendarDate = $state(new Date());
	let loadedMonths = $state<Set<string>>(new Set());
	let lastTicketId = $state<string | null>(null);

	// --- DERIVED STATE ---
	const isCustomerFormValid = $derived(
		!$validationErrors.name &&
			!$validationErrors.email &&
			!!$customerInfo.name &&
			!!$customerInfo.email
	);

	// Safely derive availabilityMap with debugging
	const availabilityMap = $derived(() => {
		if (!$selectedTicket?.id || !$dateAvailability) {
			console.log('[Booking Debug] No ticket or availability data', {
				hasTicket: !!$selectedTicket?.id,
				hasAvailability: !!$dateAvailability
			});
			return null;
		}

		const map =
			$dateAvailability instanceof Map
				? $dateAvailability.get($selectedTicket.id)
				: $dateAvailability[$selectedTicket.id];

		console.log('[Booking Debug] Availability map for ticket', $selectedTicket.id, ':', {
			mapExists: !!map,
			mapSize: map?.size || 0,
			mapType: typeof map
		});

		return map || null;
	});

	const steps: BookingStep[] = [
		{
			id: 1,
			title: 'Select Tickets',
			description: 'Choose your ticket type',
			icon: Ticket,
			isComplete: () => $totalTickets > 0
		},
		{
			id: 2,
			title: 'Select Date',
			description: 'Choose your visit date',
			icon: CalendarIcon,
			isComplete: () => $selectedDate !== null
		},
		{
			id: 3,
			title: 'Choose Time',
			description: 'Pick your time slot',
			icon: Clock,
			isComplete: () => $selectedTimeSlot !== null
		},
		{
			id: 4,
			title: 'Your Details',
			description: 'Provide your contact info',
			icon: User,
			isComplete: () => isCustomerFormValid
		}
	];

	// --- EFFECTS ---
	// Effect to handle date availability loading when moving to step 2
	$effect(() => {
		if (currentStep === 2 && $selectedTicket?.id) {
			const ticketId = $selectedTicket.id;
			const year = calendarDate.getFullYear();
			const month = calendarDate.getMonth();
			const monthKey = `${ticketId}-${year}-${month}`;

			console.log('[Booking Debug] Step 2 effect triggered', {
				ticketId,
				year,
				month,
				monthKey,
				alreadyLoaded: loadedMonths.has(monthKey)
			});

			if (!loadedMonths.has(monthKey)) {
				loadedMonths.add(monthKey);
				console.log('[Booking Debug] Loading availability for', monthKey);
				bookingActions.loadDateAvailabilityForTicket(ticketId, year, month);
			}
		}
	});

	// Effect to handle time slot loading when moving to step 3
	$effect(() => {
		if (currentStep === 3 && $selectedDate && $selectedTicket) {
			console.log('[Booking Debug] Loading time slots for step 3', {
				date: $selectedDate.toISOString().split('T')[0],
				ticketId: $selectedTicket.id,
				totalTickets: $totalTickets
			});
			bookingActions.loadTimeSlotsForSelection();
		}
	});

	// Effect to clear errors when relevant data changes
	$effect(() => {
		if ($selectedDate || $selectedTimeSlot || $totalTickets) {
			bookingError.set(null);
		}
	});

	// Effect to handle ticket type changes - reset loaded months and date availability
	$effect(() => {
		const currentTicketId = $selectedTicket?.id;
		if (currentTicketId !== lastTicketId) {
			console.log('[Booking Debug] Ticket changed from', lastTicketId, 'to', currentTicketId);
			if (lastTicketId !== null) {
				// Only reset if we had a previous ticket (not on initial load)
				loadedMonths = new Set();
				console.log('[Booking Debug] Reset loaded months due to ticket change');
			}
			lastTicketId = currentTicketId as string;
		}
	});

	// --- NAVIGATION ---
	function isStepAccessible(stepId: number): boolean {
		for (let i = 1; i < stepId; i++) {
			const step = steps.find((s) => s.id === i);
			if (!step || !step.isComplete()) {
				return false;
			}
		}
		return true;
	}

	function goToStep(stepId: number): void {
		if (isStepAccessible(stepId)) {
			currentStep = stepId;
		}
	}

	function goToPreviousStep(): void {
		if (currentStep > 1) {
			currentStep--;
		}
	}

	function goToNextStep(): void {
		const currentStepIndex = steps.findIndex((s) => s.id === currentStep);
		if (currentStepIndex < steps.length - 1 && steps[currentStepIndex].isComplete()) {
			currentStep++;
		}
	}

	/**
	 * Handle month change from Calendar component
	 * @param date - The new month/year date
	 */
	function handleMonthChange(date: Date): void {
		calendarDate = new Date(date);

		console.log('[Booking Debug] Month changed to', date);

		// Load availability for the new month if we have a selected ticket
		if ($selectedTicket?.id) {
			const ticketId = $selectedTicket.id;
			const year = date.getFullYear();
			const month = date.getMonth();
			const monthKey = `${ticketId}-${year}-${month}`;

			console.log('[Booking Debug] Checking if need to load', monthKey);

			if (!loadedMonths.has(monthKey)) {
				loadedMonths.add(monthKey);
				console.log('[Booking Debug] Loading availability for new month', monthKey);
				bookingActions.loadDateAvailabilityForTicket(ticketId, year, month);
			}
		}
	}

	/**
	 * Handle date selection from Calendar component
	 * @param date - The selected date
	 */
	function handleDateSelect(date: Date): void {
		console.log('[Booking Debug] Date selected', date);
		bookingActions.setSelectedDate(date);
		goToNextStep();
	}

	/**
	 * Handle time slot selection
	 */
	function handleTimeSlotSelect(): void {
		console.log('[Booking Debug] Time slot selected, current selection:', $selectedTimeSlot?.id);
		goToNextStep();
	}

	/**
	 * Handle ticket selection
	 */
	function handleTicketSelect(): void {
		console.log('[Booking Debug] Ticket selected');
		goToNextStep();
	}

	// --- BOOKING SUBMISSION ---
	async function handleProceedToPayment(): Promise<void> {
		if (!bookingActions.validateBooking()) {
			return;
		}
		await goto(`/checkout`);
	}
</script>

<svelte:head>
	<title>Book Your Visit - Zungri Museum | Southern Italian Heritage</title>
	<meta
		name="description"
		content="Reserve your tickets for an immersive journey through Southern Italian culture and heritage at Zungri Museum. Choose your date, tickets, and time."
	/>
	<meta
		name="keywords"
		content="Zungri Museum, book tickets, Southern Italy, cultural heritage, museum tickets"
	/>
	<link rel="canonical" href={page.url.href} />
</svelte:head>

<main class="from-background via-cream-50 to-primary-50 min-h-screen bg-gradient-to-br">
	<div class="container mx-auto max-w-7xl px-4 py-8 sm:py-12">
		<!-- Header Section -->
		<header class="mb-12 text-center">
			<h1
				class="font-display mb-4 text-4xl font-bold text-neutral-900 md:text-5xl"
				in:fade={{ duration: 800, delay: 200 }}
			>
				Book Your Visit
			</h1>
			<p
				class="font-body mx-auto max-w-2xl text-lg leading-relaxed text-neutral-600 md:text-xl"
				in:fade={{ duration: 800, delay: 400 }}
			>
				Follow the steps below to secure your spot.
			</p>
		</header>

		<!-- Progress Steps -->
		<div class="mb-12" in:slide={{ duration: 600, delay: 600, axis: 'y' }}>
			<div class="flex items-center justify-center space-x-2 md:space-x-4">
				{#each steps as step, index (step.id)}
					{@const isCompleted = step.isComplete()}
					{@const isActive = currentStep === step.id}
					{@const isAccessible = isStepAccessible(step.id)}
					<div class="flex items-center">
						<button
							type="button"
							class="group flex items-center space-x-3 rounded-full p-2 transition-all duration-300 disabled:cursor-not-allowed disabled:opacity-60"
							class:hover:bg-neutral-100={isAccessible}
							onclick={() => goToStep(step.id)}
							disabled={!isAccessible}
							aria-label={`Go to step ${step.id}: ${step.title}`}
						>
							<div
								class="flex h-10 w-10 items-center justify-center rounded-full border-2 transition-all duration-300 md:h-12 md:w-12"
								class:bg-primary-600={isCompleted}
								class:border-primary-600={isCompleted}
								class:text-white={isCompleted}
								class:bg-primary-100={isActive && !isCompleted}
								class:border-primary-400={isActive && !isCompleted}
								class:text-primary-600={isActive && !isCompleted}
								class:border-neutral-200={!isActive && !isCompleted}
								class:text-neutral-400={isActive && !isCompleted}
							>
								{#if isCompleted}
									<Check class="h-5 w-5" />
								{:else}
									<svelte:component this={step.icon} class="h-5 w-5" />
								{/if}
							</div>
							<div class="hidden text-left md:block">
								<div class="text-sm font-semibold text-neutral-900">{step.title}</div>
								<div class="text-xs text-neutral-900">{step.description}</div>
							</div>
						</button>
					</div>

					{#if index < steps.length - 1}
						<div
							class="h-0.5 w-8 flex-shrink-0 bg-neutral-200 transition-all duration-500"
							class:bg-primary-600={isStepAccessible(step.id + 1)}
						></div>
					{/if}
				{/each}
			</div>
		</div>

		<!-- Error Alert -->
		{#if $bookingError}
			<div class="mb-8" transition:slide={{ duration: 300 }}>
				<Alert type="error" message={$bookingError} />
			</div>
		{/if}

		<!-- Main Content Grid -->
		<div class="grid grid-cols-1 gap-8 lg:grid-cols-3 lg:gap-12">
			<!-- Steps Content Area -->
			<div class="lg:col-span-2">
				<div
					class="shadow-exhibit relative overflow-hidden rounded-2xl border border-neutral-100 bg-white"
				>
					{#if currentStep === 1}
						<div class="p-6 md:p-8" in:fade={{ duration: 400 }} out:fade={{ duration: 200 }}>
							<h2 class="font-heading mb-2 text-2xl font-bold text-neutral-900">
								Select Your Tickets
							</h2>
							<p class="mb-6 text-neutral-600">
								Choose the right experience for you or your group.
							</p>
							<TicketSelector
								language="en"
								class="w-full text-neutral-950"
								onselect={handleTicketSelect}
							/>
						</div>
					{/if}

					{#if currentStep === 2}
						<div class="p-6 md:p-8" in:fade={{ duration: 400 }} out:fade={{ duration: 200 }}>
							<h2 class="font-heading mb-2 text-2xl font-bold text-neutral-900">
								Select Your Visit Date
							</h2>
							<p class="mb-6 text-neutral-600">
								Choose an available date for your museum experience.
							</p>

							<!-- Loading indicator for date availability -->
							{#if $isLoadingDateAvailability}
								<div class="mb-4 flex items-center justify-center rounded-lg bg-blue-50 p-4">
									<Loader class="mr-2 h-5 w-5 animate-spin text-blue-600" />
									<span class="text-blue-800">Loading date availability...</span>
								</div>
							{/if}

							<!-- No ticket selected warning -->
							{#if !$selectedTicket}
								<div class="mb-4 flex items-center justify-center rounded-lg bg-amber-50 p-4">
									<Info class="mr-2 h-5 w-5 text-amber-600" />
									<span class="text-amber-800">Please select a ticket type first</span>
								</div>
							{:else}
								<Calendar
									class="w-full"
									selectedDate={$selectedDate}
									availabilityMap={availabilityMap()}
									selectedTicketId={$selectedTicket?.id ?? null}
									onSelect={handleDateSelect}
									onMonthChange={handleMonthChange}
								/>
							{/if}
						</div>
					{/if}

					{#if currentStep === 3}
						<div class="p-6 md:p-8" in:fade={{ duration: 400 }} out:fade={{ duration: 200 }}>
							<h2 class="font-heading mb-2 text-2xl font-bold text-neutral-900">
								Choose Your Time Slot
							</h2>
							<p class="mb-6 text-neutral-600">
								Select the perfect time for your visit on {$selectedDate?.toLocaleDateString(
									'en-US',
									{ month: 'long', day: 'numeric' }
								)}.
							</p>

							<!-- Prerequisites Check -->
							{#if !$selectedDate}
								<div class="mb-4 flex items-center justify-center rounded-lg bg-amber-50 p-4">
									<AlertTriangle class="mr-2 h-5 w-5 text-amber-600" />
									<span class="text-amber-800">Please select a date first</span>
								</div>
							{:else if !$selectedTicket}
								<div class="mb-4 flex items-center justify-center rounded-lg bg-amber-50 p-4">
									<AlertTriangle class="mr-2 h-5 w-5 text-amber-600" />
									<span class="text-amber-800">Please select a ticket type first</span>
								</div>
							{:else if $totalTickets <= 0}
								<div class="mb-4 flex items-center justify-center rounded-lg bg-amber-50 p-4">
									<AlertTriangle class="mr-2 h-5 w-5 text-amber-600" />
									<span class="text-amber-800">Please select at least one ticket</span>
								</div>
							{:else if $isLoadingTimeSlots}
								<div class="flex h-48 items-center justify-center text-neutral-500">
									<Loader class="mr-2 animate-spin" /> Loading available times...
								</div>
							{:else if $availableTimeSlots.length === 0}
								<div
									class="mb-4 flex flex-col items-center justify-center rounded-lg bg-red-50 p-6"
								>
									<AlertTriangle class="mb-2 h-8 w-8 text-red-600" />
									<span class="text-center text-red-800"
										>No time slots available for the selected date</span
									>
									<p class="mt-2 text-center text-sm text-red-600">
										Please choose a different date
									</p>
								</div>
							{:else}
								<TimeSlotPicker class="w-full" onselect={handleTimeSlotSelect} />
							{/if}
						</div>
					{/if}

					{#if currentStep === 4}
						<div class="p-6 md:p-8" in:fade={{ duration: 400 }} out:fade={{ duration: 200 }}>
							<h2 class="font-heading mb-2 text-2xl font-bold text-neutral-900">
								Your Information
							</h2>
							<p class="mb-6 text-neutral-900">We need a few details to complete your booking.</p>
							<CustomerForm onsubmit={handleProceedToPayment} />
						</div>
					{/if}

					<!-- Navigation Footer -->
					<div class="border-t border-neutral-100 bg-neutral-50 p-4">
						<div class="flex items-center justify-between">
							<button
								type="button"
								class="inline-flex items-center rounded-md px-4 py-2 text-sm font-medium text-neutral-600 transition-colors duration-200 hover:bg-neutral-100 hover:text-neutral-900 disabled:cursor-not-allowed disabled:opacity-50"
								disabled={currentStep === 1}
								onclick={goToPreviousStep}
							>
								<ChevronLeft class="mr-1 h-4 w-4" />
								Previous
							</button>

							<div class="text-sm text-neutral-500">
								Step {currentStep} of {steps.length}
							</div>

							<button
								type="button"
								class="bg-primary-600 hover:bg-primary-700 inline-flex items-center rounded-md px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors duration-200 disabled:cursor-not-allowed disabled:opacity-50"
								disabled={currentStep === steps.length || !steps[currentStep - 1].isComplete()}
								onclick={goToNextStep}
							>
								Next
								<ChevronRight class="ml-1 h-4 w-4" />
							</button>
						</div>
					</div>
				</div>
			</div>

			<!-- Booking Summary Sidebar -->
			<aside class="lg:col-span-1">
				<div class="sticky top-8">
					<BookingSummary {handleProceedToPayment} bind:currentStep />
				</div>
			</aside>
		</div>
	</div>

	<!-- Loading Overlay for Booking Creation -->
	{#if $isCreatingBooking}
		<div
			class="fixed inset-0 z-50 flex flex-col items-center justify-center bg-black/60 backdrop-blur-sm"
			transition:fade={{ duration: 300 }}
		>
			<div class="text-center text-white">
				<Loader class="mx-auto mb-4 h-12 w-12 animate-spin" />
				<h3 class="text-xl font-bold">Creating Your Booking</h3>
				<p>Please wait while we secure your visit...</p>
			</div>
		</div>
	{/if}
</main>



================================================================================
File: routes/book/+page.ts
================================================================================

/**
 * @file Booking Page - Server Load Function
 * @purpose Ensures essential data, like ticket types, is loaded before the page renders.
 * 
 * @dependencies
 * - SvelteKit: For PageLoad type and server-side fetch.
 * - bookingStore: To access booking actions and the `availableTicketTypes` store.
 * - svelte/store: To read the current state of a store via `get`.
 *
 * @notes
 * - This file has been updated to fix an import error. It now correctly checks the
 *   `availableTicketTypes` store instead of the removed `selectedTicketTypes`.
 * - This prevents redundant API calls if the ticket types are already populated in the store.
 * - Error handling is managed within the `loadTicketTypes` action.
 */
import { bookingActions, availableTicketTypes } from '$lib/stores/bookingStore';
import { get } from 'svelte/store';
import type { PageLoad } from './$types';

/**
 * Pre-loads necessary data for the booking page.
 * @param {object} params - SvelteKit load event parameters.
 * @param {typeof fetch} params.fetch - The fetch implementation to use (server or client).
 */
export const load: PageLoad = async ({ fetch }) => {
    // Check if the available ticket types have already been loaded into the store.
    const currentTicketTypes = get(availableTicketTypes);

    // If the store is empty, call the action to fetch them.
    // This is crucial for the first page load to populate the ticket selector.
    if (!currentTicketTypes || currentTicketTypes.length === 0) {
        // Pass the context-aware `fetch` to the action. This is essential for it
        // to work correctly during server-side rendering.
        await bookingActions.loadTicketTypes(fetch);
    }

    // The page component reads directly from the reactive stores,
    // so we don't need to return any data as props from the load function.
    return {};
};


================================================================================
File: routes/book/_components/BookingSummary.svelte
================================================================================

<script lang="ts">
	/**
	 * @file Booking Summary Component
	 * @purpose Displays a real-time summary of the user's booking selections and provides primary navigation controls.
	 *
	 * @dependencies
	 * - Svelte: For component logic and reactivity.
	 * - bookingStore: To access reactive state like summary details, price, and validation errors.
	 * - lucide-svelte: For icons.
	 *
	 * @notes
	 * - Uses `$bindable()` for `currentStep` to create a two-way binding with the parent page.
	 * - Disables the "Proceed to Payment" button until all steps are complete and the form is valid.
	 * - Provides a "Start Over" button to easily reset the entire booking process.
	 * - Enhanced debugging to help identify validation issues.
	 */
	import {
		bookingActions,
		bookingSummary,
		isCreatingBooking,
		customerInfo,
		validationErrors
	} from '$lib/stores/bookingStore';
	import { Calendar, Clock, CreditCard, Loader2, Ticket, RotateCcw } from 'lucide-svelte';

	let {
		currentStep = $bindable(),
		handleProceedToPayment
	}: {
		currentStep: number;
		handleProceedToPayment: () => Promise<void>;
	} = $props();

	// Enhanced customer form validation with detailed checking
	const isCustomerFormValid = $derived(() => {
		const hasName = !!$customerInfo.name && $customerInfo.name.trim().length >= 2;
		const hasEmail = !!$customerInfo.email && $customerInfo.email.includes('@');
		const noNameError = !$validationErrors.name;
		const noEmailError = !$validationErrors.email;

		console.log('[BookingSummary] Customer form validation:', {
			hasName,
			hasEmail,
			noNameError,
			noEmailError,
			customerInfo: $customerInfo,
			validationErrors: $validationErrors
		});

		return hasName && hasEmail && noNameError && noEmailError;
	});

	// Enhanced payment readiness checking
	const canProceedToPayment = $derived(() => {
		const isComplete = $bookingSummary.isComplete;
		const isFormValid = isCustomerFormValid();
		const notCreating = !$isCreatingBooking;

		console.log('[BookingSummary] Payment readiness:', {
			isComplete,
			isFormValid,
			notCreating,
			canProceed: isComplete && isFormValid && notCreating,
			bookingSummary: $bookingSummary
		});

		return isComplete && isFormValid && notCreating;
	});

	function startOver() {
		bookingActions.resetBooking();
		currentStep = 1;
	}

	// Force validation check when step changes to 4
	$effect(() => {
		if (currentStep === 4) {
			console.log('[BookingSummary] Reached step 4, checking validation state');
			// Trigger validation if needed
			if ($customerInfo.name && $customerInfo.email) {
				bookingActions.updateCustomerInfo({
					name: $customerInfo.name,
					email: $customerInfo.email,
					isGuest: true
				});
			}
		}
	});
</script>

<div class="bg-cream-50 rounded-card shadow-soft border border-neutral-300 p-6">
	<h3 class="font-heading mb-6 text-2xl font-semibold text-neutral-800">Booking Summary</h3>

	{#if $bookingSummary.totalTickets === 0 && !$bookingSummary.date}
		<div
			class="rounded-card border-2 border-dashed border-neutral-300 p-8 text-center text-neutral-500"
		>
			<p>Your selections will appear here as you proceed.</p>
		</div>
	{/if}

	<div class="space-y-4">
		<!-- Date Summary -->
		{#if $bookingSummary.date}
			<div class="rounded-card bg-neutral-100 p-3">
				<header class="mb-2 flex items-center gap-2 text-sm font-medium text-neutral-600">
					<Calendar class="text-primary-500 h-5 w-5" />
					<span>Visit Date</span>
				</header>
				<p class="font-medium text-neutral-800">
					{$bookingSummary.date.toLocaleDateString('en-GB', {
						weekday: 'long',
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					})}
				</p>
			</div>
		{/if}

		<!-- Tickets Summary -->
		{#if $bookingSummary.tickets.length > 0}
			<div class="rounded-card bg-neutral-100 p-3">
				<header class="mb-2 flex items-center gap-2 text-sm font-medium text-neutral-600">
					<Ticket class="text-primary-500 h-5 w-5" />
					<span>Selected Ticket</span>
				</header>
				<div class="space-y-2">
					{#each $bookingSummary.tickets as ticket (ticket.type.id)}
						<div class="flex justify-between text-sm text-neutral-800">
							<span>{ticket.quantity}x {ticket.type.name_translations?.en ?? 'Ticket'}</span>
							<span class="font-medium">‚Ç¨{ticket.subtotal.toFixed(2)}</span>
						</div>
					{/each}
				</div>
			</div>
		{/if}

		<!-- Time Slot Summary -->
		{#if $bookingSummary.timeSlot}
			<div class="rounded-card bg-neutral-100 p-3">
				<header class="mb-2 flex items-center gap-2 text-sm font-medium text-neutral-600">
					<Clock class="text-primary-500 h-5 w-5" />
					<span>Time Slot</span>
				</header>
				<p class="font-medium text-neutral-800">
					{new Date($bookingSummary.timeSlot.start_time).toLocaleTimeString('en-GB', {
						hour: '2-digit',
						minute: '2-digit'
					})}
					-
					{new Date($bookingSummary.timeSlot.end_time).toLocaleTimeString('en-GB', {
						hour: '2-digit',
						minute: '2-digit'
					})}
				</p>
			</div>
		{/if}
	</div>

	<!-- Total Price -->
	{#if $bookingSummary.totalPrice > 0}
		<div
			class="border-primary-200 bg-primary-50 rounded-card text-primary-600 mt-6 flex items-baseline justify-between border p-4"
		>
			<span class="text-lg font-semibold">Total</span>
			<span class="text-2xl font-bold">‚Ç¨{$bookingSummary.totalPrice.toFixed(2)}</span>
		</div>
	{/if}

	<!-- Debug Information (remove in production) -->
	<div class="mt-4 rounded bg-neutral-50 p-3 text-xs text-neutral-500">
		<strong>Debug Info:</strong><br />
		Current Step: {currentStep}<br />
		Summary Complete: {$bookingSummary.isComplete}<br />
		Form Valid: {isCustomerFormValid()}<br />
		Can Proceed: {canProceedToPayment()}<br />
		Creating: {$isCreatingBooking}<br />
		Customer: {JSON.stringify($customerInfo)}<br />
		Errors: {JSON.stringify($validationErrors)}
	</div>

	<!-- Action Buttons -->
	<div class="mt-6 flex flex-col gap-3">
		{#if currentStep === 4}
			<button
				type="button"
				class="rounded-card bg-primary-500 text-primary-50 focus-visible:outline-primary-300 inline-flex w-full items-center justify-center gap-2 border border-transparent px-4 py-3 font-medium transition-all duration-200 hover:brightness-110 focus-visible:outline-2 focus-visible:outline-offset-2 disabled:cursor-not-allowed disabled:opacity-60"
				onclick={handleProceedToPayment}
				disabled={!canProceedToPayment() || $isCreatingBooking}
			>
				{#if $isCreatingBooking}
					<Loader2 class="h-4 w-4 animate-spin" />
					<span>Securing Your Booking...</span>
				{:else}
					<CreditCard class="h-4 w-4" />
					<span>Proceed to Payment</span>
				{/if}
			</button>

			<!-- Show why button is disabled -->
			{#if !canProceedToPayment() && !$isCreatingBooking}
				<div class="rounded-card border border-amber-200 bg-amber-50 p-3 text-center text-sm">
					<p class="font-medium text-amber-800">Payment button is disabled because:</p>
					<ul class="mt-1 text-left text-xs text-amber-700">
						{#if !$bookingSummary.isComplete}
							<li>‚Ä¢ Booking is not complete (missing date, time, or tickets)</li>
						{/if}
						{#if !isCustomerFormValid()}
							<li>‚Ä¢ Customer information is incomplete or has errors</li>
							{#if !$customerInfo.name || $customerInfo.name.trim().length < 2}
								<li>&nbsp;&nbsp;- Name is required (min 2 characters)</li>
							{/if}
							{#if !$customerInfo.email || !$customerInfo.email.includes('@')}
								<li>&nbsp;&nbsp;- Valid email is required</li>
							{/if}
							{#if $validationErrors.name}
								<li>&nbsp;&nbsp;- Name error: {$validationErrors.name}</li>
							{/if}
							{#if $validationErrors.email}
								<li>&nbsp;&nbsp;- Email error: {$validationErrors.email}</li>
							{/if}
						{/if}
					</ul>
				</div>
			{/if}
		{:else}
			<div class="rounded-card bg-neutral-100 p-4 text-center text-sm text-neutral-500">
				Complete all steps to proceed to payment.
			</div>
		{/if}

		{#if currentStep > 1}
			<button
				type="button"
				class="rounded-card focus-visible:outline-primary-300 inline-flex w-full items-center justify-center gap-2 border border-neutral-300 bg-transparent px-4 py-3 font-medium text-neutral-800 transition-all duration-200 hover:bg-neutral-100 focus-visible:outline-2 focus-visible:outline-offset-2"
				onclick={startOver}
			>
				<RotateCcw class="h-4 w-4" />
				<span>Start Over</span>
			</button>
		{/if}
	</div>
</div>

<style>
</style>



================================================================================
File: routes/book/_components/CustomerForm.svelte
================================================================================

<script lang="ts">
	/**
	 * @file CustomerForm.svelte
	 * @purpose Customer information form component for booking process
	 *
	 * @dependencies
	 * - lucide-svelte: For icons
	 * - bookingStore: For customer info and validation state
	 *
	 * @notes
	 * - Properly handles bidirectional data binding between input and store
	 * - Real-time validation with user feedback
	 * - Integrates with booking validation system
	 * - Error handling: Shows validation errors and clears them appropriately
	 * - Fixed state synchronization issues between input and store
	 */
	import { User } from 'lucide-svelte';
	import { customerInfo, validationErrors, bookingActions } from '$lib/stores/bookingStore';

	// Local reactive state that properly syncs with store
	let nameValue = $state($customerInfo.name || '');
	let emailValue = $state($customerInfo.email || '');

	// Sync local state with store when store changes externally
	$effect(() => {
		if ($customerInfo.name !== nameValue) {
			nameValue = $customerInfo.name || '';
		}
		if ($customerInfo.email !== emailValue) {
			emailValue = $customerInfo.email || '';
		}
	});

	// Validation functions
	function validateName(name: string): string | undefined {
		if (!name || name.trim().length < 2) {
			return 'Full name must be at least 2 characters';
		}
		return undefined;
	}

	function validateEmail(email: string): string | undefined {
		if (!email) {
			return 'Email address is required';
		}
		const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
		if (!emailRegex.test(email)) {
			return 'Please enter a valid email address';
		}
		return undefined;
	}

	// Handle input changes with proper state management
	function handleNameInput(event: Event) {
		const target = event.target as HTMLInputElement;
		nameValue = target.value;

		// Update store immediately
		bookingActions.updateCustomerInfo({
			name: nameValue,
			email: emailValue,
			isGuest: true
		});

		// Clear validation error if input is now valid
		const error = validateName(nameValue);
		if (!error && $validationErrors.name) {
			validationErrors.update((current) => ({ ...current, name: undefined }));
		}
	}

	function handleEmailInput(event: Event) {
		const target = event.target as HTMLInputElement;
		emailValue = target.value;

		// Update store immediately
		bookingActions.updateCustomerInfo({
			name: nameValue,
			email: emailValue,
			isGuest: true
		});

		// Clear validation error if input is now valid
		const error = validateEmail(emailValue);
		if (!error && $validationErrors.email) {
			validationErrors.update((current) => ({ ...current, email: undefined }));
		}
	}

	// Handle blur events for validation
	function handleNameBlur() {
		const error = validateName(nameValue);
		if (error) {
			validationErrors.update((current) => ({ ...current, name: error }));
		}
	}

	function handleEmailBlur() {
		const error = validateEmail(emailValue);
		if (error) {
			validationErrors.update((current) => ({ ...current, email: error }));
		}
	}

	// Debug info for troubleshooting
	$effect(() => {
		console.log('[CustomerForm] State update:', {
			nameValue,
			emailValue,
			storeName: $customerInfo.name,
			storeEmail: $customerInfo.email,
			validationErrors: $validationErrors
		});
	});
</script>

<div class="bg-cream-50 rounded-card border border-neutral-300 p-6">
	<header class="mb-2 flex items-center gap-2">
		<User class="text-primary-500 h-5 w-5" />
		<h3 class="font-heading text-xl font-semibold text-neutral-800">Your Information</h3>
	</header>
	<p class="mb-6 text-sm text-neutral-600">
		Please provide your contact details for the booking confirmation.
	</p>

	<div class="flex flex-col gap-4">
		<!-- Name Field -->
		<div>
			<label for="customer-name" class="mb-1 block text-sm font-medium text-neutral-900"
				>Full Name *</label
			>
			<input
				id="customer-name"
				type="text"
				placeholder="Enter your full name"
				bind:value={nameValue}
				class:invalid={$validationErrors.name}
				class="rounded-card focus:ring-primary-300 focus:border-primary-300 w-full border border-neutral-300 bg-white px-3 py-2 text-neutral-950 transition-all duration-200 focus:outline-none focus:ring-2"
				required
				aria-invalid={$validationErrors.name ? 'true' : 'false'}
				aria-describedby="name-error"
				oninput={handleNameInput}
				onblur={handleNameBlur}
			/>
			{#if $validationErrors.name}
				<p id="name-error" class="text-error mt-1 text-xs">{$validationErrors.name}</p>
			{/if}
		</div>

		<!-- Email Field -->
		<div>
			<label for="customer-email" class="mb-1 block text-sm font-medium text-neutral-700"
				>Email Address *</label
			>
			<input
				id="customer-email"
				type="email"
				placeholder="Enter your email address"
				bind:value={emailValue}
				class:invalid={$validationErrors.email}
				class="rounded-card focus:ring-primary-300 focus:border-primary-300 invalid:border-error invalid:focus:ring-error/50 w-full border border-neutral-300 bg-white px-3 py-2 text-neutral-950 transition-all duration-200 focus:outline-none focus:ring-2"
				required
				aria-invalid={$validationErrors.email ? 'true' : 'false'}
				aria-describedby="email-error"
				oninput={handleEmailInput}
				onblur={handleEmailBlur}
			/>
			{#if $validationErrors.email}
				<p id="email-error" class="text-error mt-1 text-xs">{$validationErrors.email}</p>
			{:else}
				<p class="mt-1 text-xs text-neutral-500">
					We'll send your e-tickets to this email address.
				</p>
			{/if}
		</div>

		<!-- Form Status Debug (remove in production) -->
		<div class="rounded bg-neutral-50 p-2 text-xs text-neutral-500">
			<strong>Debug Info:</strong><br />
			Local Name: "{nameValue}" (valid: {!validateName(nameValue)})<br />
			Local Email: "{emailValue}" (valid: {!validateEmail(emailValue)})<br />
			Store Name: "{$customerInfo.name}"<br />
			Store Email: "{$customerInfo.email}"<br />
			Validation Errors: {JSON.stringify($validationErrors)}
		</div>
	</div>
</div>

<style>
	.invalid {
		border-color: #ef4444;
		box-shadow: 0 0 0 1px #ef4444;
	}

	.invalid:focus {
		border-color: #ef4444;
		box-shadow: 0 0 0 2px rgba(239, 68, 68, 0.2);
	}
</style>



================================================================================
File: routes/checkout/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file +page.svelte for /checkout
	 * @purpose The main checkout page that orchestrates the payment process.
	 *
	 * @dependencies
	 * - svelte: For component logic and Svelte 5 runes.
	 * - $lib/stores/bookingStore: To get booking details for the order.
	 * - $lib/stores/cartStore: To get merchandise items for the order.
	 * - $lib/api/apiClient: To call the `create-payment-intent` endpoint.
	 * - $lib/components/PaymentForm.svelte: The Stripe payment form component.
	 *
	 * @notes
	 * - This page orchestrates the checkout process.
	 * - It uses a `$effect` to reactively fetch the payment intent `clientSecret` from the backend once all required data is available from the stores.
	 * - It handles loading and error states gracefully during the API call.
	 * - All type definitions are imported from their respective stores/schema files to ensure type safety.
	 */

	import { bookingSummary, customerInfo, type BookingSummary } from '$lib/stores/bookingStore';
	import { cart, cartTotal, type CartItem } from '$lib/stores/cartStore';
	import { apiClient, type ApiError } from '$lib/api/apiClient';
	import type { OrderCreatePayload } from '$lib/schemas/payment';
	import PaymentForm from '$lib/components/PaymentForm.svelte';
	import { Loader2 } from 'lucide-svelte';

	// Local reactive state for the component
	let clientSecret = $state<string | null>(null);
	let isLoading = $state(true);
	let errorMessage = $state<string | undefined>();

	// Derived value for the total amount, combines booking and cart totals.
	const totalAmount = $derived($bookingSummary.totalPrice + $cartTotal);

	// This effect runs on the client-side to prepare the payment.
	// It's triggered whenever its dependencies ($bookingSummary, $cart, totalAmount) change.
	$effect(() => {
		// Guard against running on the server
		if (typeof window === 'undefined') return;

		// Reset state for re-computation
		isLoading = true;
		errorMessage = undefined;
		clientSecret = null;

		if (totalAmount <= 0) {
			errorMessage = "Your cart is empty. There's nothing to check out.";
			isLoading = false;
			return;
		}

		// Prepare the payload for the backend API call
		const payload: OrderCreatePayload = {
			customer_name: $customerInfo.name,
			customer_email: $customerInfo.email
		};

		if ($bookingSummary.isComplete) {
			payload.booking = {
				time_slot_id: $bookingSummary.timeSlot!.id, // Non-null assertion is safe due to isComplete check
				quantity: $bookingSummary.totalTickets,
				customer_name: $customerInfo.name,
				customer_email: $customerInfo.email
			};
		}

		if ($cart.length > 0) {
			payload.merchandise_items = $cart.map((item) => ({
				merchandise_id: item.id,
				quantity: item.quantity
			}));
		}

		// Asynchronously fetch the client secret
		(async () => {
			try {
				const response = await apiClient.createPaymentIntent(payload);
				clientSecret = response.client_secret;
			} catch (e) {
				const error = e as ApiError;
				console.error('Failed to create payment intent:', error);
				errorMessage = error.detail || 'Could not initiate payment. Please try again.';
			} finally {
				isLoading = false;
			}
		})();
	});
</script>

<svelte:head>
	<title>Checkout - Zungri Museum</title>
	<meta name="description" content="Complete your purchase securely." />
</svelte:head>

<main class="bg-neutral-50 py-12 md:py-16">
	<div class="container mx-auto max-w-4xl px-4">
		<h1 class="font-display mb-8 text-center text-4xl font-bold text-neutral-900">Checkout</h1>

		<div class="grid grid-cols-1 gap-12 lg:grid-cols-2">
			<!-- Order Summary -->
			<aside class="rounded-lg border bg-white p-6 shadow-sm lg:order-last">
				<h2 class="mb-4 text-xl font-semibold text-neutral-800">Order Summary</h2>
				<div class="space-y-4">
					<!-- Booking Items -->
					{#if $bookingSummary.tickets.length > 0}
						<div class="border-b pb-2">
							<h3 class="mb-2 font-medium text-neutral-600">Tickets</h3>
							{#each $bookingSummary.tickets as ticket}
								<div class="flex justify-between text-sm">
									<span>{ticket.quantity}x {ticket.type.name_translations?.en ?? 'Ticket'}</span>
									<span class="font-medium">‚Ç¨{ticket.subtotal.toFixed(2)}</span>
								</div>
							{/each}
						</div>
					{/if}

					<!-- Merchandise Items -->
					{#if $cart.length > 0}
						<div class="border-b pb-2">
							<h3 class="mb-2 font-medium text-neutral-600">Merchandise</h3>
							{#each $cart as item}
								<div class="flex justify-between text-sm">
									<span>{item.quantity}x {item.name_translations?.en ?? 'Item'}</span>
									<span class="font-medium">‚Ç¨{(item.price * item.quantity).toFixed(2)}</span>
								</div>
							{/each}
						</div>
					{/if}

					<!-- Total -->
					<div class="flex justify-between pt-4 text-lg font-bold">
						<span>Total</span>
						<span>‚Ç¨{totalAmount.toFixed(2)}</span>
					</div>
				</div>
			</aside>

			<!-- Payment Form -->
			<section class="rounded-lg border bg-white p-6 shadow-sm">
				<h2 class="mb-6 text-xl font-semibold text-neutral-800">Payment Details</h2>
				{#if isLoading}
					<div class="flex h-48 items-center justify-center text-neutral-500">
						<Loader2 class="mr-2 h-6 w-6 animate-spin" />
						<span>Preparing secure payment...</span>
					</div>
				{:else if errorMessage}
					<div
						class="rounded-md border border-red-200 bg-red-50 p-4 text-center text-red-700"
						role="alert"
					>
						<p class="font-semibold">Payment Error</p>
						<p class="text-sm">{errorMessage}</p>
					</div>
				{:else if clientSecret}
					<PaymentForm {clientSecret} />
				{:else}
					<div
						class="rounded-md border border-neutral-200 bg-neutral-50 p-4 text-center text-neutral-600"
						role="alert"
					>
						Could not load payment form.
					</div>
				{/if}
			</section>
		</div>
	</div>
</main>



================================================================================
File: routes/contact/+page.server.ts
================================================================================

/**
 * @file +page.server.ts (Contact Page)
 * @description Server-side logic for the Contact Us page.
 * - Initializes the contact form using Superforms.
 * - Handles form submission by calling the backend API.
 *
 * @dependencies
 * - @sveltejs/kit: For `fail` action response.
 * - sveltekit-superforms: For form management and validation.
 * - ./schema: Zod schema for form validation.
 */
import { fail } from '@sveltejs/kit';
import { message, superValidate } from 'sveltekit-superforms';
import { zod } from 'sveltekit-superforms/adapters';
import { formSchema } from './schema';
import type { Actions } from '@sveltejs/kit';

export const load = async () => {
    // Initialize the form on page load
    return {
        form: await superValidate(zod(formSchema))
    };
};

export const actions: Actions = {
    default: async ({ request, fetch }) => {
        const form = await superValidate(request, zod(formSchema));

        if (!form.valid) {
            // Return validation errors
            return fail(400, { form });
        }

        try {
            // Forward the validated data to the backend API
            const response = await fetch('api/v1/content/contact', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(form.data)
            });

            if (!response.ok) {
                const errorData = await response.json();
                return message(form, `Error: ${errorData.detail || 'Failed to send message.'}`, {
                    status: response.status
                });
            }

            // Return a success message
            return message(form, 'Thank you for your message! We will get back to you shortly.');
        } catch (e) {
            console.error('Contact form submission error:', e);
            return message(form, 'An unexpected server error occurred. Please try again later.', {
                status: 500
            });
        }
    }
};


================================================================================
File: routes/contact/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file +page.svelte (Contact Page)
	 * @description Contact page for the Zungri Museum. Includes contact details,
	 * an interactive map, and a contact form handled by SvelteKit Superforms.
	 *
	 * @dependencies
	 * - sveltekit-superforms: For form handling and validation.
	 * - ./$types: For PageData type.
	 * - ./schema: Zod schema for the form.
	 * - $lib/components/ui/*: Reusable UI components.
	 * - lucide-svelte: For icons.
	 */
	import type { PageData } from './$types';
	import { formSchema } from './schema';
	import { superForm } from 'sveltekit-superforms';
	import { zodClient } from 'sveltekit-superforms/adapters';
	import { Mail, MapPin, Phone, Send } from 'lucide-svelte';
	import Button from '$lib/components/ui/Button.svelte';
	import Input from '$lib/components/ui/Input.svelte';
	import Alert from '$lib/components/ui/Alert.svelte';

	let { data }: { data: PageData } = $props();

	const form = superForm(data.form, {
		validators: zodClient(formSchema),
		taintedMessage: null,
		onUpdated: ({ form: f }) => {
			if (f.valid) {
				form.reset();
			}
		}
	});

	const { form: formData, errors, submitting, enhance, message: messageStore } = form;

	let isSuccessMessage = $derived($messageStore && !$messageStore.toLowerCase().includes('error'));
</script>

<svelte:head>
	<title>Contact Us - Zungri Museum</title>
	<meta
		name="description"
		content="Get in touch with the Zungri Museum. Find our address, phone number, email, and send us a message through our contact form."
	/>
</svelte:head>

<div class="bg-gray-900 text-white">
	<div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
		<div class="text-center">
			<h1 class="text-4xl font-bold tracking-tight sm:text-5xl">Get in Touch</h1>
			<p class="mt-4 text-lg text-gray-300">
				We'd love to hear from you. Whether you have a question about our collections, tickets, or
				anything else, our team is ready to answer all your questions.
			</p>
		</div>
		<div class="mt-16 grid grid-cols-1 gap-12 lg:grid-cols-3">
			<!-- Contact Information -->
			<div class="space-y-8">
				<div class="flex items-start space-x-4">
					<div class="flex-shrink-0">
						<div class="flex h-12 w-12 items-center justify-center rounded-md bg-blue-600">
							<MapPin class="h-6 w-6 text-white" />
						</div>
					</div>
					<div>
						<h3 class="text-lg font-semibold">Our Address</h3>
						<p class="mt-1 text-gray-400">
							Via Roma, 123<br />
							89020 Zungri (VV), Calabria, Italia
						</p>
					</div>
				</div>
				<div class="flex items-start space-x-4">
					<div class="flex-shrink-0">
						<div class="flex h-12 w-12 items-center justify-center rounded-md bg-blue-600">
							<Phone class="h-6 w-6 text-white" />
						</div>
					</div>
					<div>
						<h3 class="text-lg font-semibold">Call Us</h3>
						<a href="tel:+390963123456" class="mt-1 text-gray-400 hover:text-blue-400"
							>+39 0963 123456</a
						>
					</div>
				</div>
				<div class="flex items-start space-x-4">
					<div class="flex-shrink-0">
						<div class="flex h-12 w-12 items-center justify-center rounded-md bg-blue-600">
							<Mail class="h-6 w-6 text-white" />
						</div>
					</div>
					<div>
						<h3 class="text-lg font-semibold">Email Us</h3>
						<a href="mailto:info@museozungri.it" class="mt-1 text-gray-400 hover:text-blue-400"
							>info@museozungri.it</a
						>
					</div>
				</div>
			</div>

			<!-- Contact Form -->
			<div class="lg:col-span-2">
				<div class="rounded-lg bg-gray-800 p-8 shadow-lg">
					<h2 class="text-2xl font-bold">Send us a message</h2>
					<form method="POST" use:enhance class="mt-6 space-y-6">
						{#if $messageStore}
							<Alert type={isSuccessMessage ? 'success' : 'error'} message={$messageStore} />
						{/if}

						<div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
							<Input
								id="name"
								name="name"
								label="Full Name"
								placeholder="Your Name"
								required
								bind:value={$formData.name}
								disabled={$submitting}
								inputClass={$errors.name ? 'border-red-500' : ''}
							/>
							<Input
								type="email"
								id="email"
								name="email"
								label="Email Address"
								placeholder="you@example.com"
								required
								bind:value={$formData.email}
								disabled={$submitting}
								inputClass={$errors.email ? 'border-red-500' : ''}
							/>
						</div>

						<Input
							id="subject"
							name="subject"
							label="Subject"
							placeholder="e.g., Question about tickets"
							required
							bind:value={$formData.subject}
							disabled={$submitting}
							inputClass={$errors.subject ? 'border-red-500' : ''}
						/>

						<div>
							<label for="message" class="mb-1 block text-sm font-medium text-gray-300"
								>Message</label
							>
							<textarea
								id="message"
								name="message"
								rows="4"
								placeholder="Your message..."
								required
								bind:value={$formData.message}
								disabled={$submitting}
								class="w-full rounded-md border border-gray-600 bg-gray-700 px-3 py-2 text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 {$errors.message
									? 'border-red-500'
									: ''}"
							></textarea>
						</div>

						<div class="text-right">
							<Button
								type="submit"
								loading={$submitting}
								disabled={$submitting}
								class="min-w-[150px]"
							>
								{#if !$submitting}
									<Send class="mr-2 h-4 w-4" />
								{/if}
								Send Message
							</Button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>



================================================================================
File: routes/contact/schema.ts
================================================================================

/**
* @file schema.ts (for /contact)
* @description Zod schema for validating the contact form.
*
* @dependencies
* - zod: For schema definition and validation.
*/
import { z } from 'zod';


export const formSchema = z.object({
    name: z.string().trim().min(2, { message: 'Name must be at least 2 characters.' }),
    email: z.string().email({ message: 'Please enter a valid email address.' }),
    subject: z.string().trim().min(5, { message: 'Subject must be at least 5 characters.' }),
    message: z.string().trim().min(10, { message: 'Message must be at least 10 characters.' })
});

export type FormSchema = typeof formSchema;


================================================================================
File: routes/payment-success/+page.svelte
================================================================================

<!--
/**
 * @file +page.svelte (Payment Success Page)
 * @purpose Displays payment confirmation and order details after successful payment
 *
 * @dependencies
 * - $app/page: For accessing URL parameters
 * - lucide-svelte: For icons
 * - $lib/api/apiClient: For fetching order details
 *
 * @notes
 * - Shows payment confirmation with order details
 * - Handles both real and simulated payments
 * - Provides clear next steps for the user
 * - Includes download/email instructions for tickets
 */
-->
<script lang="ts">
	import { page } from '$app/state';
	import { onMount } from 'svelte';
	import { Check, Download, Mail, Calendar, MapPin, Clock, Ticket } from 'lucide-svelte';

	// Get payment intent from URL parameters
	let paymentIntentId = $derived(page.url.searchParams.get('payment_intent'));
	let orderDetails = $state(null);
	let isLoading = $state(true);
	let error = $state(null);

	// Mock order details for simulation
	// TODO: Replace with real API call to fetch order details
	onMount(async () => {
		if (paymentIntentId) {
			try {
				// Simulate API call delay
				await new Promise((resolve) => setTimeout(resolve, 1000));

				// Mock order details - in production, fetch from API
				orderDetails = {
					id: 'order_123456789',
					paymentIntentId: paymentIntentId,
					totalAmount: 25.0,
					status: 'PAID',
					customerEmail: 'customer@example.com',
					customerName: 'John Doe',
					createdAt: new Date().toISOString(),
					booking: {
						id: 'booking_123',
						visitDate: '2024-01-15',
						timeSlot: {
							startTime: '10:00',
							endTime: '11:30'
						},
						quantity: 2,
						ticketType: 'Standard Adult'
					},
					simulation: true
				};
			} catch (err) {
				error = 'Failed to load order details';
				console.error('Error loading order details:', err);
			} finally {
				isLoading = false;
			}
		} else {
			error = 'No payment information found';
			isLoading = false;
		}
	});
</script>

<svelte:head>
	<title>Payment Successful - Zungri Museum</title>
	<meta name="description" content="Your payment has been processed successfully." />
</svelte:head>

<div class="bg-neutral-50 py-12 md:py-16">
	<div class="container mx-auto max-w-4xl px-4">
		{#if isLoading}
			<!-- Loading State -->
			<div class="text-center">
				<div
					class="mx-auto h-12 w-12 animate-spin rounded-full border-4 border-neutral-300 border-t-blue-600"
				></div>
				<p class="mt-4 text-neutral-600">Loading your confirmation...</p>
			</div>
		{:else if error}
			<!-- Error State -->
			<div class="text-center">
				<div class="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-red-100">
					<svg class="h-8 w-8 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M6 18L18 6M6 6l12 12"
						></path>
					</svg>
				</div>
				<h1 class="mt-4 text-2xl font-bold text-neutral-900">Error Loading Confirmation</h1>
				<p class="mt-2 text-neutral-600">{error}</p>
				<a
					href="/"
					class="mt-6 inline-block rounded-md bg-blue-600 px-6 py-3 text-white hover:bg-blue-700"
				>
					Return to Homepage
				</a>
			</div>
		{:else if orderDetails}
			<!-- Success State -->
			<div class="text-center">
				<!-- Success Icon -->
				<div class="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-green-100">
					<Check class="h-8 w-8 text-green-600" />
				</div>

				<!-- Success Message -->
				<h1 class="mt-4 text-3xl font-bold text-neutral-900">Payment Successful!</h1>
				<p class="mt-2 text-lg text-neutral-600">
					Thank you for your booking. Your payment has been processed successfully.
				</p>

				{#if orderDetails.simulation}
					<!-- Simulation Notice -->
					<div class="mt-4 inline-block rounded-md bg-amber-50 px-4 py-2 text-sm text-amber-800">
						üé≠ This is a simulated payment confirmation for development
					</div>
				{/if}

				<!-- Order Details Card -->
				<div class="mt-8 rounded-lg border border-neutral-200 bg-white p-6 text-left shadow-sm">
					<h2 class="text-xl font-semibold text-neutral-900">Order Confirmation</h2>

					<div class="mt-4 grid grid-cols-1 gap-4 md:grid-cols-2">
						<!-- Order Info -->
						<div>
							<h3 class="text-sm font-medium text-neutral-600">Order Details</h3>
							<div class="mt-2 space-y-1 text-sm text-neutral-800">
								<p><span class="font-medium">Order ID:</span> {orderDetails.id}</p>
								<p>
									<span class="font-medium">Total Paid:</span> ‚Ç¨{orderDetails.totalAmount.toFixed(
										2
									)}
								</p>
								<p><span class="font-medium">Payment ID:</span> {orderDetails.paymentIntentId}</p>
								<p>
									<span class="font-medium">Status:</span>
									<span
										class="inline-block rounded-full bg-green-100 px-2 py-1 text-xs font-medium text-green-800"
									>
										{orderDetails.status}
									</span>
								</p>
							</div>
						</div>

						<!-- Customer Info -->
						<div>
							<h3 class="text-sm font-medium text-neutral-600">Customer Information</h3>
							<div class="mt-2 space-y-1 text-sm text-neutral-800">
								<p><span class="font-medium">Name:</span> {orderDetails.customerName}</p>
								<p><span class="font-medium">Email:</span> {orderDetails.customerEmail}</p>
							</div>
						</div>
					</div>

					{#if orderDetails.booking}
						<!-- Booking Details -->
						<div class="mt-6 rounded-md bg-blue-50 p-4">
							<h3 class="flex items-center text-sm font-medium text-blue-800">
								<Ticket class="mr-2 h-4 w-4" />
								Your Museum Visit
							</h3>
							<div class="mt-3 grid grid-cols-1 gap-3 md:grid-cols-3">
								<div class="flex items-center text-sm text-blue-700">
									<Calendar class="mr-2 h-4 w-4" />
									<span
										>{new Date(orderDetails.booking.visitDate).toLocaleDateString('en-US', {
											weekday: 'long',
											year: 'numeric',
											month: 'long',
											day: 'numeric'
										})}</span
									>
								</div>
								<div class="flex items-center text-sm text-blue-700">
									<Clock class="mr-2 h-4 w-4" />
									<span
										>{orderDetails.booking.timeSlot.startTime} - {orderDetails.booking.timeSlot
											.endTime}</span
									>
								</div>
								<div class="flex items-center text-sm text-blue-700">
									<span>{orderDetails.booking.quantity} √ó {orderDetails.booking.ticketType}</span>
								</div>
							</div>
						</div>
					{/if}
				</div>

				<!-- Action Buttons -->
				<div class="mt-8 flex flex-col gap-3 sm:flex-row sm:justify-center">
					<button
						type="button"
						class="inline-flex items-center justify-center rounded-md bg-blue-600 px-6 py-3 text-white hover:bg-blue-700"
						onclick={() => window.print()}
					>
						<Download class="mr-2 h-4 w-4" />
						Download Tickets
					</button>

					<a
						href="mailto:{orderDetails.customerEmail}?subject=Your Zungri Museum Tickets&body=Please find your tickets attached."
						class="inline-flex items-center justify-center rounded-md border border-neutral-300 bg-white px-6 py-3 text-neutral-700 hover:bg-neutral-50"
					>
						<Mail class="mr-2 h-4 w-4" />
						Email Tickets
					</a>
				</div>

				<!-- Additional Information -->
				<div class="mt-8 rounded-md bg-neutral-100 p-4 text-left">
					<h3 class="text-sm font-medium text-neutral-800">Important Information</h3>
					<ul class="mt-2 space-y-1 text-sm text-neutral-600">
						<li>‚Ä¢ Please arrive 15 minutes before your scheduled time</li>
						<li>‚Ä¢ Bring a valid ID for verification</li>
						<li>‚Ä¢ Your e-tickets have been sent to {orderDetails.customerEmail}</li>
						<li>‚Ä¢ For questions, contact us at info@museozungri.it</li>
					</ul>
				</div>

				<!-- Location Info -->
				<div class="mt-6 flex items-center justify-center text-sm text-neutral-600">
					<MapPin class="mr-2 h-4 w-4" />
					<span>Museo di Zungri, Via Roma 123, 89020 Zungri (VV), Calabria</span>
				</div>

				<!-- Navigation -->
				<div class="mt-8 flex justify-center gap-4">
					<a
						href="/"
						class="rounded-md bg-neutral-200 px-4 py-2 text-neutral-700 hover:bg-neutral-300"
					>
						Return to Homepage
					</a>
					<a
						href="/plan-your-visit"
						class="rounded-md bg-blue-600 px-4 py-2 text-white hover:bg-blue-700"
					>
						Plan Your Visit
					</a>
				</div>
			</div>
		{/if}
	</div>
</div>

<!-- TODO: Production Implementation Notes -->
<!--
TODO: For production implementation:

1. Replace mock order details with real API call:
   const orderDetails = await apiClient.getOrderByPaymentIntent(paymentIntentId);

2. Add real ticket download functionality:
   - Generate PDF tickets on the backend
   - Provide secure download links
   - Include QR codes for ticket validation

3. Implement real email ticket delivery:
   - Send confirmation emails automatically after payment
   - Include PDF tickets as attachments
   - Use email templates with proper branding

4. Add order tracking:
   - Allow customers to view order status
   - Provide order lookup by email + order ID
   - Send status updates via email

5. Remove all simulation-related code and notices
-->



================================================================================
File: routes/plan-your-visit/+page.server.ts
================================================================================

/**

@file +page.server.ts (Plan Your Visit Page)

@description Server-side loader for the "Plan Your Visit" page. Fetches dynamic content

from the backend API based on the 'plan-your-visit' slug and the current locale.

@dependencies

@sveltejs/kit: For error handling.

paraglide-js-sveltekit: For getting the current language tag.

../$types: Type definitions for the page load event.

../../lib/types/api: API response types.
*/
import { error } from '@sveltejs/kit';

import { getLocale } from '$lib/paraglide/runtime';

import type { PageServerLoad } from './$types';



export const load: PageServerLoad = async ({ fetch }) => {
    try {
        const lang = getLocale();
        const slug = 'plan-your-visit';

        console.log(
            `[Plan Your Visit Page Load] Fetching content for slug '${slug}' in language '${lang}'`
        );

        // Fetch content from the backend API
        const response = await fetch(`/api/v1/content/${slug}/${lang}`);

        if (!response.ok) {
            const errorData = await response.json();
            console.error(`[Plan Your Visit Page Load] API Error (${response.status}):`, errorData.detail);
            error(response.status, {
                message: 'Could not load visit information.',
                details: errorData.detail || 'The requested content could not be found.'
            });
        }

        const content = await response.json();

        return {
            content
        };
    } catch (e: any) {
        console.error('[Plan Your Visit Page Load] Unexpected error:', e);
        error(500, {
            message: 'Internal Server Error',
            details: 'An unexpected error occurred while trying to load the page.'
        });
    }


};


================================================================================
File: routes/plan-your-visit/+page.svelte
================================================================================

<!--
/**
* @file +page.svelte (Plan Your Visit Page)
* @description Renders the 'Plan Your Visit' page, displaying content from the CMS,
* a map, and key visitor information like opening hours and ticket prices.
*
* @dependencies
* - ./$types: For typing the `data` prop.
* - lucide-svelte: For icons.
* - $lib/components/ui/Button.svelte: Reusable button component.
*/
-->

<script lang="ts">
	import type { PageData } from './$types';
	import { Clock, MapPin, Ticket, Users, ArrowRight } from 'lucide-svelte';
	import Button from '$lib/components/ui/Button.svelte';

	let { data }: { data: PageData } = $props();
	const { content } = data;
</script>

<svelte:head>
	<title>{content.title} - Museo di Zungri</title>
	<meta
		name="description"
		content="Plan your visit to the Zungri Museum. Find opening hours, ticket prices, location, and accessibility information."
	/>
</svelte:head>

<div class="bg-gray-50">
	<!-- Header Section -->
	<div class="bg-blue-800 text-white">
		<div class="mx-auto max-w-7xl px-4 py-16 text-center sm:px-6 lg:px-8">
			<h1 class="text-4xl font-bold tracking-tight sm:text-5xl">{content.title}</h1>
			<p class="mx-auto mt-4 max-w-2xl text-lg text-blue-200">
				All the information you need for an unforgettable experience at the Zungri Museum.
			</p>
		</div>
	</div>

	<!-- Main Content Grid -->
	<div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
		<div class="grid grid-cols-1 gap-16 lg:grid-cols-3">
			<!-- Left Column: Dynamic Content -->
			<div class="prose prose-lg max-w-none text-gray-700 lg:col-span-2">
				{@html content.content}
			</div>

			<!-- Right Column: Key Information Cards -->
			<aside class="space-y-8">
				<!-- Opening Hours -->
				<div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
					<div class="flex items-center space-x-3">
						<Clock class="h-6 w-6 text-blue-600" />
						<h3 class="text-xl font-semibold text-gray-900">Opening Hours</h3>
					</div>
					<ul class="mt-4 space-y-2 text-gray-600">
						<li class="flex justify-between">
							<span>Tuesday - Sunday</span>
							<span class="font-medium">9:00 - 17:00</span>
						</li>
						<li class="flex justify-between">
							<span>Monday</span>
							<span class="font-medium text-red-600">Closed</span>
						</li>
					</ul>
					<p class="mt-2 text-sm text-gray-500">Last admission 30 minutes before closing.</p>
				</div>

				<!-- Ticket Information -->
				<div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
					<div class="flex items-center space-x-3">
						<Ticket class="h-6 w-6 text-green-600" />
						<h3 class="text-xl font-semibold text-gray-900">Tickets</h3>
					</div>
					<ul class="mt-4 space-y-2 text-gray-600">
						<li class="flex justify-between">
							<span>Full Price</span>
							<span class="font-medium">‚Ç¨5.00</span>
						</li>
						<li class="flex justify-between">
							<span>Reduced (6-18, 65+)</span>
							<span class="font-medium">‚Ç¨3.00</span>
						</li>
						<li class="flex justify-between">
							<span>Children (under 6)</span>
							<span class="font-medium">Free</span>
						</li>
					</ul>
					<Button href="/book" class="mt-6 w-full">
						Book Tickets Online
						<ArrowRight class="ml-2 h-4 w-4" />
					</Button>
				</div>

				<!-- Group Visits -->
				<div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
					<div class="flex items-center space-x-3">
						<Users class="h-6 w-6 text-purple-600" />
						<h3 class="text-xl font-semibold text-gray-900">Group & School Visits</h3>
					</div>
					<p class="mt-4 text-gray-600">
						We offer special rates and guided tours for groups and schools. Please contact us to
						arrange your visit.
					</p>
					<Button href="/contact" variant="outline" class="mt-4 w-full">Contact Us</Button>
				</div>
			</aside>
		</div>
	</div>

	<!-- Map Section -->
	<div class="border-t border-gray-200">
		<div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
			<div class="text-center">
				<div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-blue-100">
					<MapPin class="h-6 w-6 text-blue-600" />
				</div>
				<h2 class="mt-4 text-3xl font-bold tracking-tight text-gray-900">How to Find Us</h2>
				<p class="mx-auto mt-4 max-w-2xl text-lg text-gray-600">
					We are located in the historic center of Zungri, easily accessible by car.
				</p>
			</div>
			<div class="mt-8 aspect-[16/9] overflow-hidden rounded-lg bg-gray-200 shadow-md">
				<!-- Embedded Google Map -->
				<iframe
					src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3148.835497985854!2d16.00230131532019!3d38.65999897960786!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x13151b72b8c0677b%3A0x9d32095f9e944b2c!2sInsediamento%20Rupestre%20e%20Museo%20della%20Civilt%C3%A0%20Rupestre%20e%20Contadina!5e0!3m2!1sen!2sit!4v1678886400000!5m2!1sen!2sit"
					width="100%"
					height="100%"
					style="border:0;"
					allowfullscreen={true}
					loading="lazy"
					referrerpolicy="no-referrer-when-downgrade"
					title="Map showing location of Zungri Museum"
				></iframe>
			</div>
		</div>
	</div>
</div>



================================================================================
File: routes/shop/+page.server.ts
================================================================================

/**
    * @file +page.server.ts for the main shop page
    * @purpose Server-side data loading for the merchandise listing page.
    * 
    * @dependencies
    * - @sveltejs/kit: For `error` helper and `PageServerLoad` type.
    * - $lib/api/apiClient: To fetch merchandise data and handle API errors.
    *
    * @notes
    * - Fetches all merchandise items using the API client.
    * - Provides SEO-friendly title and meta description.
    * - Implements robust error handling, converting API errors into SvelteKit error pages.
    */

import { apiClient, handleApiError } from '$lib/api/apiClient';
import { error } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';

/**
 * SvelteKit load function to fetch data before the page is rendered.
 * @param {object} context - The SvelteKit load event context, containing `fetch`.
 * @returns A promise that resolves to the data for the page.
 * @throws {Error} A SvelteKit error if the API call fails.
 */
export const load: PageServerLoad = async ({ fetch }) => {
    try {
        const merchandise = await apiClient.getMerchandise(fetch);
        return {
            merchandise,
            title: 'Shop - Zungri Museum',
            metaDescription: 'Browse official merchandise from the Zungri Museum. Find unique souvenirs and gifts.'
        };
    } catch (e) {
        const err = handleApiError(e, 'Failed to load merchandise');
        throw error(err.status, err.details);
    }
};


================================================================================
File: routes/shop/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file +page.svelte for /shop
	 * @purpose Renders the main merchandise listing page for the museum shop.
	 *
	 * @dependencies
	 * - svelte: For component logic and transitions.
	 * - $lib/components/ProductCard.svelte: The component for displaying each product.
	 *
	 * @notes
	 * - Receives merchandise data from its corresponding `+page.server.ts` load function.
	 * - Displays products in a responsive grid.
	 * - Includes a fallback message if no products are available.
	 */
	import ProductCard from '$lib/components/ProductCard.svelte';
	import { fade } from 'svelte/transition';

	let { data } = $props();
</script>

<svelte:head>
	<title>{data.title}</title>
	<meta name="description" content={data.metaDescription} />
</svelte:head>

<div class="bg-background-secondary py-12 md:py-16">
	<div class="container mx-auto max-w-7xl px-4">
		<header class="mb-12 text-center">
			<h1 class="font-display text-4xl font-bold text-neutral-900 md:text-5xl">Museum Shop</h1>
			<p class="font-body mx-auto mt-4 max-w-2xl text-lg text-neutral-600">
				Take a piece of history home with you. Explore our collection of books, replicas, and unique
				souvenirs.
			</p>
		</header>

		{#if data.merchandise && data.merchandise.length > 0}
			<div
				class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
				in:fade={{ duration: 500 }}
			>
				{#each data.merchandise as product (product.id)}
					<ProductCard {product} />
				{/each}
			</div>
		{:else}
			<div class="py-16 text-center text-neutral-500">
				<p class="text-lg">Our online shop is currently being stocked.</p>
				<p class="mt-2">Please check back later for our unique collection!</p>
			</div>
		{/if}
	</div>
</div>



================================================================================
File: routes/shop/[productId]/+page.server.ts
================================================================================

/**
     * @file +page.server.ts for the product detail page
     * @purpose Server-side data loading for a single merchandise item.
     * 
     * @dependencies
     * - @sveltejs/kit: For `error` helper and `PageServerLoad` type.
     * - $lib/api/apiClient: To fetch single product data and handle API errors.
     *
     * @notes
     * - Fetches a single merchandise item by its ID from the URL parameters.
     * - Generates a dynamic, SEO-friendly title and meta description for the product.
     * - Gracefully handles 404 errors if a product is not found, showing a standard "Not Found" page.
     */
import { apiClient, handleApiError } from '$lib/api/apiClient';
import { error } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';

/**
 * SvelteKit load function to fetch a single product's data before the page is rendered.
 * @param {object} context - The SvelteKit load event context, containing `params` and `fetch`.
 * @returns A promise that resolves to the data for the product detail page.
 * @throws {Error} A SvelteKit error if the API call fails or the product is not found.
 */
export const load: PageServerLoad = async ({ params, fetch }) => {
    try {
        const product = await apiClient.getMerchandiseItem(params.productId, fetch);
        const name = product.name_translations['en'] || Object.values(product.name_translations)[0];
        const description = product.description_translations?.['en'] || `Details for ${name}.`;

        return {
            product,
            title: `${name} - Zungri Museum Shop`,
            metaDescription: description.substring(0, 160) // Truncate for meta tag
        };
    } catch (e) {
        const err = handleApiError(e, 'Failed to load product details');
        // Specifically handle 404 to show a user-friendly "Not Found" page.
        if (err.status === 404) {
            throw error(404, 'Product not found');
        }
        throw error(err.status, err.details);
    }
};


================================================================================
File: routes/shop/[productId]/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file +page.svelte for /shop/[productId]
	 * @purpose Renders the detailed view for a single merchandise product.
	 * @dependencies
	 * - svelte: For component logic and transitions.
	 * - lucide-svelte: For icons.
	 * - $lib/stores/cartStore: For adding items to the cart.
	 * @notes
	 * - Receives product data from its `+page.server.ts` load function.
	 * - Displays product details including name, price, description, and stock status.
	 * - Provides an input to select quantity and an "Add to Cart" button.
	 * - The "Add to Cart" button is disabled for out-of-stock items.
	 */
	import { cart } from '$lib/stores/cartStore';
	import { fade } from 'svelte/transition';
	import { ShoppingCart } from 'lucide-svelte';

	let { data } = $props();
	const { product } = data;

	// Use $state for reactive state variable
	let quantity = $state(1);

	/** Adds the selected quantity of the current product to the cart. */
	function handleAddToCart() {
		cart.addToCart(product, quantity);
		// A toast notification could be triggered here for user feedback.
	}

	// Determine display language and fallbacks for name and description.
	const lang = 'en';
	const name = product.name_translations[lang] || Object.values(product.name_translations)[0];
	const description =
		product.description_translations?.[lang] ||
		Object.values(product.description_translations || {})[0] ||
		'<p>No description available.</p>';

	// Use $derived for reactive stock status
	const stockStatus = $derived(
		product.inventory > 0
			? product.inventory > 10
				? 'In Stock'
				: `Low Stock (${product.inventory} left)`
			: 'Out of Stock'
	);
</script>

<svelte:head>
	<title>{data.title}</title>
	<meta name="description" content={data.metaDescription} />
</svelte:head>

<div class="bg-white py-12 md:py-16" in:fade={{ duration: 300 }}>
	<div class="container mx-auto max-w-5xl px-4">
		<div class="grid grid-cols-1 gap-8 md:grid-cols-2 md:gap-12">
			<!-- Image Section -->
			<div class="aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-lg bg-neutral-100">
				<!-- Placeholder for product image. -->
				<div class="flex h-full w-full items-center justify-center text-neutral-400">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="96"
						height="96"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="1"
						stroke-linecap="round"
						stroke-linejoin="round"
						><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle
							cx="8.5"
							cy="8.5"
							r="1.5"
						></circle><polyline points="21 15 16 10 5 21"></polyline></svg
					>
				</div>
			</div>

			<!-- Details Section -->
			<div class="flex flex-col">
				<h1 class="font-display text-3xl font-bold text-neutral-900 md:text-4xl">{name}</h1>

				<p class="text-primary-600 mt-4 text-3xl font-bold">
					‚Ç¨{product.price.toFixed(2)}
				</p>

				<div class="mt-4">
					<span
						class="text-sm font-medium"
						class:text-success={product.inventory > 10}
						class:text-warning={product.inventory > 0 && product.inventory <= 10}
						class:text-error={product.inventory <= 0}
					>
						{stockStatus}
					</span>
				</div>

				<div class="prose prose-neutral mt-6 max-w-none text-neutral-600">
					{@html description}
				</div>

				<div class="mt-8 flex items-center gap-4">
					<label for="quantity" class="font-medium text-neutral-700">Quantity:</label>
					<input
						type="number"
						id="quantity"
						bind:value={quantity}
						min="1"
						max={product.inventory}
						class="focus:border-primary-500 focus:ring-primary-500 w-20 rounded-md border-neutral-300 text-center shadow-sm"
						disabled={product.inventory <= 0}
						aria-label="Product quantity"
					/>
				</div>

				<div class="mt-auto pt-8">
					<button
						type="button"
						class="bg-primary-500 text-primary-50 hover:bg-primary-600 flex w-full items-center justify-center gap-2 rounded-md px-8 py-3 text-base font-medium shadow-sm transition-colors disabled:cursor-not-allowed disabled:opacity-50"
						onclick={handleAddToCart}
						disabled={product.inventory <= 0 || quantity > product.inventory || quantity < 1}
					>
						<ShoppingCart class="h-5 w-5" />
						<span>{product.inventory > 0 ? 'Add to Cart' : 'Out of Stock'}</span>
					</button>
					{#if quantity > product.inventory && product.inventory > 0}
						<p class="text-error mt-2 text-center text-sm">
							Only {product.inventory} available in stock.
						</p>
					{/if}
				</div>
			</div>
		</div>
	</div>
</div>



================================================================================
File: types.ts
================================================================================

export type SupabaseJwt = {
    aal: string;
    aud: string;
    email: string;
    exp: number;
    iat: number;
    phone: string;
    role: string;
    session_id: string;
    sub: string;
    amr?: { method: string; timestamp: number; }[];
    app_metadata?: {
        provider?: string;
        providers?: string[];
        [key: string]: any;
    };
    is_anonymous?: boolean;
    iss?: string;
    jti?: string;
    nbf?: string;
    user_metadata?: {
        [key: string]: any;
    };
}


Summary:
Files Processed: 143
Lines Written: 16404
Errors Encountered: 0
