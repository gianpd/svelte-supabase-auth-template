Collected scripts from /home/jaco/develops/projects/ZUNGRI/frontend/src
Generated on 2025-06-24 12:33:28.815200


================================================================================
File: app.d.ts
================================================================================

/**
 * @file App Type Definitions (app.d.ts)
 * @description Contains global type definitions for the SvelteKit application.
 *
 * @dependencies
 * - @supabase/supabase-js: Provides the `SupabaseClient` and `Session` types.
 * - $lib/types/supabase: Contains generated database types (assuming this path is correct).
 */

import type { SupabaseClient, Session } from '@supabase/supabase-js';
import type { Database } from '$lib/types/supabase'; // Adjust path if needed

declare global {
	namespace App {
		interface Error {
			message: string;
			details?: string;
			code?: string;
		}

		/**
		 * @interface Locals
		 * @description Defines `event.locals` properties added by `hooks.server.ts`.
		 */
		interface Locals {
			supabase: SupabaseClient<Database>;
			getSession(): Promise<Session | null>;
			session: Session | null;
			accessToken: string | null; // Keep this if backend API needs it
		}

		/**
		 * @interface PageData
		 * @description Defines the common shape of data returned from load functions.
		 * Root layouts will populate session and potentially supabase client.
		 */
		interface PageData {
			session: Session | null;
			// Add supabase client if passed from universal load
			supabase?: SupabaseClient<Database>;
			flash?: { type: 'success' | 'error'; message: string };
		}

		// interface PageState {}
		// interface Platform {}
	}
}

export { };


================================================================================
File: hooks.server.ts
================================================================================

/**
 * @file Server Hooks (hooks.server.ts)
 * @description This file uses a sequence of handles to process requests.
 * 1. `i18nHandle`: Manages internationalization (i18n) using Paraglide,
 *    detecting the locale and setting the language context.
 * 2. `authHandle`: Initializes the Supabase client, validates the user's session
 *    using JWT, performs route guarding, and makes the validated session
 *    available in `event.locals`.
 *
 * @dependencies
 * - $env/static/public: Supabase URL and Anon Key.
 * - $env/static/private: Supabase JWT Secret.
 * - @supabase/ssr: `createServerClient`.
 * - @sveltejs/kit/hooks: `sequence` for chaining handles.
 * - @sveltejs/kit: `redirect`, `Handle`.
 * - jose: `jwtVerify`.
 * - @supabase/supabase-js: `Session`.
 * - $lib/paraglide: Generated Paraglide i18n handle.
 */

import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';
import { JWT_SECRET } from '$env/static/private';
import { createServerClient } from '@supabase/ssr';
import { redirect, type Handle } from '@sveltejs/kit';
import { sequence } from '@sveltejs/kit/hooks';
import * as jose from 'jose';
import type { Session } from '@supabase/supabase-js';
import { paraglideMiddleware } from '$lib/paraglide/server';


// Define the accurate Supabase JWT payload structure
export type SupabaseJwt = {
    aal: string;
    aud: string;
    email: string;
    exp: number;
    iat: number;
    phone: string;
    role: string;
    session_id: string;
    sub: string;
    amr?: { method: string; timestamp: number }[];
    app_metadata?: { provider?: string; providers?: string[];[key: string]: any };
    is_anonymous?: boolean;
    iss?: string;
    jti?: string;
    nbf?: string;
    user_metadata?: { [key: string]: any };
} & jose.JWTPayload;

// creating a handle to use the paraglide middleware
const paraglideHandle: Handle = ({ event, resolve }) =>
    paraglideMiddleware(event.request, ({ request: localizedRequest, locale }) => {
        event.request = localizedRequest;
        return resolve(event, {
            transformPageChunk: ({ html }) => {
                return html.replace('%lang%', locale);
            }
        });
    });



/**
 * @name authHandle
 * @description The second handle in the sequence. It manages authentication,
 * session validation, and route protection.
 */
const authHandle: Handle = async ({ event, resolve }) => {
    console.log(`\n--- [Auth Handle] Handling request for: ${event.url.pathname} ---`); // DEBUG

    // Use explicit getAll/setAll cookie handlers for Supabase SSR client
    event.locals.supabase = createServerClient(
        PUBLIC_SUPABASE_URL,
        PUBLIC_SUPABASE_ANON_KEY,
        {
            cookies: {
                getAll: () => {
                    const cookies = event.cookies.getAll();
                    console.log(`[DEBUG Auth Handle - getAll] Found ${cookies.length} cookies.`); // DEBUG
                    return cookies;
                },
                setAll: (cookies) => {
                    console.log(
                        `[DEBUG Auth Handle - setAll] Setting ${cookies.length} cookies:`,
                        JSON.stringify(cookies.map((c) => c.name))
                    ); // DEBUG
                    cookies.forEach(({ name, value, options }) => {
                        event.cookies.set(name, value, { ...options, path: '/' });
                    });
                }
            }
        }
    );

    /**
     * @name getSession
     * @description A method on `event.locals` to securely get the session data.
     * It retrieves the session from Supabase and then validates the JWT signature
     * against the private secret. Returns a valid session object or null.
     */
    event.locals.getSession = async (): Promise<Session | null> => {
        console.log('[DEBUG getSession in Auth Handle] Running...'); // DEBUG
        const {
            data: { session: rawSession },
            error: getSessionError
        } = await event.locals.supabase.auth.getSession();

        if (getSessionError) {
            console.error(
                '[ERROR getSession in Auth Handle] supabase.auth.getSession() error:',
                getSessionError.message
            );
        }

        if (!rawSession) {
            console.log('[DEBUG getSession in Auth Handle] Raw session NOT FOUND by supabase.auth.getSession().');
            event.locals.user = null;
            event.locals.accessToken = null;
            return null;
        }
        console.log(
            '[DEBUG getSession in Auth Handle] Raw session FOUND. User ID:',
            rawSession.user?.id
        ); // DEBUG

        try {
            console.log('[DEBUG getSession in Auth Handle] Attempting JWT validation...'); // DEBUG
            const secret = new TextEncoder().encode(JWT_SECRET);
            const { payload: decoded }: { payload: SupabaseJwt } = await jose.jwtVerify(
                rawSession.access_token,
                secret
            );
            console.log('[DEBUG getSession in Auth Handle] JWT validation SUCCESSFUL.'); // DEBUG

            const validated_session: Session = {
                access_token: rawSession.access_token,
                refresh_token: rawSession.refresh_token,
                expires_at: decoded.exp,
                expires_in: decoded.exp ? decoded.exp - Math.round(Date.now() / 1000) : 0,
                token_type: 'bearer',
                user: {
                    id: decoded.sub,
                    aud: decoded.aud,
                    role: decoded.role ?? 'authenticated',
                    email: decoded.email,
                    phone: decoded.phone,
                    created_at: rawSession.user?.created_at ?? '',
                    app_metadata: decoded.app_metadata ?? {},
                    user_metadata: decoded.user_metadata ?? {},
                    is_anonymous: decoded.is_anonymous ?? false
                }
            };
            event.locals.user = validated_session.user;
            event.locals.accessToken = validated_session.access_token;
            return validated_session;
        } catch (err: any) {
            console.error('[ERROR getSession in Auth Handle] JWT validation FAILED:', err.message); // DEBUG
            event.locals.user = null;
            event.locals.accessToken = null;
            return null;
        }
    };

    // Call getSession ONCE per request and store the result in locals.session
    event.locals.session = await event.locals.getSession();
    console.log(
        '[DEBUG Auth Handle] Stored session in locals:',
        event.locals.session ? `User: ${event.locals.session.user.id}` : 'null'
    ); // DEBUG

    // --- Route Guarding ---
    // Use the session stored directly in locals for guarding
    const sessionForGuard = event.locals.session;

    if (sessionForGuard) {
        console.log(`[DEBUG Auth Handle Guard] Using session FOUND in locals. User: ${sessionForGuard.user.id}`);
    } else {
        console.log(`[DEBUG Auth Handle Guard] Using session NOT FOUND in locals.`);
    }

    // Protect admin routes
    if (event.url.pathname.startsWith('/admin')) {
        if (!sessionForGuard) {
            console.warn(`[GUARD] Access denied to ${event.url.pathname}. No session. Redirecting to /login.`);
            redirect(303, '/login');
        }
        // You can add role-based checks here if needed
        // if (sessionForGuard.user.role !== 'Administrator') {
        //   redirect(303, '/');
        // }
    }

    // Redirect logged-in users from public auth pages
    if (event.url.pathname === '/login' || event.url.pathname === '/signup') {
        if (sessionForGuard) {
            console.log(`[GUARD] User already logged in. Redirecting from ${event.url.pathname} to /admin.`);
            redirect(303, '/admin');
        }
    }

    console.log(`[DEBUG Auth Handle] Resolving request for ${event.url.pathname}`); // DEBUG

    // Resolve the request, allowing it to proceed to the route handler.
    // SvelteKit automatically passes `event.locals.session` and `event.locals.user`
    // to the root layout data via the `+layout.server.ts` load function.
    return resolve(event, {
        filterSerializedResponseHeaders(name) {
            return name === 'content-range' || name === 'x-supabase-api-version';
        }
    });
};

// Export the sequence of handles. They will run in the order they are provided.
export const handle = sequence(paraglideHandle, authHandle);


================================================================================
File: hooks.ts
================================================================================

import type { Reroute } from '@sveltejs/kit';
import { deLocalizeUrl } from '$lib/paraglide/runtime';

export const reroute: Reroute = (request) => {
	return deLocalizeUrl(request.url).pathname;
};


================================================================================
File: lib/components/ui/Alert.svelte
================================================================================

<!--
/**
 * @file Alert.svelte
 * @description A reusable alert component for displaying messages.
 *
 * @props
 * - type (string, default 'info'): The type of alert ('info', 'success', 'warning', 'error').
 * - message (string, required): The message to display in the alert.
 * - class (string, default ''): Additional CSS classes to apply to the alert.
 * - show (boolean, default true): Controls the visibility of the alert.
 *
 * @slots
 * - icon: Optional slot for a custom icon.
 *
 * @notes
 * - Uses Tailwind CSS for styling.
 * - Automatically selects icon and colors based on the type.
 */
-->
<script lang="ts">
	interface $$Props {
		type?: 'info' | 'success' | 'warning' | 'error';
		message: string;
		class?: string;
		show?: boolean;
	}

	let { type = 'info', message, class: customClass = '', show = true }: $$Props = $props();

	const alertStyles = {
		info: {
			bg: 'bg-blue-900 border-blue-700',
			text: 'text-blue-300',
			icon: `M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon information-circle
		},
		success: {
			bg: 'bg-green-900 border-green-700',
			text: 'text-green-300',
			icon: `M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon check-circle
		},
		warning: {
			bg: 'bg-yellow-900 border-yellow-700',
			text: 'text-yellow-300',
			icon: `M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z` // Heroicon exclamation
		},
		error: {
			bg: 'bg-red-900 border-red-700',
			text: 'text-red-300',
			icon: `M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon x-circle
		}
	};

	let currentStyle = $derived(alertStyles[type]);
</script>

{#if show && message}
	<div
		class="mb-4 rounded-md border p-4 {currentStyle.bg} {currentStyle.text} {customClass}"
		role="alert"
	>
		<div class="flex items-center">
			<slot name="icon">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="mr-2 h-5 w-5"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d={currentStyle.icon}
					/>
				</svg>
			</slot>
			<span class="font-medium">{message}</span>
		</div>
	</div>
{/if}



================================================================================
File: lib/components/ui/Button.svelte
================================================================================

<!-- Button.svelte -->
<script lang="ts">
	import type { HTMLButtonAttributes } from 'svelte/elements';

	interface $$Props extends HTMLButtonAttributes {
		type?: 'button' | 'submit' | 'reset';
		disabled?: boolean;
		loading?: boolean;
		class?: string;
		variant?: 'primary' | 'secondary' | 'danger' | 'outline' | 'link';
		size?: 'sm' | 'md' | 'lg';
	}

	let {
		type = 'button',
		disabled = false,
		loading = false,
		class: customClass = '',
		variant = 'primary',
		size = 'md',
		...restProps
	}: $$Props = $props();

	const baseClasses =
		'font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 transition ease-in-out duration-150 flex items-center justify-center';

	const sizeClasses = {
		sm: 'px-3 py-1.5 text-xs',
		md: 'px-4 py-2 text-sm',
		lg: 'px-6 py-3 text-base'
	};

	const variantClasses = {
		primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
		secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
		danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
		outline: 'border border-gray-500 text-gray-300 hover:bg-gray-700 focus:ring-gray-500',
		link: 'text-blue-400 hover:text-blue-300 underline focus:ring-blue-500 p-0'
	};

	let isDisabled = $derived(disabled || loading);
</script>

<button
	{type}
	disabled={isDisabled}
	class="{baseClasses} {sizeClasses[size]} {variantClasses[variant]} {isDisabled
		? 'cursor-not-allowed opacity-50'
		: ''} {customClass}"
	on:click
	{...restProps}
>
	{#if loading}
		<svg
			class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
		>
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"
			></circle>
			<path
				class="opacity-75"
				fill="currentColor"
				d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
			></path>
		</svg>
	{:else}
		<slot />
	{/if}
</button>



================================================================================
File: lib/components/ui/Input.svelte
================================================================================

<!--
  /**
   * @file Input.svelte
   * @description A reusable input component for forms.
   *
   * @props
   * - type (string, default 'text'): The type of the input (e.g., 'text', 'email', 'password').
   * - id (string, required): The ID of the input, used for associating with a label.
   * - name (string, optional): The name of the input, useful for form submission. Defaults to id if not provided.
   * - label (string, optional): The label text to display for the input.
   * - placeholder (string, default ''): The placeholder text for the input.
   * - value (string, default '', bindable): The current value of the input. Two-way bindable using `bind:value`.
   * - required (boolean, default false): Whether the input is required.
   * - disabled (boolean, default false): Whether the input is disabled.
   * - class (string, default ''): Additional CSS classes to apply to the input wrapper.
   * - inputClass (string, default ''): Additional CSS classes to apply directly to the input element.
   * - labelClass (string, default ''): Additional CSS classes to apply directly to the label element.
   *
   * @events
   * - input: Fired when the input value changes. The event detail contains the new value.
   * - change: Fired when the input value changes and the element loses focus.
   * - blur: Fired when the input loses focus.
   * - focus: Fired when the input gains focus.
   *
   * @notes
   * - Uses Tailwind CSS for styling.
   * - Supports Svelte 5 runes for two-way binding with `bind:value`.
   * - The `value` prop is made bindable using `$bindable()`.
   */
  -->
<script lang="ts">
	import type { HTMLInputAttributes } from 'svelte/elements';

	interface $$Props extends Omit<HTMLInputAttributes, 'value'> {
		// Omit original value from HTMLInputAttributes
		type?: 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url';
		id: string;
		name?: string;
		label?: string;
		placeholder?: string;
		value?: string; // This will be the prop passed in for binding
		required?: boolean;
		disabled?: boolean;
		class?: string; // For the wrapper div
		inputClass?: string;
		labelClass?: string;
	}

	let {
		type = 'text',
		id,
		name = id,
		label = '',
		placeholder = '',
		value: initialValue = $bindable(''), // Use $bindable() for the prop intended for two-way binding
		required = false,
		disabled = false,
		class: wrapperClass = '',
		inputClass = '',
		labelClass = '',
		...restProps
	}: $$Props = $props();

	// The `initialValue` prop, which is now bindable, will automatically update
	// when `bind:value` is used on the component instance.
	// No need for an internal $state variable for `value` that mirrors the prop if using $bindable directly with the prop name.
	// The `value` in `<input bind:value... />` will now directly bind to the `initialValue` prop.
</script>

<div class="mb-4 {wrapperClass}">
	{#if label}
		<label for={id} class="mb-1 block text-sm font-medium text-gray-300 {labelClass}">
			{label}
			{#if required}<span class="text-red-500">*</span>{/if}
		</label>
	{/if}
	<input
		{type}
		{id}
		{name}
		{placeholder}
		bind:value={initialValue}
		{required}
		{disabled}
		class="w-full rounded-md border border-gray-600 bg-gray-700 px-3 py-2 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none {inputClass}"
		on:input
		on:change
		on:blur
		on:focus
		on:keydown
		on:keyup
		on:keypress
		{...restProps}
	/>
</div>



================================================================================
File: lib/index.ts
================================================================================

// place files you want to import through the `$lib` alias in this folder.



================================================================================
File: lib/paraglide/messages/_index.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from "../runtime.js"
import * as it from "./it.js"
import * as en from "./en.js"
import * as de from "./de.js"
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_loading = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_loading(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_loading", locale)
	if (locale === "it") return it.common_loading(inputs)
	if (locale === "en") return en.common_loading(inputs)
	return de.common_loading(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_submit = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_submit(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_submit", locale)
	if (locale === "it") return it.common_submit(inputs)
	if (locale === "en") return en.common_submit(inputs)
	return de.common_submit(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_cancel = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_cancel(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_cancel", locale)
	if (locale === "it") return it.common_cancel(inputs)
	if (locale === "en") return en.common_cancel(inputs)
	return de.common_cancel(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_error = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_error(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_error", locale)
	if (locale === "it") return it.common_error(inputs)
	if (locale === "en") return en.common_error(inputs)
	return de.common_error(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_tryagain1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_tryagain1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_tryagain1", locale)
	if (locale === "it") return it.common_tryagain1(inputs)
	if (locale === "en") return en.common_tryagain1(inputs)
	return de.common_tryagain1(inputs)
};
export { common_tryagain1 as "common_tryAgain" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_close = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_close(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_close", locale)
	if (locale === "it") return it.common_close(inputs)
	if (locale === "en") return en.common_close(inputs)
	return de.common_close(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_next = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_next(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_next", locale)
	if (locale === "it") return it.common_next(inputs)
	if (locale === "en") return en.common_next(inputs)
	return de.common_next(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_previous = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_previous(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_previous", locale)
	if (locale === "it") return it.common_previous(inputs)
	if (locale === "en") return en.common_previous(inputs)
	return de.common_previous(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_readmore1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_readmore1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_readmore1", locale)
	if (locale === "it") return it.common_readmore1(inputs)
	if (locale === "en") return en.common_readmore1(inputs)
	return de.common_readmore1(inputs)
};
export { common_readmore1 as "common_readMore" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_showless1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_showless1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_showless1", locale)
	if (locale === "it") return it.common_showless1(inputs)
	if (locale === "en") return en.common_showless1(inputs)
	return de.common_showless1(inputs)
};
export { common_showless1 as "common_showLess" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_home = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_home(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_home", locale)
	if (locale === "it") return it.navigation_home(inputs)
	if (locale === "en") return en.navigation_home(inputs)
	return de.navigation_home(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_about = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_about(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_about", locale)
	if (locale === "it") return it.navigation_about(inputs)
	if (locale === "en") return en.navigation_about(inputs)
	return de.navigation_about(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_visit = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_visit(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_visit", locale)
	if (locale === "it") return it.navigation_visit(inputs)
	if (locale === "en") return en.navigation_visit(inputs)
	return de.navigation_visit(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_contact = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_contact(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_contact", locale)
	if (locale === "it") return it.navigation_contact(inputs)
	if (locale === "en") return en.navigation_contact(inputs)
	return de.navigation_contact(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_book = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_book(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_book", locale)
	if (locale === "it") return it.navigation_book(inputs)
	if (locale === "en") return en.navigation_book(inputs)
	return de.navigation_book(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_shop = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_shop(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_shop", locale)
	if (locale === "it") return it.navigation_shop(inputs)
	if (locale === "en") return en.navigation_shop(inputs)
	return de.navigation_shop(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_exhibitions = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_exhibitions(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_exhibitions", locale)
	if (locale === "it") return it.navigation_exhibitions(inputs)
	if (locale === "en") return en.navigation_exhibitions(inputs)
	return de.navigation_exhibitions(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_collections = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_collections(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_collections", locale)
	if (locale === "it") return it.navigation_collections(inputs)
	if (locale === "en") return en.navigation_collections(inputs)
	return de.navigation_collections(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_events = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_events(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_events", locale)
	if (locale === "it") return it.navigation_events(inputs)
	if (locale === "en") return en.navigation_events(inputs)
	return de.navigation_events(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_news = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_news(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_news", locale)
	if (locale === "it") return it.navigation_news(inputs)
	if (locale === "en") return en.navigation_news(inputs)
	return de.navigation_news(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_en = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_en(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_en", locale)
	if (locale === "it") return it.languages_en(inputs)
	if (locale === "en") return en.languages_en(inputs)
	return de.languages_en(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_it = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_it(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_it", locale)
	if (locale === "it") return it.languages_it(inputs)
	if (locale === "en") return en.languages_it(inputs)
	return de.languages_it(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_de = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_de(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_de", locale)
	if (locale === "it") return it.languages_de(inputs)
	if (locale === "en") return en.languages_de(inputs)
	return de.languages_de(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_welcometitle1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_welcometitle1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_welcometitle1", locale)
	if (locale === "it") return it.museum_welcometitle1(inputs)
	if (locale === "en") return en.museum_welcometitle1(inputs)
	return de.museum_welcometitle1(inputs)
};
export { museum_welcometitle1 as "museum_welcomeTitle" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_welcomesubtitle1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_welcomesubtitle1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_welcomesubtitle1", locale)
	if (locale === "it") return it.museum_welcomesubtitle1(inputs)
	if (locale === "en") return en.museum_welcomesubtitle1(inputs)
	return de.museum_welcomesubtitle1(inputs)
};
export { museum_welcomesubtitle1 as "museum_welcomeSubtitle" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_openinghours1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_openinghours1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_openinghours1", locale)
	if (locale === "it") return it.museum_openinghours1(inputs)
	if (locale === "en") return en.museum_openinghours1(inputs)
	return de.museum_openinghours1(inputs)
};
export { museum_openinghours1 as "museum_openingHours" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_admissionfees1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_admissionfees1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_admissionfees1", locale)
	if (locale === "it") return it.museum_admissionfees1(inputs)
	if (locale === "en") return en.museum_admissionfees1(inputs)
	return de.museum_admissionfees1(inputs)
};
export { museum_admissionfees1 as "museum_admissionFees" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const museum_location = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_location(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_location", locale)
	if (locale === "it") return it.museum_location(inputs)
	if (locale === "en") return en.museum_location(inputs)
	return de.museum_location(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const museum_accessibility = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_accessibility(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_accessibility", locale)
	if (locale === "it") return it.museum_accessibility(inputs)
	if (locale === "en") return en.museum_accessibility(inputs)
	return de.museum_accessibility(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_current = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_current(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_current", locale)
	if (locale === "it") return it.exhibitions_current(inputs)
	if (locale === "en") return en.exhibitions_current(inputs)
	return de.exhibitions_current(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_upcoming = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_upcoming(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_upcoming", locale)
	if (locale === "it") return it.exhibitions_upcoming(inputs)
	if (locale === "en") return en.exhibitions_upcoming(inputs)
	return de.exhibitions_upcoming(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_past = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_past(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_past", locale)
	if (locale === "it") return it.exhibitions_past(inputs)
	if (locale === "en") return en.exhibitions_past(inputs)
	return de.exhibitions_past(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_permanent = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_permanent(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_permanent", locale)
	if (locale === "it") return it.exhibitions_permanent(inputs)
	if (locale === "en") return en.exhibitions_permanent(inputs)
	return de.exhibitions_permanent(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_temporary = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_temporary(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_temporary", locale)
	if (locale === "it") return it.exhibitions_temporary(inputs)
	if (locale === "en") return en.exhibitions_temporary(inputs)
	return de.exhibitions_temporary(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_featured = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_featured(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_featured", locale)
	if (locale === "it") return it.exhibitions_featured(inputs)
	if (locale === "en") return en.exhibitions_featured(inputs)
	return de.exhibitions_featured(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const exhibitions_viewdetails1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_viewdetails1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_viewdetails1", locale)
	if (locale === "it") return it.exhibitions_viewdetails1(inputs)
	if (locale === "en") return en.exhibitions_viewdetails1(inputs)
	return de.exhibitions_viewdetails1(inputs)
};
export { exhibitions_viewdetails1 as "exhibitions_viewDetails" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_duration = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_duration(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_duration", locale)
	if (locale === "it") return it.exhibitions_duration(inputs)
	if (locale === "en") return en.exhibitions_duration(inputs)
	return de.exhibitions_duration(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_curator = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_curator(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_curator", locale)
	if (locale === "it") return it.exhibitions_curator(inputs)
	if (locale === "en") return en.exhibitions_curator(inputs)
	return de.exhibitions_curator(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_sponsors = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_sponsors(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_sponsors", locale)
	if (locale === "it") return it.exhibitions_sponsors(inputs)
	if (locale === "en") return en.exhibitions_sponsors(inputs)
	return de.exhibitions_sponsors(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_title = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_title(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_title", locale)
	if (locale === "it") return it.booking_title(inputs)
	if (locale === "en") return en.booking_title(inputs)
	return de.booking_title(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_selectdate1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_selectdate1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_selectdate1", locale)
	if (locale === "it") return it.booking_selectdate1(inputs)
	if (locale === "en") return en.booking_selectdate1(inputs)
	return de.booking_selectdate1(inputs)
};
export { booking_selectdate1 as "booking_selectDate" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_selecttime1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_selecttime1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_selecttime1", locale)
	if (locale === "it") return it.booking_selecttime1(inputs)
	if (locale === "en") return en.booking_selecttime1(inputs)
	return de.booking_selecttime1(inputs)
};
export { booking_selecttime1 as "booking_selectTime" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_adults = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_adults(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_adults", locale)
	if (locale === "it") return it.booking_adults(inputs)
	if (locale === "en") return en.booking_adults(inputs)
	return de.booking_adults(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_children = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_children(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_children", locale)
	if (locale === "it") return it.booking_children(inputs)
	if (locale === "en") return en.booking_children(inputs)
	return de.booking_children(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_students = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_students(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_students", locale)
	if (locale === "it") return it.booking_students(inputs)
	if (locale === "en") return en.booking_students(inputs)
	return de.booking_students(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_seniors = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_seniors(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_seniors", locale)
	if (locale === "it") return it.booking_seniors(inputs)
	if (locale === "en") return en.booking_seniors(inputs)
	return de.booking_seniors(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_groups = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_groups(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_groups", locale)
	if (locale === "it") return it.booking_groups(inputs)
	if (locale === "en") return en.booking_groups(inputs)
	return de.booking_groups(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_guidedtour1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_guidedtour1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_guidedtour1", locale)
	if (locale === "it") return it.booking_guidedtour1(inputs)
	if (locale === "en") return en.booking_guidedtour1(inputs)
	return de.booking_guidedtour1(inputs)
};
export { booking_guidedtour1 as "booking_guidedTour" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_audioguide1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_audioguide1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_audioguide1", locale)
	if (locale === "it") return it.booking_audioguide1(inputs)
	if (locale === "en") return en.booking_audioguide1(inputs)
	return de.booking_audioguide1(inputs)
};
export { booking_audioguide1 as "booking_audioGuide" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_total = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_total(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_total", locale)
	if (locale === "it") return it.booking_total(inputs)
	if (locale === "en") return en.booking_total(inputs)
	return de.booking_total(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_proceed = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_proceed(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_proceed", locale)
	if (locale === "it") return it.booking_proceed(inputs)
	if (locale === "en") return en.booking_proceed(inputs)
	return de.booking_proceed(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_confirmation = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_confirmation(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_confirmation", locale)
	if (locale === "it") return it.booking_confirmation(inputs)
	if (locale === "en") return en.booking_confirmation(inputs)
	return de.booking_confirmation(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_planyourvisit2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_planyourvisit2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_planyourvisit2", locale)
	if (locale === "it") return it.visit_planyourvisit2(inputs)
	if (locale === "en") return en.visit_planyourvisit2(inputs)
	return de.visit_planyourvisit2(inputs)
};
export { visit_planyourvisit2 as "visit_planYourVisit" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_beforeyoucome2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_beforeyoucome2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_beforeyoucome2", locale)
	if (locale === "it") return it.visit_beforeyoucome2(inputs)
	if (locale === "en") return en.visit_beforeyoucome2(inputs)
	return de.visit_beforeyoucome2(inputs)
};
export { visit_beforeyoucome2 as "visit_beforeYouCome" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_whattoexpect2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_whattoexpect2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_whattoexpect2", locale)
	if (locale === "it") return it.visit_whattoexpect2(inputs)
	if (locale === "en") return en.visit_whattoexpect2(inputs)
	return de.visit_whattoexpect2(inputs)
};
export { visit_whattoexpect2 as "visit_whatToExpect" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_facilities = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_facilities(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_facilities", locale)
	if (locale === "it") return it.visit_facilities(inputs)
	if (locale === "en") return en.visit_facilities(inputs)
	return de.visit_facilities(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_cafeteria = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_cafeteria(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_cafeteria", locale)
	if (locale === "it") return it.visit_cafeteria(inputs)
	if (locale === "en") return en.visit_cafeteria(inputs)
	return de.visit_cafeteria(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_giftshop1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_giftshop1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_giftshop1", locale)
	if (locale === "it") return it.visit_giftshop1(inputs)
	if (locale === "en") return en.visit_giftshop1(inputs)
	return de.visit_giftshop1(inputs)
};
export { visit_giftshop1 as "visit_giftShop" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_parking = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_parking(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_parking", locale)
	if (locale === "it") return it.visit_parking(inputs)
	if (locale === "en") return en.visit_parking(inputs)
	return de.visit_parking(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_wheelchairaccess1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_wheelchairaccess1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_wheelchairaccess1", locale)
	if (locale === "it") return it.visit_wheelchairaccess1(inputs)
	if (locale === "en") return en.visit_wheelchairaccess1(inputs)
	return de.visit_wheelchairaccess1(inputs)
};
export { visit_wheelchairaccess1 as "visit_wheelchairAccess" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_familyfriendly1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_familyfriendly1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_familyfriendly1", locale)
	if (locale === "it") return it.visit_familyfriendly1(inputs)
	if (locale === "en") return en.visit_familyfriendly1(inputs)
	return de.visit_familyfriendly1(inputs)
};
export { visit_familyfriendly1 as "visit_familyFriendly" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_getintouch2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_getintouch2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_getintouch2", locale)
	if (locale === "it") return it.contact_getintouch2(inputs)
	if (locale === "en") return en.contact_getintouch2(inputs)
	return de.contact_getintouch2(inputs)
};
export { contact_getintouch2 as "contact_getInTouch" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_address = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_address(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_address", locale)
	if (locale === "it") return it.contact_address(inputs)
	if (locale === "en") return en.contact_address(inputs)
	return de.contact_address(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_phone = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_phone(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_phone", locale)
	if (locale === "it") return it.contact_phone(inputs)
	if (locale === "en") return en.contact_phone(inputs)
	return de.contact_phone(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_email = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_email(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_email", locale)
	if (locale === "it") return it.contact_email(inputs)
	if (locale === "en") return en.contact_email(inputs)
	return de.contact_email(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_socialmedia1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_socialmedia1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_socialmedia1", locale)
	if (locale === "it") return it.contact_socialmedia1(inputs)
	if (locale === "en") return en.contact_socialmedia1(inputs)
	return de.contact_socialmedia1(inputs)
};
export { contact_socialmedia1 as "contact_socialMedia" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_sendmessage1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_sendmessage1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_sendmessage1", locale)
	if (locale === "it") return it.contact_sendmessage1(inputs)
	if (locale === "en") return en.contact_sendmessage1(inputs)
	return de.contact_sendmessage1(inputs)
};
export { contact_sendmessage1 as "contact_sendMessage" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_yourname1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_yourname1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_yourname1", locale)
	if (locale === "it") return it.contact_yourname1(inputs)
	if (locale === "en") return en.contact_yourname1(inputs)
	return de.contact_yourname1(inputs)
};
export { contact_yourname1 as "contact_yourName" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_youremail1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_youremail1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_youremail1", locale)
	if (locale === "it") return it.contact_youremail1(inputs)
	if (locale === "en") return en.contact_youremail1(inputs)
	return de.contact_youremail1(inputs)
};
export { contact_youremail1 as "contact_yourEmail" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_subject = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_subject(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_subject", locale)
	if (locale === "it") return it.contact_subject(inputs)
	if (locale === "en") return en.contact_subject(inputs)
	return de.contact_subject(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_message = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_message(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_message", locale)
	if (locale === "it") return it.contact_message(inputs)
	if (locale === "en") return en.contact_message(inputs)
	return de.contact_message(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_messagesent1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_messagesent1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_messagesent1", locale)
	if (locale === "it") return it.contact_messagesent1(inputs)
	if (locale === "en") return en.contact_messagesent1(inputs)
	return de.contact_messagesent1(inputs)
};
export { contact_messagesent1 as "contact_messageSent" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_copyright = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_copyright(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_copyright", locale)
	if (locale === "it") return it.footer_copyright(inputs)
	if (locale === "en") return en.footer_copyright(inputs)
	return de.footer_copyright(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_privacy = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_privacy(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_privacy", locale)
	if (locale === "it") return it.footer_privacy(inputs)
	if (locale === "en") return en.footer_privacy(inputs)
	return de.footer_privacy(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_terms = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_terms(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_terms", locale)
	if (locale === "it") return it.footer_terms(inputs)
	if (locale === "en") return en.footer_terms(inputs)
	return de.footer_terms(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_newsletter = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_newsletter(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_newsletter", locale)
	if (locale === "it") return it.footer_newsletter(inputs)
	if (locale === "en") return en.footer_newsletter(inputs)
	return de.footer_newsletter(inputs)
};
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const footer_followus1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_followus1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_followus1", locale)
	if (locale === "it") return it.footer_followus1(inputs)
	if (locale === "en") return en.footer_followus1(inputs)
	return de.footer_followus1(inputs)
};
export { footer_followus1 as "footer_followUs" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const footer_supportedby1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_supportedby1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_supportedby1", locale)
	if (locale === "it") return it.footer_supportedby1(inputs)
	if (locale === "en") return en.footer_supportedby1(inputs)
	return de.footer_supportedby1(inputs)
};
export { footer_supportedby1 as "footer_supportedBy" }
/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "it" | "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_whattoexpected2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_whattoexpected2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_whattoexpected2", locale)
	if (locale === "it") return it.visit_whattoexpected2(inputs)
	if (locale === "en") return en.visit_whattoexpected2(inputs)
	return de.visit_whattoexpected2(inputs)
};
export { visit_whattoexpected2 as "visit_whatToExpected" }


================================================================================
File: lib/paraglide/messages/de.js
================================================================================

// eslint-disable


export const common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Wird geladen...`
};

export const common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Absenden`
};

export const common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Abbrechen`
};

export const common_error = /** @type {(inputs: {}) => string} */ () => {
	return `Ein Fehler ist aufgetreten`
};

export const common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Erneut versuchen`
};

export const common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Schließen`
};

export const common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Weiter`
};

export const common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Zurück`
};

export const common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Weiterlesen`
};

export const common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Weniger anzeigen`
};

export const navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Startseite`
};

export const navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `Über uns`
};

export const navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Besuch planen`
};

export const navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Kontakt`
};

export const navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Tickets buchen`
};

export const navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Museumsshop`
};

export const navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Ausstellungen`
};

export const navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Sammlungen`
};

export const navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Veranstaltungen`
};

export const navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `Nachrichten`
};

export const languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `Englisch`
};

export const languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italienisch`
};

export const languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `Deutsch`
};

export const museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Willkommen im Museum von Zungri`
};

export const museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Entdecken Sie die reiche Geschichte und Traditionen Süditaliens`
};

export const museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `Öffnungszeiten`
};

export const museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Eintrittspreise`
};

export const museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `Anfahrt`
};

export const museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Barrierefreiheit`
};

export const exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Aktuelle Ausstellungen`
};

export const exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Kommende Ausstellungen`
};

export const exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Vergangene Ausstellungen`
};

export const exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Dauerausstellung`
};

export const exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Sonderausstellungen`
};

export const exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Hauptausstellung`
};

export const exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `Details anzeigen`
};

export const exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Dauer`
};

export const exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Kurator`
};

export const exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsoren`
};

export const booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Besuch buchen`
};

export const booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Datum auswählen`
};

export const booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Zeit auswählen`
};

export const booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Erwachsene`
};

export const booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Kinder`
};

export const booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Studenten`
};

export const booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Senioren`
};

export const booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Gruppen`
};

export const booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `Führung`
};

export const booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audioführung`
};

export const booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Gesamt`
};

export const booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Zur Zahlung`
};

export const booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Buchungsbestätigung`
};

export const visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihren Besuch planen`
};

export const visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Vor Ihrem Besuch`
};
export { visit_whattoexpect2 } from "./it.js"

export const visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Einrichtungen`
};

export const visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Cafeteria`
};

export const visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Geschenkeladen`
};

export const visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parkplatz`
};

export const visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Rollstuhlzugang`
};

export const visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Familienfreundlich`
};

export const contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Kontakt aufnehmen`
};

export const contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Adresse`
};

export const contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Telefon`
};

export const contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `E-Mail`
};

export const contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Soziale Medien`
};

export const contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht senden`
};

export const contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihr Name`
};

export const contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihre E-Mail`
};

export const contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Betreff`
};

export const contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht`
};

export const contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht erfolgreich gesendet`
};

export const footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `© 2025 Museum von Zungri. Alle Rechte vorbehalten.`
};

export const footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Datenschutz`
};

export const footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Nutzungsbedingungen`
};

export const footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Newsletter abonnieren`
};

export const footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Folgen Sie uns`
};

export const footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Unterstützt von`
};

export const visit_whattoexpected2 = /** @type {(inputs: {}) => string} */ () => {
	return `Was Sie erwartet`
};


================================================================================
File: lib/paraglide/messages/en.js
================================================================================

// eslint-disable


export const common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Loading...`
};

export const common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Submit`
};

export const common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Cancel`
};

export const common_error = /** @type {(inputs: {}) => string} */ () => {
	return `An error occurred`
};

export const common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Try again`
};

export const common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Close`
};

export const common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Next`
};

export const common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Previous`
};

export const common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Read more`
};

export const common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Show less`
};

export const navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Home`
};

export const navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `About`
};

export const navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Plan Your Visit`
};

export const navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Contact Us`
};

export const navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Book Tickets`
};

export const navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Museum Shop`
};

export const navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Exhibitions`
};

export const navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Collections`
};

export const navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Events`
};

export const navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `News`
};

export const languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `English`
};

export const languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italian`
};

export const languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `German`
};

export const museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Welcome to Zungri Museum`
};

export const museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Discover the rich history and traditions of Southern Italy`
};

export const museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `Opening Hours`
};

export const museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Admission Fees`
};

export const museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `How to Reach Us`
};

export const museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Accessibility`
};

export const exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Current Exhibitions`
};

export const exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Upcoming Exhibitions`
};

export const exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Past Exhibitions`
};

export const exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Permanent Collection`
};

export const exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Temporary Exhibitions`
};

export const exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Featured Exhibition`
};

export const exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `View Details`
};

export const exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Duration`
};

export const exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Curator`
};

export const exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsors`
};

export const booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Book Your Visit`
};

export const booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Select Date`
};

export const booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Select Time`
};

export const booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Adults`
};

export const booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Children`
};

export const booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Students`
};

export const booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Seniors`
};

export const booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Groups`
};

export const booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `Guided Tour`
};

export const booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audio Guide`
};

export const booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Total`
};

export const booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Proceed to Payment`
};

export const booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Booking Confirmation`
};

export const visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Plan Your Visit`
};

export const visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Before You Come`
};
export { visit_whattoexpect2 } from "./it.js"

export const visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Facilities`
};

export const visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Cafeteria`
};

export const visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Gift Shop`
};

export const visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parking`
};

export const visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Wheelchair Access`
};

export const visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Family Friendly`
};

export const contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Get In Touch`
};

export const contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Address`
};

export const contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Phone`
};

export const contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `Email`
};

export const contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Social Media`
};

export const contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Send Message`
};

export const contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Your Name`
};

export const contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `Your Email`
};

export const contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Subject`
};

export const contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Message`
};

export const contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Message Sent Successfully`
};

export const footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `© 2025 Zungri Museum. All rights reserved.`
};

export const footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Privacy Policy`
};

export const footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Terms and Conditions`
};

export const footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Subscribe to Newsletter`
};

export const footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Follow Us`
};

export const footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Supported by`
};

export const visit_whattoexpected2 = /** @type {(inputs: {}) => string} */ () => {
	return `What to Expect`
};


================================================================================
File: lib/paraglide/messages/it.js
================================================================================

// eslint-disable


export const common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Caricamento in corso...`
};

export const common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Invia`
};

export const common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Annulla`
};

export const common_error = /** @type {(inputs: {}) => string} */ () => {
	return `Si è verificato un errore`
};

export const common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Riprova`
};

export const common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Chiudi`
};

export const common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Successivo`
};

export const common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Precedente`
};

export const common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Leggi di più`
};

export const common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Mostra meno`
};

export const navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Home`
};

export const navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `Chi Siamo`
};

export const navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Pianifica la Visita`
};

export const navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Contatti`
};

export const navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Prenota Biglietti`
};

export const navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Negozio del Museo`
};

export const navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Mostre`
};

export const navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Collezioni`
};

export const navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Eventi`
};

export const navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `Notizie`
};

export const languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `English`
};

export const languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italiano`
};

export const languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `Deutsch`
};

export const museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Benvenuti al Museo di Zungri`
};

export const museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Scopri la ricca storia e tradizioni del Sud Italia`
};

export const museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `Orari di Apertura`
};

export const museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Prezzi dei Biglietti`
};

export const museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `Come Raggiungerci`
};

export const museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Accessibilità`
};

export const exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Mostre Attuali`
};

export const exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Prossime Mostre`
};

export const exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Mostre Passate`
};

export const exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Collezione Permanente`
};

export const exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Mostre Temporanee`
};

export const exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Mostra in Evidenza`
};

export const exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `Vedi Dettagli`
};

export const exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Durata`
};

export const exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Curatore`
};

export const exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsor`
};

export const booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Prenota la Tua Visita`
};

export const booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Seleziona Data`
};

export const booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Seleziona Orario`
};

export const booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Adulti`
};

export const booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Bambini`
};

export const booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Studenti`
};

export const booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Anziani`
};

export const booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Gruppi`
};

export const booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `Visita Guidata`
};

export const booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audioguida`
};

export const booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Totale`
};

export const booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Procedi al Pagamento`
};

export const booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Conferma Prenotazione`
};

export const visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Pianifica la Tua Visita`
};

export const visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Prima di Venire`
};

export const visit_whattoexpect2 = /** @type {(inputs: {}) => string} */ () => {
	return `Cosa Aspettarsi`
};

export const visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Servizi`
};

export const visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Caffetteria`
};

export const visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Negozio di Souvenir`
};

export const visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parcheggio`
};

export const visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Accesso per Sedie a Rotelle`
};

export const visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Adatto alle Famiglie`
};

export const contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Contattaci`
};

export const contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Indirizzo`
};

export const contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Telefono`
};

export const contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `Email`
};

export const contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Social Media`
};

export const contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Invia Messaggio`
};

export const contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Il Tuo Nome`
};

export const contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `La Tua Email`
};

export const contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Oggetto`
};

export const contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Messaggio`
};

export const contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Messaggio Inviato con Successo`
};

export const footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `© 2025 Museo di Zungri. Tutti i diritti riservati.`
};

export const footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Privacy Policy`
};

export const footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Termini e Condizioni`
};

export const footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Iscriviti alla Newsletter`
};

export const footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Seguici`
};

export const footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Con il sostegno di`
};
/** @type {(inputs: {}) => string} */
export const visit_whattoexpected2 = () => 'visit_whatToExpected'


================================================================================
File: lib/paraglide/messages.js
================================================================================

// eslint-disable
export * from './messages/_index.js'
// enabling auto-import by exposing all messages as m
export * as m from './messages/_index.js'


================================================================================
File: lib/paraglide/registry.js
================================================================================

// eslint-disable

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.PluralRulesOptions} [options]
 * @returns {string}
 */
export function plural(locale, input, options) { 
	return new Intl.PluralRules(locale, options).select(Number(input))
};

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.NumberFormatOptions} [options]
 * @returns {string}
 */
export function number(locale, input, options) {
	return new Intl.NumberFormat(locale, options).format(Number(input))
};

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.DateTimeFormatOptions} [options]
 * @returns {string}
 */
export function datetime(locale, input, options) {
	return new Intl.DateTimeFormat(locale, options).format(new Date(/** @type {string} */ (input)))
};


================================================================================
File: lib/paraglide/runtime.js
================================================================================

// eslint-disable

/** @type {any} */
const URLPattern = {}

/**
 * The project's base locale.
 *
 * @example
 *   if (locale === baseLocale) {
 *     // do something
 *   }
 */
export const baseLocale = "it";
/**
 * The project's locales that have been specified in the settings.
 *
 * @example
 *   if (locales.includes(userSelectedLocale) === false) {
 *     throw new Error('Locale is not available');
 *   }
 */
export const locales = /** @type {const} */ (["it", "en", "de"]);
/** @type {string} */
export const cookieName = "PARAGLIDE_LOCALE";
/** @type {number} */
export const cookieMaxAge = 34560000;
/** @type {string} */
export const cookieDomain = "";
/** @type {string} */
export const localStorageKey = "PARAGLIDE_LOCALE";
/**
 * @type {Array<"cookie" | "baseLocale" | "globalVariable" | "url" | "preferredLanguage" | "localStorage" | `custom-${string}`>}
 */
export const strategy = [
  "url",
  "cookie",
  "baseLocale"
];
/**
 * The used URL patterns.
 *
 * @type {Array<{ pattern: string, localized: Array<[Locale, string]> }> }
 */
export const urlPatterns = [
  {
    "pattern": ":protocol://:domain(.*)::port?/:path(.*)?",
    "localized": [
      [
        "en",
        ":protocol://:domain(.*)::port?/en/:path(.*)?"
      ],
      [
        "de",
        ":protocol://:domain(.*)::port?/de/:path(.*)?"
      ],
      [
        "it",
        ":protocol://:domain(.*)::port?/:path(.*)?"
      ]
    ]
  }
];
/**
 * @typedef {{
 * 		getStore(): {
 *   		locale?: Locale,
 * 			origin?: string,
 * 			messageCalls?: Set<string>
 *   	} | undefined,
 * 		run: (store: { locale?: Locale, origin?: string, messageCalls?: Set<string>},
 *    cb: any) => any
 * }} ParaglideAsyncLocalStorage
 */
/**
 * Server side async local storage that is set by `serverMiddleware()`.
 *
 * The variable is used to retrieve the locale and origin in a server-side
 * rendering context without effecting other requests.
 *
 * @type {ParaglideAsyncLocalStorage | undefined}
 */
export let serverAsyncLocalStorage = undefined;
export const disableAsyncLocalStorage = false;
export const experimentalMiddlewareLocaleSplitting = false;
export const isServer = import.meta.env?.SSR ?? typeof window === 'undefined';
/**
 * Sets the server side async local storage.
 *
 * The function is needed because the `runtime.js` file
 * must define the `serverAsyncLocalStorage` variable to
 * avoid a circular import between `runtime.js` and
 * `server.js` files.
 *
 * @param {ParaglideAsyncLocalStorage | undefined} value
 */
export function overwriteServerAsyncLocalStorage(value) {
    serverAsyncLocalStorage = value;
}
const TREE_SHAKE_COOKIE_STRATEGY_USED = true;
const TREE_SHAKE_URL_STRATEGY_USED = true;
const TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED = false;
const TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED = false;
const TREE_SHAKE_DEFAULT_URL_PATTERN_USED = true;
const TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED = false;

globalThis.__paraglide = {}

/**
 * This is a fallback to get started with a custom
 * strategy and avoid type errors.
 *
 * The implementation is overwritten
 * by \`overwriteGetLocale()\` and \`defineSetLocale()\`.
 *
 * @type {Locale|undefined}
 */
let _locale;
let localeInitiallySet = false;
/**
 * Get the current locale.
 *
 * @example
 *   if (getLocale() === 'de') {
 *     console.log('Germany 🇩🇪');
 *   } else if (getLocale() === 'nl') {
 *     console.log('Netherlands 🇳🇱');
 *   }
 *
 * @type {() => Locale}
 */
export let getLocale = () => {
    /** @type {string | undefined} */
    let locale;
    // if running in a server-side rendering context
    // retrieve the locale from the async local storage
    if (serverAsyncLocalStorage) {
        const locale = serverAsyncLocalStorage?.getStore()?.locale;
        if (locale) {
            return locale;
        }
    }
    for (const strat of strategy) {
        if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            locale = extractLocaleFromCookie();
        }
        else if (strat === "baseLocale") {
            locale = baseLocale;
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED &&
            strat === "url" &&
            !isServer &&
            typeof window !== "undefined") {
            locale = extractLocaleFromUrl(window.location.href);
        }
        else if (TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED &&
            strat === "globalVariable" &&
            _locale !== undefined) {
            locale = _locale;
        }
        else if (TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED &&
            strat === "preferredLanguage" &&
            !isServer) {
            locale = extractLocaleFromNavigator();
        }
        else if (TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED &&
            strat === "localStorage" &&
            !isServer) {
            locale = localStorage.getItem(localStorageKey) ?? undefined;
        }
        else if (isCustomStrategy(strat) && customClientStrategies.has(strat)) {
            const handler = customClientStrategies.get(strat);
            locale = handler.getLocale();
        }
        // check if match, else continue loop
        if (locale !== undefined) {
            const asserted = assertIsLocale(locale);
            if (!localeInitiallySet) {
                _locale = asserted;
                // https://github.com/opral/inlang-paraglide-js/issues/455
                localeInitiallySet = true;
                setLocale(asserted, { reload: false });
            }
            return asserted;
        }
    }
    throw new Error("No locale found. Read the docs https://inlang.com/m/gerre34r/library-inlang-paraglideJs/errors#no-locale-found");
};
/**
 * Overwrite the \`getLocale()\` function.
 *
 * Use this function to overwrite how the locale is resolved. For example,
 * you can resolve the locale from the browser's preferred language,
 * a cookie, env variable, or a user's preference.
 *
 * @example
 *   overwriteGetLocale(() => {
 *     // resolve the locale from a cookie. fallback to the base locale.
 *     return Cookies.get('locale') ?? baseLocale
 *   }
 *
 * @type {(fn: () => Locale) => void}
 */
export const overwriteGetLocale = (fn) => {
    getLocale = fn;
};

/**
 * Set the locale.
 *
 * Set locale reloads the site by default on the client. Reloading
 * can be disabled by passing \`reload: false\` as an option. If
 * reloading is disabled, you need to ensure that the UI is updated
 * to reflect the new locale.
 *
 * @example
 *   setLocale('en');
 *
 * @example
 *   setLocale('en', { reload: false });
 *
 * @type {(newLocale: Locale, options?: { reload?: boolean }) => void}
 */
export let setLocale = (newLocale, options) => {
    const optionsWithDefaults = {
        reload: true,
        ...options,
    };
    // locale is already set
    // https://github.com/opral/inlang-paraglide-js/issues/430
    let currentLocale;
    try {
        currentLocale = getLocale();
    }
    catch {
        // do nothing, no locale has been set yet.
    }
    /** @type {string | undefined} */
    let newLocation = undefined;
    for (const strat of strategy) {
        if (TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED &&
            strat === "globalVariable") {
            // a default for a custom strategy to get started quickly
            // is likely overwritten by `defineSetLocale()`
            _locale = newLocale;
        }
        else if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            if (isServer ||
                typeof document === "undefined" ||
                typeof window === "undefined") {
                continue;
            }
            const domain = cookieDomain || window.location.hostname;
            // set the cookie
            document.cookie = `${cookieName}=${newLocale}; path=/; max-age=${cookieMaxAge}; domain=${domain}`;
        }
        else if (strat === "baseLocale") {
            // nothing to be set here. baseLocale is only a fallback
            continue;
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED &&
            strat === "url" &&
            typeof window !== "undefined") {
            // route to the new url
            //
            // this triggers a page reload but a user rarely
            // switches locales, so this should be fine.
            //
            // if the behavior is not desired, the implementation
            // can be overwritten by `defineSetLocale()` to avoid
            // a full page reload.
            newLocation = localizeUrl(window.location.href, {
                locale: newLocale,
            }).href;
        }
        else if (TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED &&
            strat === "localStorage" &&
            typeof window !== "undefined") {
            // set the localStorage
            localStorage.setItem(localStorageKey, newLocale);
        }
        else if (isCustomStrategy(strat) && customClientStrategies.has(strat)) {
            const handler = customClientStrategies.get(strat);
            handler.setLocale(newLocale);
        }
    }
    if (!isServer &&
        optionsWithDefaults.reload &&
        window.location &&
        newLocale !== currentLocale) {
        if (newLocation) {
            // reload the page by navigating to the new url
            window.location.href = newLocation;
        }
        else {
            // reload the page to reflect the new locale
            window.location.reload();
        }
    }
    return;
};
/**
 * Overwrite the \`setLocale()\` function.
 *
 * Use this function to overwrite how the locale is set. For example,
 * modify a cookie, env variable, or a user's preference.
 *
 * @example
 *   overwriteSetLocale((newLocale) => {
 *     // set the locale in a cookie
 *     return Cookies.set('locale', newLocale)
 *   });
 *
 * @param {(newLocale: Locale) => void} fn
 */
export const overwriteSetLocale = (fn) => {
    setLocale = fn;
};

/**
 * The origin of the current URL.
 *
 * Defaults to "http://y.com" in non-browser environments. If this
 * behavior is not desired, the implementation can be overwritten
 * by `overwriteGetUrlOrigin()`.
 *
 * @type {() => string}
 */
export let getUrlOrigin = () => {
    if (serverAsyncLocalStorage) {
        return serverAsyncLocalStorage.getStore()?.origin ?? "http://fallback.com";
    }
    else if (typeof window !== "undefined") {
        return window.location.origin;
    }
    return "http://fallback.com";
};
/**
 * Overwrite the getUrlOrigin function.
 *
 * Use this function in server environments to
 * define how the URL origin is resolved.
 *
 * @type {(fn: () => string) => void}
 */
export let overwriteGetUrlOrigin = (fn) => {
    getUrlOrigin = fn;
};

/**
 * Check if something is an available locale.
 *
 * @example
 *   if (isLocale(params.locale)) {
 *     setLocale(params.locale);
 *   } else {
 *     setLocale('en');
 *   }
 *
 * @param {any} locale
 * @returns {locale is Locale}
 */
export function isLocale(locale) {
    return !locale ? false : locales.includes(locale);
}

/**
 * Asserts that the input is a locale.
 *
 * @param {any} input - The input to check.
 * @returns {Locale} The input if it is a locale.
 * @throws {Error} If the input is not a locale.
 */
export function assertIsLocale(input) {
    if (isLocale(input) === false) {
        throw new Error(`Invalid locale: ${input}. Expected one of: ${locales.join(", ")}`);
    }
    return input;
}

/**
 * Extracts a locale from a request.
 *
 * Use the function on the server to extract the locale
 * from a request.
 *
 * The function goes through the strategies in the order
 * they are defined. If a strategy returns an invalid locale,
 * it will fall back to the next strategy.
 *
 * @example
 *   const locale = extractLocaleFromRequest(request);
 *
 * @type {(request: Request) => Locale}
 */
export const extractLocaleFromRequest = (request) => {
    /** @type {string|undefined} */
    let locale;
    for (const strat of strategy) {
        if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            locale = request.headers
                .get("cookie")
                ?.split("; ")
                .find((c) => c.startsWith(cookieName + "="))
                ?.split("=")[1];
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED && strat === "url") {
            locale = extractLocaleFromUrl(request.url);
        }
        else if (TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED &&
            strat === "preferredLanguage") {
            locale = extractLocaleFromHeader(request);
        }
        else if (strat === "globalVariable") {
            locale = _locale;
        }
        else if (strat === "baseLocale") {
            return baseLocale;
        }
        else if (strat === "localStorage") {
            continue;
        }
        else if (isCustomStrategy(strat) && customServerStrategies.has(strat)) {
            const handler = customServerStrategies.get(strat);
            locale = handler.getLocale(request);
        }
        if (locale !== undefined) {
            if (!isLocale(locale)) {
                locale = undefined;
            }
            else {
                return assertIsLocale(locale);
            }
        }
    }
    throw new Error("No locale found. There is an error in your strategy. Try adding 'baseLocale' as the very last strategy. Read more here https://inlang.com/m/gerre34r/library-inlang-paraglideJs/errors#no-locale-found");
};

/**
 * Extracts a cookie from the document.
 *
 * Will return undefined if the document is not available or if the cookie is not set.
 * The `document` object is not available in server-side rendering, so this function should not be called in that context.
 *
 * @returns {string | undefined}
 */
export function extractLocaleFromCookie() {
    if (typeof document === "undefined" || !document.cookie) {
        return;
    }
    const match = document.cookie.match(new RegExp(`(^| )${cookieName}=([^;]+)`));
    const locale = match?.[2];
    if (isLocale(locale)) {
        return locale;
    }
    return undefined;
}

/**
 * Extracts a locale from the accept-language header.
 *
 * Use the function on the server to extract the locale
 * from the accept-language header that is sent by the client.
 *
 * @example
 *   const locale = extractLocaleFromHeader(request);
 *
 * @type {(request: Request) => Locale}
 * @param {Request} request - The request object to extract the locale from.
 * @returns {string|undefined} The negotiated preferred language.
 */
export function extractLocaleFromHeader(request) {
    const acceptLanguageHeader = request.headers.get("accept-language");
    if (acceptLanguageHeader) {
        // Parse language preferences with their q-values and base language codes
        const languages = acceptLanguageHeader
            .split(",")
            .map((lang) => {
            const [tag, q = "1"] = lang.trim().split(";q=");
            // Get both the full tag and base language code
            const baseTag = tag?.split("-")[0]?.toLowerCase();
            return {
                fullTag: tag?.toLowerCase(),
                baseTag,
                q: Number(q),
            };
        })
            .sort((a, b) => b.q - a.q);
        for (const lang of languages) {
            if (isLocale(lang.fullTag)) {
                return lang.fullTag;
            }
            else if (isLocale(lang.baseTag)) {
                return lang.baseTag;
            }
        }
        return undefined;
    }
    return undefined;
}

/**
 * Negotiates a preferred language from navigator.languages.
 *
 * Use the function on the client to extract the locale
 * from the navigator.languages array.
 *
 * @example
 *   const locale = extractLocaleFromNavigator();
 *
 * @type {() => Locale | undefined}
 * @returns {string | undefined}
 */
export function extractLocaleFromNavigator() {
    if (!navigator?.languages?.length) {
        return undefined;
    }
    const languages = navigator.languages.map((lang) => ({
        fullTag: lang.toLowerCase(),
        baseTag: lang.split("-")[0]?.toLowerCase(),
    }));
    for (const lang of languages) {
        if (isLocale(lang.fullTag)) {
            return lang.fullTag;
        }
        else if (isLocale(lang.baseTag)) {
            return lang.baseTag;
        }
    }
    return undefined;
}

/**
 * If extractLocaleFromUrl is called many times on the same page and the URL
 * hasn't changed, we don't need to recompute it every time which can get expensive.
 * We might use a LRU cache if needed, but for now storing only the last result is enough.
 * https://github.com/opral/monorepo/pull/3575#discussion_r2066731243
 */
/** @type {string|undefined} */
let cachedUrl;
/** @type {Locale|undefined} */
let cachedLocale;
/**
 * Extracts the locale from a given URL using native URLPattern.
 *
 * @param {URL|string} url - The full URL from which to extract the locale.
 * @returns {Locale|undefined} The extracted locale, or undefined if no locale is found.
 */
export function extractLocaleFromUrl(url) {
    const urlString = typeof url === "string" ? url : url.href;
    if (cachedUrl === urlString) {
        return cachedLocale;
    }
    let result;
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        result = defaultUrlPatternExtractLocale(url);
    }
    else {
        const urlObj = typeof url === "string" ? new URL(url) : url;
        // Iterate over URL patterns
        for (const element of urlPatterns) {
            for (const [locale, localizedPattern] of element.localized) {
                const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
                if (!match) {
                    continue;
                }
                // Check if the locale is valid
                if (assertIsLocale(locale)) {
                    result = locale;
                    break;
                }
            }
            if (result)
                break;
        }
    }
    cachedUrl = urlString;
    cachedLocale = result;
    return result;
}
/**
 * https://github.com/opral/inlang-paraglide-js/issues/381
 *
 * @param {URL|string} url - The full URL from which to extract the locale.
 * @returns {Locale|undefined} The extracted locale, or undefined if no locale is found.
 */
function defaultUrlPatternExtractLocale(url) {
    const urlObj = new URL(url, "http://dummy.com");
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    if (pathSegments.length > 0) {
        const potentialLocale = pathSegments[0];
        if (isLocale(potentialLocale)) {
            return potentialLocale;
        }
    }
    // everything else has to be the base locale
    return baseLocale;
}

/**
 * Lower-level URL localization function, primarily used in server contexts.
 *
 * This function is designed for server-side usage where you need precise control
 * over URL localization, such as in middleware or request handlers. It works with
 * URL objects and always returns absolute URLs.
 *
 * For client-side UI components, use `localizeHref()` instead, which provides
 * a more convenient API with relative paths and automatic locale detection.
 *
 * @example
 * ```typescript
 * // Server middleware example
 * app.use((req, res, next) => {
 *   const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);
 *   const localized = localizeUrl(url, { locale: "de" });
 *
 *   if (localized.href !== url.href) {
 *     return res.redirect(localized.href);
 *   }
 *   next();
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using with URL patterns
 * const url = new URL("https://example.com/about");
 * localizeUrl(url, { locale: "de" });
 * // => URL("https://example.com/de/about")
 *
 * // Using with domain-based localization
 * const url = new URL("https://example.com/store");
 * localizeUrl(url, { locale: "de" });
 * // => URL("https://de.example.com/store")
 * ```
 *
 * @param {string | URL} url - The URL to localize. If string, must be absolute.
 * @param {Object} [options] - Options for localization
 * @param {string} [options.locale] - Target locale. If not provided, uses getLocale()
 * @returns {URL} The localized URL, always absolute
 */
export function localizeUrl(url, options) {
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        return localizeUrlDefaultPattern(url, options);
    }
    const targetLocale = options?.locale ?? getLocale();
    const urlObj = typeof url === "string" ? new URL(url) : url;
    // Iterate over URL patterns
    for (const element of urlPatterns) {
        // match localized patterns
        for (const [, localizedPattern] of element.localized) {
            const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
            if (!match) {
                continue;
            }
            const targetPattern = element.localized.find(([locale]) => locale === targetLocale)?.[1];
            if (!targetPattern) {
                continue;
            }
            const localizedUrl = fillPattern(targetPattern, aggregateGroups(match), urlObj.origin);
            return fillMissingUrlParts(localizedUrl, match);
        }
        const unlocalizedMatch = new URLPattern(element.pattern, urlObj.href).exec(urlObj.href);
        if (unlocalizedMatch) {
            const targetPattern = element.localized.find(([locale]) => locale === targetLocale)?.[1];
            if (targetPattern) {
                const localizedUrl = fillPattern(targetPattern, aggregateGroups(unlocalizedMatch), urlObj.origin);
                return fillMissingUrlParts(localizedUrl, unlocalizedMatch);
            }
        }
    }
    // If no match found, return the original URL
    return urlObj;
}
/**
 * https://github.com/opral/inlang-paraglide-js/issues/381
 *
 * @param {string | URL} url
 * @param {Object} [options]
 * @param {string} [options.locale]
 * @returns {URL}
 */
function localizeUrlDefaultPattern(url, options) {
    const urlObj = typeof url === "string" ? new URL(url, getUrlOrigin()) : new URL(url);
    const locale = options?.locale ?? getLocale();
    const currentLocale = extractLocaleFromUrl(urlObj);
    // If current locale matches target locale, no change needed
    if (currentLocale === locale) {
        return urlObj;
    }
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    // If current path starts with a locale, remove it
    if (pathSegments.length > 0 && isLocale(pathSegments[0])) {
        pathSegments.shift();
    }
    // For base locale, don't add prefix
    if (locale === baseLocale) {
        urlObj.pathname = "/" + pathSegments.join("/");
    }
    else {
        // For other locales, add prefix
        urlObj.pathname = "/" + locale + "/" + pathSegments.join("/");
    }
    return urlObj;
}
/**
 * Low-level URL de-localization function, primarily used in server contexts.
 *
 * This function is designed for server-side usage where you need precise control
 * over URL de-localization, such as in middleware or request handlers. It works with
 * URL objects and always returns absolute URLs.
 *
 * For client-side UI components, use `deLocalizeHref()` instead, which provides
 * a more convenient API with relative paths.
 *
 * @example
 * ```typescript
 * // Server middleware example
 * app.use((req, res, next) => {
 *   const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);
 *   const baseUrl = deLocalizeUrl(url);
 *
 *   // Store the base URL for later use
 *   req.baseUrl = baseUrl;
 *   next();
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using with URL patterns
 * const url = new URL("https://example.com/de/about");
 * deLocalizeUrl(url); // => URL("https://example.com/about")
 *
 * // Using with domain-based localization
 * const url = new URL("https://de.example.com/store");
 * deLocalizeUrl(url); // => URL("https://example.com/store")
 * ```
 *
 * @param {string | URL} url - The URL to de-localize. If string, must be absolute.
 * @returns {URL} The de-localized URL, always absolute
 */
export function deLocalizeUrl(url) {
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        return deLocalizeUrlDefaultPattern(url);
    }
    const urlObj = typeof url === "string" ? new URL(url) : url;
    // Iterate over URL patterns
    for (const element of urlPatterns) {
        // Iterate over localized versions
        for (const [, localizedPattern] of element.localized) {
            const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
            if (match) {
                // Convert localized URL back to the base pattern
                const groups = aggregateGroups(match);
                const baseUrl = fillPattern(element.pattern, groups, urlObj.origin);
                return fillMissingUrlParts(baseUrl, match);
            }
        }
        // match unlocalized pattern
        const unlocalizedMatch = new URLPattern(element.pattern, urlObj.href).exec(urlObj.href);
        if (unlocalizedMatch) {
            const baseUrl = fillPattern(element.pattern, aggregateGroups(unlocalizedMatch), urlObj.origin);
            return fillMissingUrlParts(baseUrl, unlocalizedMatch);
        }
    }
    // no match found return the original url
    return urlObj;
}
/**
 * De-localizes a URL using the default pattern (/:locale/*)
 * @param {string|URL} url
 * @returns {URL}
 */
function deLocalizeUrlDefaultPattern(url) {
    const urlObj = typeof url === "string" ? new URL(url, getUrlOrigin()) : new URL(url);
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    // If first segment is a locale, remove it
    if (pathSegments.length > 0 && isLocale(pathSegments[0])) {
        urlObj.pathname = "/" + pathSegments.slice(1).join("/");
    }
    return urlObj;
}
/**
 * Takes matches of implicit wildcards in the UrlPattern (when a part is missing
 * it is equal to '*') and adds them back to the result of fillPattern.
 *
 * At least protocol and hostname are required to create a valid URL inside fillPattern.
 *
 * @param {URL} url
 * @param {any} match
 * @returns {URL}
 */
function fillMissingUrlParts(url, match) {
    if (match.protocol.groups["0"]) {
        url.protocol = match.protocol.groups["0"] ?? "";
    }
    if (match.hostname.groups["0"]) {
        url.hostname = match.hostname.groups["0"] ?? "";
    }
    if (match.username.groups["0"]) {
        url.username = match.username.groups["0"] ?? "";
    }
    if (match.password.groups["0"]) {
        url.password = match.password.groups["0"] ?? "";
    }
    if (match.port.groups["0"]) {
        url.port = match.port.groups["0"] ?? "";
    }
    if (match.pathname.groups["0"]) {
        url.pathname = match.pathname.groups["0"] ?? "";
    }
    if (match.search.groups["0"]) {
        url.search = match.search.groups["0"] ?? "";
    }
    if (match.hash.groups["0"]) {
        url.hash = match.hash.groups["0"] ?? "";
    }
    return url;
}
/**
 * Fills a URL pattern with values for named groups, supporting all URLPattern-style modifiers.
 *
 * This function will eventually be replaced by https://github.com/whatwg/urlpattern/issues/73
 *
 * Matches:
 * - :name        -> Simple
 * - :name?       -> Optional
 * - :name+       -> One or more
 * - :name*       -> Zero or more
 * - :name(...)   -> Regex group
 * - {text}       -> Group delimiter
 * - {text}?      -> Optional group delimiter
 *
 * If the value is `null`, the segment is removed.
 *
 * @param {string} pattern - The URL pattern containing named groups.
 * @param {Record<string, string | null | undefined>} values - Object of values for named groups.
 * @param {string} origin - Base URL to use for URL construction.
 * @returns {URL} - The constructed URL with named groups filled.
 */
function fillPattern(pattern, values, origin) {
    // Pre-process the pattern to handle explicit port numbers
    // This detects patterns like "http://localhost:5173" and protects the port number
    // from being interpreted as a parameter
    let processedPattern = pattern.replace(/(https?:\/\/[^:/]+):(\d+)(\/|$)/g, (_, protocol, port, slash) => {
        // Replace ":5173" with "#PORT-5173#" to protect it from parameter replacement
        return `${protocol}#PORT-${port}#${slash}`;
    });
    // First, handle group delimiters with curly braces
    let processedGroupDelimiters = processedPattern.replace(/\{([^{}]*)\}([?+*]?)/g, (_, content, modifier) => {
        // For optional group delimiters
        if (modifier === "?") {
            // For optional groups, we'll include the content
            return content;
        }
        // For non-optional group delimiters, always include the content
        return content;
    });
    // Then handle named groups
    let filled = processedGroupDelimiters.replace(/(\/?):([a-zA-Z0-9_]+)(\([^)]*\))?([?+*]?)/g, (_, slash, name, __, modifier) => {
        const value = values[name];
        if (value === null) {
            // If value is null, remove the entire segment including the preceding slash
            return "";
        }
        if (modifier === "?") {
            // Optional segment
            return value !== undefined ? `${slash}${value}` : "";
        }
        if (modifier === "+" || modifier === "*") {
            // Repeatable segments
            if (value === undefined && modifier === "+") {
                throw new Error(`Missing value for "${name}" (one or more required)`);
            }
            return value ? `${slash}${value}` : "";
        }
        // Simple named group (no modifier)
        if (value === undefined) {
            throw new Error(`Missing value for "${name}"`);
        }
        return `${slash}${value}`;
    });
    // Restore port numbers
    filled = filled.replace(/#PORT-(\d+)#/g, ":$1");
    return new URL(filled, origin);
}
/**
 * Aggregates named groups from various parts of the URLPattern match result.
 *
 *
 * @type {(match: any) => Record<string, string | null | undefined>}
 */
export function aggregateGroups(match) {
    return {
        ...match.hash.groups,
        ...match.hostname.groups,
        ...match.password.groups,
        ...match.pathname.groups,
        ...match.port.groups,
        ...match.protocol.groups,
        ...match.search.groups,
        ...match.username.groups,
    };
}

/**
 * High-level URL localization function optimized for client-side UI usage.
 *
 * This is a convenience wrapper around `localizeUrl()` that provides features
 * needed in UI:
 *
 * - Accepts relative paths (e.g., "/about")
 * - Returns relative paths when possible
 * - Automatically detects current locale if not specified
 * - Handles string input/output instead of URL objects
 *
 * @example
 * ```typescript
 * // In a React/Vue/Svelte component
 * const NavLink = ({ href }) => {
 *   // Automatically uses current locale, keeps path relative
 *   return <a href={localizeHref(href)}>...</a>;
 * };
 *
 * // Examples:
 * localizeHref("/about")
 * // => "/de/about" (if current locale is "de")
 * localizeHref("/store", { locale: "fr" })
 * // => "/fr/store" (explicit locale)
 *
 * // Cross-origin links remain absolute
 * localizeHref("https://other-site.com/about")
 * // => "https://other-site.com/de/about"
 * ```
 *
 * For server-side URL localization (e.g., in middleware), use `localizeUrl()`
 * which provides more precise control over URL handling.
 *
 * @param {string} href - The href to localize (can be relative or absolute)
 * @param {Object} [options] - Options for localization
 * @param {string} [options.locale] - Target locale. If not provided, uses `getLocale()`
 * @returns {string} The localized href, relative if input was relative
 */
export function localizeHref(href, options) {
    const currentLocale = getLocale();
    const locale = options?.locale ?? currentLocale;
    const url = new URL(href, getUrlOrigin());
    const localized = localizeUrl(url, { locale });
    // if the origin is identical and the href is relative,
    // return the relative path
    if (href.startsWith("/") && url.origin === localized.origin) {
        // check for cross origin localization in which case an absolute URL must be returned.
        if (locale !== currentLocale) {
            const localizedCurrentLocale = localizeUrl(url, {
                locale: currentLocale,
            });
            if (localizedCurrentLocale.origin !== localized.origin) {
                return localized.href;
            }
        }
        return localized.pathname + localized.search + localized.hash;
    }
    return localized.href;
}
/**
 * High-level URL de-localization function optimized for client-side UI usage.
 *
 * This is a convenience wrapper around `deLocalizeUrl()` that provides features
 * needed in the UI:
 *
 * - Accepts relative paths (e.g., "/de/about")
 * - Returns relative paths when possible
 * - Handles string input/output instead of URL objects
 *
 * @example
 * ```typescript
 * // In a React/Vue/Svelte component
 * const LocaleSwitcher = ({ href }) => {
 *   // Remove locale prefix before switching
 *   const baseHref = deLocalizeHref(href);
 *   return locales.map(locale =>
 *     <a href={localizeHref(baseHref, { locale })}>
 *       Switch to {locale}
 *     </a>
 *   );
 * };
 *
 * // Examples:
 * deLocalizeHref("/de/about")  // => "/about"
 * deLocalizeHref("/fr/store")  // => "/store"
 *
 * // Cross-origin links remain absolute
 * deLocalizeHref("https://example.com/de/about")
 * // => "https://example.com/about"
 * ```
 *
 * For server-side URL de-localization (e.g., in middleware), use `deLocalizeUrl()`
 * which provides more precise control over URL handling.
 *
 * @param {string} href - The href to de-localize (can be relative or absolute)
 * @returns {string} The de-localized href, relative if input was relative
 * @see deLocalizeUrl - For low-level URL de-localization in server contexts
 */
export function deLocalizeHref(href) {
    const url = new URL(href, getUrlOrigin());
    const deLocalized = deLocalizeUrl(url);
    // If the origin is identical and the href is relative,
    // return the relative path instead of the full URL.
    if (href.startsWith("/") && url.origin === deLocalized.origin) {
        return deLocalized.pathname + deLocalized.search + deLocalized.hash;
    }
    return deLocalized.href;
}

/**
 * @param {string} safeModuleId
 * @param {Locale} locale
 */
export function trackMessageCall(safeModuleId, locale) {
    if (isServer === false)
        return;
    const store = serverAsyncLocalStorage?.getStore();
    if (store) {
        store.messageCalls?.add(`${safeModuleId}:${locale}`);
    }
}

/**
 * Generates a list of localized URLs for all provided URLs.
 *
 * This is useful for SSG (Static Site Generation) and sitemap generation.
 * NextJS and other frameworks use this function for SSG.
 *
 * @example
 * ```typescript
 * const urls = generateStaticLocalizedUrls([
 *   "https://example.com/about",
 *   "https://example.com/blog",
 * ]);
 * urls[0].href // => "https://example.com/about"
 * urls[1].href // => "https://example.com/blog"
 * urls[2].href // => "https://example.com/de/about"
 * urls[3].href // => "https://example.com/de/blog"
 * ...
 * ```
 *
 * @param {(string | URL)[]} urls - List of URLs to generate localized versions for. Can be absolute URLs or paths.
 * @returns {URL[]} List of localized URLs as URL objects
 */
export function generateStaticLocalizedUrls(urls) {
    const localizedUrls = new Set();
    // For default URL pattern, we can optimize the generation
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        for (const urlInput of urls) {
            const url = urlInput instanceof URL
                ? urlInput
                : new URL(urlInput, "http://localhost");
            // Base locale doesn't get a prefix
            localizedUrls.add(url);
            // Other locales get their code as prefix
            for (const locale of locales) {
                if (locale !== baseLocale) {
                    const localizedPath = `/${locale}${url.pathname}${url.search}${url.hash}`;
                    const localizedUrl = new URL(localizedPath, url.origin);
                    localizedUrls.add(localizedUrl);
                }
            }
        }
        return Array.from(localizedUrls);
    }
    // For custom URL patterns, we need to use localizeUrl for each URL and locale
    for (const urlInput of urls) {
        const url = urlInput instanceof URL
            ? urlInput
            : new URL(urlInput, "http://localhost");
        // Try each URL pattern to find one that matches
        let patternFound = false;
        for (const pattern of urlPatterns) {
            try {
                // Try to match the unlocalized pattern
                const unlocalizedMatch = new URLPattern(pattern.pattern, url.href).exec(url.href);
                if (!unlocalizedMatch)
                    continue;
                patternFound = true;
                // Track unique localized URLs to avoid duplicates when patterns are the same
                const seenUrls = new Set();
                // Generate localized URL for each locale
                for (const [locale] of pattern.localized) {
                    try {
                        const localizedUrl = localizeUrl(url, { locale });
                        const urlString = localizedUrl.href;
                        // Only add if we haven't seen this exact URL before
                        if (!seenUrls.has(urlString)) {
                            seenUrls.add(urlString);
                            localizedUrls.add(localizedUrl);
                        }
                    }
                    catch {
                        // Skip if localization fails for this locale
                        continue;
                    }
                }
                break;
            }
            catch {
                // Skip if pattern matching fails
                continue;
            }
        }
        // If no pattern matched, use the URL as is
        if (!patternFound) {
            localizedUrls.add(url);
        }
    }
    return Array.from(localizedUrls);
}

/**
 * @typedef {"cookie" | "baseLocale" | "globalVariable" | "url" | "preferredLanguage" | "localStorage"} BuiltInStrategy
 */
/**
 * @typedef {`custom_${string}`} CustomStrategy
 */
/**
 * @typedef {BuiltInStrategy | CustomStrategy} Strategy
 */
/**
 * @typedef {Array<Strategy>} Strategies
 */
/**
 * @typedef {{ getLocale: (request?: Request) => string | undefined }} CustomServerStrategyHandler
 */
/**
 * @typedef {{ getLocale: () => string | undefined, setLocale: (locale: string) => void }} CustomClientStrategyHandler
 */
export const customServerStrategies = new Map();
export const customClientStrategies = new Map();
/**
 * Checks if the given strategy is a custom strategy.
 *
 * @param {any} strategy The name of the custom strategy to validate.
 * Must be a string that starts with "custom-" followed by alphanumeric characters.
 * @returns {boolean} Returns true if it is a custom strategy, false otherwise.
 */
export function isCustomStrategy(strategy) {
    return typeof strategy === "string" && /^custom-[A-Za-z0-9]+$/.test(strategy);
}
/**
 * Defines a custom strategy that is executed on the server.
 *
 * @param {any} strategy The name of the custom strategy to define. Must follow the pattern `custom-<name>` where
 * `<name>` contains only alphanumeric characters.
 * @param {CustomServerStrategyHandler} handler The handler for the custom strategy, which should implement
 * the method `getLocale`.
 * @returns {void}
 */
export function defineCustomServerStrategy(strategy, handler) {
    if (!isCustomStrategy(strategy)) {
        throw new Error(`Invalid custom strategy: "${strategy}". Must be a custom strategy following the pattern custom-<name>` +
            " where <name> contains only alphanumeric characters.");
    }
    customServerStrategies.set(strategy, handler);
}
/**
 * Defines a custom strategy that is executed on the client.
 *
 * @param {any} strategy The name of the custom strategy to define. Must follow the pattern `custom-<name>` where
 * `<name>` contains only alphanumeric characters.
 * @param {CustomClientStrategyHandler} handler The handler for the custom strategy, which should implement the
 * methods `getLocale` and `setLocale`.
 * @returns {void}
 */
export function defineCustomClientStrategy(strategy, handler) {
    if (!isCustomStrategy(strategy)) {
        throw new Error(`Invalid custom strategy: "${strategy}". Must be a custom strategy following the pattern custom-<name>` +
            " where <name> contains only alphanumeric characters.");
    }
    customClientStrategies.set(strategy, handler);
}

// ------ TYPES ------

/**
 * A locale that is available in the project.
 *
 * @example
 *   setLocale(request.locale as Locale)
 *
 * @typedef {(typeof locales)[number]} Locale
 */




================================================================================
File: lib/paraglide/server.js
================================================================================

// eslint-disable

import * as runtime from "./runtime.js";

/**
 * Server middleware that handles locale-based routing and request processing.
 *
 * This middleware performs several key functions:
 *
 * 1. Determines the locale for the incoming request using configured strategies
 * 2. Handles URL localization and redirects (only for document requests)
 * 3. Maintains locale state using AsyncLocalStorage to prevent request interference
 *
 * When URL strategy is used:
 *
 * - The locale is extracted from the URL for all request types
 * - If URL doesn't match the determined locale, redirects to localized URL (only for document requests)
 * - De-localizes URLs before passing to server (e.g., `/fr/about` → `/about`)
 *
 * @template T - The return type of the resolve function
 *
 * @param {Request} request - The incoming request object
 * @param {(args: { request: Request, locale: import("./runtime.js").Locale }) => T | Promise<T>} resolve - Function to handle the request
 * @param {{ onRedirect:(response: Response) => void }} [callbacks] - Callbacks to handle events from middleware
 * @returns {Promise<Response>}
 *
 * @example
 * ```typescript
 * // Basic usage in metaframeworks like NextJS, SvelteKit, Astro, Nuxt, etc.
 * export const handle = async ({ event, resolve }) => {
 *   return serverMiddleware(event.request, ({ request, locale }) => {
 *     // let the framework further resolve the request
 *     return resolve(request);
 *   });
 * };
 * ```
 *
 * @example
 * ```typescript
 * // Usage in a framework like Express JS or Hono
 * app.use(async (req, res, next) => {
 *   const result = await serverMiddleware(req, ({ request, locale }) => {
 *     // If a redirect happens this won't be called
 *     return next(request);
 *   });
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Usage in serverless environments like Cloudflare Workers
 * // ⚠️ WARNING: This should ONLY be used in serverless environments like Cloudflare Workers.
 * // Disabling AsyncLocalStorage in traditional server environments risks cross-request pollution where state from
 * // one request could leak into another concurrent request.
 * export default {
 *   fetch: async (request) => {
 *     return serverMiddleware(
 *       request,
 *       ({ request, locale }) => handleRequest(request, locale),
 *       { disableAsyncLocalStorage: true }
 *     );
 *   }
 * };
 * ```
 */
export async function paraglideMiddleware(request, resolve, callbacks) {
    if (!runtime.disableAsyncLocalStorage && !runtime.serverAsyncLocalStorage) {
        const { AsyncLocalStorage } = await import("async_hooks");
        runtime.overwriteServerAsyncLocalStorage(new AsyncLocalStorage());
    }
    else if (!runtime.serverAsyncLocalStorage) {
        runtime.overwriteServerAsyncLocalStorage(createMockAsyncLocalStorage());
    }
    const locale = runtime.extractLocaleFromRequest(request);
    const origin = new URL(request.url).origin;
    // if the client makes a request to a URL that doesn't match
    // the localizedUrl, redirect the client to the localized URL
    if (request.headers.get("Sec-Fetch-Dest") === "document" &&
        runtime.strategy.includes("url")) {
        const localizedUrl = runtime.localizeUrl(request.url, { locale });
        if (normalizeURL(localizedUrl.href) !== normalizeURL(request.url)) {
            // Create headers object with Vary header if preferredLanguage strategy is used
            /** @type {Record<string, string>} */
            const headers = {};
            if (runtime.strategy.includes("preferredLanguage")) {
                headers["Vary"] = "Accept-Language";
            }
            const response = new Response(null, {
                status: 307,
                headers: {
                    Location: localizedUrl.href,
                    ...headers,
                },
            });
            callbacks?.onRedirect(response);
            return response;
        }
    }
    // If the strategy includes "url", we need to de-localize the URL
    // before passing it to the server middleware.
    //
    // The middleware is responsible for mapping a localized URL to the
    // de-localized URL e.g. `/en/about` to `/about`. Otherwise,
    // the server can't render the correct page.
    const newRequest = runtime.strategy.includes("url")
        ? new Request(runtime.deLocalizeUrl(request.url), request)
        : // need to create a new request object because some metaframeworks (nextjs!) throw otherwise
            // https://github.com/opral/inlang-paraglide-js/issues/411
            new Request(request);
    // the message functions that have been called in this request
    /** @type {Set<string>} */
    const messageCalls = new Set();
    const response = await runtime.serverAsyncLocalStorage?.run({ locale, origin, messageCalls }, () => resolve({ locale, request: newRequest }));
    // Only modify HTML responses
    if (runtime.experimentalMiddlewareLocaleSplitting &&
        response.headers.get("Content-Type")?.includes("html")) {
        const body = await response.text();
        const messages = [];
        // using .values() to avoid polyfilling in older projects. else the following error is thrown
        // Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
        for (const messageCall of Array.from(messageCalls)) {
            const [id, locale] = 
            /** @type {[string, import("./runtime.js").Locale]} */ (messageCall.split(":"));
            messages.push(`${id}: ${compiledBundles[id]?.[locale]}`);
        }
        const script = `<script>globalThis.__paraglide_ssr = { ${messages.join(",")} }</script>`;
        // Insert the script before the closing head tag
        const newBody = body.replace("</head>", `${script}</head>`);
        // Create a new response with the modified body
        // Clone all headers except Content-Length which will be set automatically
        const newHeaders = new Headers(response.headers);
        newHeaders.delete("Content-Length"); // Let the browser calculate the correct length
        return new Response(newBody, {
            status: response.status,
            statusText: response.statusText,
            headers: newHeaders,
        });
    }
    return response;
}
/**
 * Normalize url for comparison.
 * Strips trailing slash
 * @param {string} url
 * @returns {string} normalized url string
 */
function normalizeURL(url) {
    const urlObj = new URL(url);
    // // strip trailing slash from pathname
    urlObj.pathname = urlObj.pathname.replace(/\/$/, "");
    return urlObj.href;
}
/**
 * Creates a mock AsyncLocalStorage implementation for environments where
 * native AsyncLocalStorage is not available or disabled.
 *
 * This mock implementation mimics the behavior of the native AsyncLocalStorage
 * but doesn't require the async_hooks module. It's designed to be used in
 * environments like Cloudflare Workers where AsyncLocalStorage is not available.
 *
 * @returns {import("./runtime.js").ParaglideAsyncLocalStorage}
 */
function createMockAsyncLocalStorage() {
    /** @type {any} */
    let currentStore = undefined;
    return {
        getStore() {
            return currentStore;
        },
        async run(store, callback) {
            currentStore = store;
            try {
                return await callback();
            }
            finally {
                currentStore = undefined;
            }
        },
    };
}
/**
 * The compiled messages for the server middleware.
 *
 * Only populated if `enableMiddlewareOptimizations` is set to `true`.
 *
 * @type {Record<string, Record<import("./runtime.js").Locale, string>>}
 */
const compiledBundles = {};



================================================================================
File: lib/stores/authStore.ts
================================================================================

/**
 * @file Authentication Store (authStore.ts)
 * @description Manages the application's authentication state using Svelte stores
 * and interacts with the Supabase client-side auth events.
 *
 * @dependencies
 * - svelte/store: Provides `writable`, `get` for creating/accessing reactive stores.
 * - @supabase/supabase-js: Provides `Session` type.
 * - $lib/utils/supabaseClient: Provides the client-side Supabase instance.
 */

import { writable, type Writable, get } from 'svelte/store'; // Import get
import type { Session } from '@supabase/supabase-js';
import { supabase } from '$lib/utils/supabaseClient';

// --- Stores ---

/**
 * Writable store holding the current authenticated session object.
 * Null if the user is not logged in. Components can subscribe to this
 * to reactively update based on auth state using the $ prefix (e.g., $sessionStore).
 */
export const sessionStore: Writable<Session | null> = writable(null);

/**
 * Writable store indicating if the initial auth check (on page load/app start)
 * has completed. Useful for preventing UI flashes or premature redirects.
 */
export const authReady: Writable<boolean> = writable(false);


// --- Initialization ---

let authListenerInitialized = false;
let unsubscribe: (() => void) | null = null;

/**
 * Initializes the Supabase auth state change listener.
 * This should be called ONCE when the application root mounts client-side.
 * It listens for SIGNED_IN, SIGNED_OUT, TOKEN_REFRESHED events and updates
 * the sessionStore accordingly. It also sets authReady to true once the
 * initial session state is determined.
 *
 * @returns {() => void} A function to unsubscribe the listener.
 **/
export function initializeAuthListener(): () => void {
    console.log('[AuthStore] Attempting to initialize auth listener...');

    if (authListenerInitialized && unsubscribe) {
        console.log('[AuthStore] Listener already initialized.');
        return unsubscribe; // Return existing unsubscribe function
    }

    authListenerInitialized = true;

    // Immediately try to get the current session to set initial state
    supabase.auth.getSession().then(({ data }) => {
        console.log('[AuthStore] Initial session fetched client-side:', data.session ? data.session.user.id : 'null');
        // Only set the store if auth isn't already marked as ready by the listener firing first
        if (!get(authReady)) {
            sessionStore.set(data.session);
        }
        // Mark auth as ready only after attempting to get the initial session
        authReady.set(true);
        console.log('[AuthStore] Auth ready.');
    }).catch((error) => {
        console.error('[AuthStore] Error fetching initial session:', error);
        // Still mark as ready even if error occurs, assuming no session
        if (!get(authReady)) {
            sessionStore.set(null);
        }
        authReady.set(true);
    });


    // Subscribe to auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
        console.log(`[AuthStore onAuthStateChange] Event: ${event}`, session ? `User: ${session.user.id}` : 'No session');

        // Explicitly handle SIGNED_OUT
        if (event === 'SIGNED_OUT') {
            console.log('[AuthStore onAuthStateChange] SIGNED_OUT detected, setting store to null.');
            sessionStore.set(null);
        } else {
            // For SIGNED_IN, TOKEN_REFRESHED, USER_UPDATED etc., update with the provided session
            sessionStore.set(session);
        }

        // Ensure authReady is true after the first event fires as well
        if (!get(authReady)) {
            authReady.set(true);
        }
    });

    // Store the unsubscribe function for cleanup
    unsubscribe = subscription.unsubscribe;

    console.log('[AuthStore] Listener initialized.');
    return unsubscribe;
}

// --- Convenience Object (Optional) ---
// Export the stores directly. Components should use the $ prefix for auto-subscription.
export const authStore = {
    currentSession: sessionStore,
    ready: authReady
};


================================================================================
File: lib/utils/session.ts
================================================================================

/**
        * @file session.ts
        * @purpose Session management utilities
        * 
        * @dependencies
        * - $app/stores: SvelteKit session store
        *
        * @notes
        * - Provides reactive session access
        * - Handles session state changes
        */

import { session as svelteSession } from '$app/stores';
import { derived } from 'svelte/store';

export const session = derived(svelteSession, ($session) => {
    return $session.data?.session || null;
});


================================================================================
File: lib/utils/supabaseClient.ts
================================================================================

/**
 * @file supabaseClient.ts
 * @purpose Creates and exports the Supabase client instance for client-side usage
 * 
 * @dependencies
 * - @supabase/supabase-js: Provides Supabase client functionality
 * - $env/static/public: Access to public environment variables
 *
 * @notes
 * - Uses PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY from environment
 * - Singleton pattern ensures only one instance is created
 */

import { createClient } from '@supabase/supabase-js';
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';

// Create and export the Supabase client
export const supabase = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
    }
});


================================================================================
File: lib/utils/supabaseServer.ts
================================================================================

/**
        * @file supabaseServer.ts
        * @purpose Creates server-side Supabase client with proper session handling
        * 
        * @dependencies
        * - @supabase/ssr: Server-side Supabase utilities
        * - cookie: Cookie parsing library
        * - $env/static/public: Public environment variables
        *
        * @notes
        * - Handles cookie-based authentication for server-side operations
        * - Properly manages session tokens
        */

import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';

export function createSupabaseServerClient() {
    const cookieStore = cookies();

    return createServerClient(
        PUBLIC_SUPABASE_URL,
        PUBLIC_SUPABASE_ANON_KEY,
        {
            cookies: {
                get(name: string) {
                    return cookieStore.get(name)?.value;
                },
                set(name: string, value: string, options) {
                    cookieStore.set({ name, value, ...options });
                },
                remove(name: string, options) {
                    cookieStore.set({ name, value: '', ...options });
                },
            },
        }
    );
}


================================================================================
File: paraglide/messages/_index.js
================================================================================

// eslint-disable
export * from './common_loading.js'
export * from './common_submit.js'
export * from './common_cancel.js'
export * from './common_error.js'
export * from './common_tryagain1.js'
export * from './common_close.js'
export * from './common_next.js'
export * from './common_previous.js'
export * from './common_readmore1.js'
export * from './common_showless1.js'
export * from './navigation_home.js'
export * from './navigation_about.js'
export * from './navigation_visit.js'
export * from './navigation_contact.js'
export * from './navigation_book.js'
export * from './navigation_shop.js'
export * from './navigation_exhibitions.js'
export * from './navigation_collections.js'
export * from './navigation_events.js'
export * from './navigation_news.js'
export * from './languages_en.js'
export * from './languages_it.js'
export * from './languages_de.js'
export * from './museum_welcometitle1.js'
export * from './museum_welcomesubtitle1.js'
export * from './museum_openinghours1.js'
export * from './museum_admissionfees1.js'
export * from './museum_location.js'
export * from './museum_accessibility.js'
export * from './exhibitions_current.js'
export * from './exhibitions_upcoming.js'
export * from './exhibitions_past.js'
export * from './exhibitions_permanent.js'
export * from './exhibitions_temporary.js'
export * from './exhibitions_featured.js'
export * from './exhibitions_viewdetails1.js'
export * from './exhibitions_duration.js'
export * from './exhibitions_curator.js'
export * from './exhibitions_sponsors.js'
export * from './booking_title.js'
export * from './booking_selectdate1.js'
export * from './booking_selecttime1.js'
export * from './booking_adults.js'
export * from './booking_children.js'
export * from './booking_students.js'
export * from './booking_seniors.js'
export * from './booking_groups.js'
export * from './booking_guidedtour1.js'
export * from './booking_audioguide1.js'
export * from './booking_total.js'
export * from './booking_proceed.js'
export * from './booking_confirmation.js'
export * from './visit_planyourvisit2.js'
export * from './visit_beforeyoucome2.js'
export * from './visit_whattoexpected2.js'
export * from './visit_facilities.js'
export * from './visit_cafeteria.js'
export * from './visit_giftshop1.js'
export * from './visit_parking.js'
export * from './visit_wheelchairaccess1.js'
export * from './visit_familyfriendly1.js'
export * from './contact_getintouch2.js'
export * from './contact_address.js'
export * from './contact_phone.js'
export * from './contact_email.js'
export * from './contact_socialmedia1.js'
export * from './contact_sendmessage1.js'
export * from './contact_yourname1.js'
export * from './contact_youremail1.js'
export * from './contact_subject.js'
export * from './contact_message.js'
export * from './contact_messagesent1.js'
export * from './footer_copyright.js'
export * from './footer_privacy.js'
export * from './footer_terms.js'
export * from './footer_newsletter.js'
export * from './footer_followus1.js'
export * from './footer_supportedby1.js'


================================================================================
File: paraglide/messages/booking_adults.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Adults`
};

const de_booking_adults = /** @type {(inputs: {}) => string} */ () => {
	return `Erwachsene`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_adults = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_adults(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_adults", locale)
	if (locale === "en") return en_booking_adults(inputs)
	return de_booking_adults(inputs)
};


================================================================================
File: paraglide/messages/booking_audioguide1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audio Guide`
};

const de_booking_audioguide1 = /** @type {(inputs: {}) => string} */ () => {
	return `Audioführung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_audioguide1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_audioguide1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_audioguide1", locale)
	if (locale === "en") return en_booking_audioguide1(inputs)
	return de_booking_audioguide1(inputs)
};
export { booking_audioguide1 as "booking_audioGuide" }


================================================================================
File: paraglide/messages/booking_children.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Children`
};

const de_booking_children = /** @type {(inputs: {}) => string} */ () => {
	return `Kinder`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_children = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_children(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_children", locale)
	if (locale === "en") return en_booking_children(inputs)
	return de_booking_children(inputs)
};


================================================================================
File: paraglide/messages/booking_confirmation.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Booking Confirmation`
};

const de_booking_confirmation = /** @type {(inputs: {}) => string} */ () => {
	return `Buchungsbestätigung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_confirmation = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_confirmation(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_confirmation", locale)
	if (locale === "en") return en_booking_confirmation(inputs)
	return de_booking_confirmation(inputs)
};


================================================================================
File: paraglide/messages/booking_groups.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Groups`
};

const de_booking_groups = /** @type {(inputs: {}) => string} */ () => {
	return `Gruppen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_groups = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_groups(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_groups", locale)
	if (locale === "en") return en_booking_groups(inputs)
	return de_booking_groups(inputs)
};


================================================================================
File: paraglide/messages/booking_guidedtour1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `Guided Tour`
};

const de_booking_guidedtour1 = /** @type {(inputs: {}) => string} */ () => {
	return `Führung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_guidedtour1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_guidedtour1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_guidedtour1", locale)
	if (locale === "en") return en_booking_guidedtour1(inputs)
	return de_booking_guidedtour1(inputs)
};
export { booking_guidedtour1 as "booking_guidedTour" }


================================================================================
File: paraglide/messages/booking_proceed.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Proceed to Payment`
};

const de_booking_proceed = /** @type {(inputs: {}) => string} */ () => {
	return `Zur Zahlung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_proceed = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_proceed(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_proceed", locale)
	if (locale === "en") return en_booking_proceed(inputs)
	return de_booking_proceed(inputs)
};


================================================================================
File: paraglide/messages/booking_selectdate1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Select Date`
};

const de_booking_selectdate1 = /** @type {(inputs: {}) => string} */ () => {
	return `Datum auswählen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_selectdate1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_selectdate1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_selectdate1", locale)
	if (locale === "en") return en_booking_selectdate1(inputs)
	return de_booking_selectdate1(inputs)
};
export { booking_selectdate1 as "booking_selectDate" }


================================================================================
File: paraglide/messages/booking_selecttime1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Select Time`
};

const de_booking_selecttime1 = /** @type {(inputs: {}) => string} */ () => {
	return `Zeit auswählen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const booking_selecttime1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_selecttime1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_selecttime1", locale)
	if (locale === "en") return en_booking_selecttime1(inputs)
	return de_booking_selecttime1(inputs)
};
export { booking_selecttime1 as "booking_selectTime" }


================================================================================
File: paraglide/messages/booking_seniors.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Seniors`
};

const de_booking_seniors = /** @type {(inputs: {}) => string} */ () => {
	return `Senioren`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_seniors = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_seniors(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_seniors", locale)
	if (locale === "en") return en_booking_seniors(inputs)
	return de_booking_seniors(inputs)
};


================================================================================
File: paraglide/messages/booking_students.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Students`
};

const de_booking_students = /** @type {(inputs: {}) => string} */ () => {
	return `Studenten`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_students = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_students(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_students", locale)
	if (locale === "en") return en_booking_students(inputs)
	return de_booking_students(inputs)
};


================================================================================
File: paraglide/messages/booking_title.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Book Your Visit`
};

const de_booking_title = /** @type {(inputs: {}) => string} */ () => {
	return `Besuch buchen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_title = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_title(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_title", locale)
	if (locale === "en") return en_booking_title(inputs)
	return de_booking_title(inputs)
};


================================================================================
File: paraglide/messages/booking_total.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Total`
};

const de_booking_total = /** @type {(inputs: {}) => string} */ () => {
	return `Gesamt`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const booking_total = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.booking_total(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("booking_total", locale)
	if (locale === "en") return en_booking_total(inputs)
	return de_booking_total(inputs)
};


================================================================================
File: paraglide/messages/common_cancel.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Cancel`
};

const de_common_cancel = /** @type {(inputs: {}) => string} */ () => {
	return `Abbrechen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_cancel = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_cancel(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_cancel", locale)
	if (locale === "en") return en_common_cancel(inputs)
	return de_common_cancel(inputs)
};


================================================================================
File: paraglide/messages/common_close.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Close`
};

const de_common_close = /** @type {(inputs: {}) => string} */ () => {
	return `Schließen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_close = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_close(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_close", locale)
	if (locale === "en") return en_common_close(inputs)
	return de_common_close(inputs)
};


================================================================================
File: paraglide/messages/common_error.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_error = /** @type {(inputs: {}) => string} */ () => {
	return `An error occurred`
};

const de_common_error = /** @type {(inputs: {}) => string} */ () => {
	return `Ein Fehler ist aufgetreten`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_error = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_error(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_error", locale)
	if (locale === "en") return en_common_error(inputs)
	return de_common_error(inputs)
};


================================================================================
File: paraglide/messages/common_loading.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Loading...`
};

const de_common_loading = /** @type {(inputs: {}) => string} */ () => {
	return `Wird geladen...`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_loading = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_loading(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_loading", locale)
	if (locale === "en") return en_common_loading(inputs)
	return de_common_loading(inputs)
};


================================================================================
File: paraglide/messages/common_next.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Next`
};

const de_common_next = /** @type {(inputs: {}) => string} */ () => {
	return `Weiter`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_next = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_next(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_next", locale)
	if (locale === "en") return en_common_next(inputs)
	return de_common_next(inputs)
};


================================================================================
File: paraglide/messages/common_previous.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Previous`
};

const de_common_previous = /** @type {(inputs: {}) => string} */ () => {
	return `Zurück`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_previous = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_previous(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_previous", locale)
	if (locale === "en") return en_common_previous(inputs)
	return de_common_previous(inputs)
};


================================================================================
File: paraglide/messages/common_readmore1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Read more`
};

const de_common_readmore1 = /** @type {(inputs: {}) => string} */ () => {
	return `Weiterlesen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_readmore1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_readmore1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_readmore1", locale)
	if (locale === "en") return en_common_readmore1(inputs)
	return de_common_readmore1(inputs)
};
export { common_readmore1 as "common_readMore" }


================================================================================
File: paraglide/messages/common_showless1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Show less`
};

const de_common_showless1 = /** @type {(inputs: {}) => string} */ () => {
	return `Weniger anzeigen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_showless1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_showless1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_showless1", locale)
	if (locale === "en") return en_common_showless1(inputs)
	return de_common_showless1(inputs)
};
export { common_showless1 as "common_showLess" }


================================================================================
File: paraglide/messages/common_submit.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Submit`
};

const de_common_submit = /** @type {(inputs: {}) => string} */ () => {
	return `Absenden`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const common_submit = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_submit(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_submit", locale)
	if (locale === "en") return en_common_submit(inputs)
	return de_common_submit(inputs)
};


================================================================================
File: paraglide/messages/common_tryagain1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Try again`
};

const de_common_tryagain1 = /** @type {(inputs: {}) => string} */ () => {
	return `Erneut versuchen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const common_tryagain1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.common_tryagain1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("common_tryagain1", locale)
	if (locale === "en") return en_common_tryagain1(inputs)
	return de_common_tryagain1(inputs)
};
export { common_tryagain1 as "common_tryAgain" }


================================================================================
File: paraglide/messages/contact_address.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Address`
};

const de_contact_address = /** @type {(inputs: {}) => string} */ () => {
	return `Adresse`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_address = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_address(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_address", locale)
	if (locale === "en") return en_contact_address(inputs)
	return de_contact_address(inputs)
};


================================================================================
File: paraglide/messages/contact_email.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `Email`
};

const de_contact_email = /** @type {(inputs: {}) => string} */ () => {
	return `E-Mail`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_email = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_email(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_email", locale)
	if (locale === "en") return en_contact_email(inputs)
	return de_contact_email(inputs)
};


================================================================================
File: paraglide/messages/contact_getintouch2.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Get In Touch`
};

const de_contact_getintouch2 = /** @type {(inputs: {}) => string} */ () => {
	return `Kontakt aufnehmen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_getintouch2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_getintouch2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_getintouch2", locale)
	if (locale === "en") return en_contact_getintouch2(inputs)
	return de_contact_getintouch2(inputs)
};
export { contact_getintouch2 as "contact_getInTouch" }


================================================================================
File: paraglide/messages/contact_message.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Message`
};

const de_contact_message = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_message = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_message(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_message", locale)
	if (locale === "en") return en_contact_message(inputs)
	return de_contact_message(inputs)
};


================================================================================
File: paraglide/messages/contact_messagesent1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Message Sent Successfully`
};

const de_contact_messagesent1 = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht erfolgreich gesendet`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_messagesent1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_messagesent1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_messagesent1", locale)
	if (locale === "en") return en_contact_messagesent1(inputs)
	return de_contact_messagesent1(inputs)
};
export { contact_messagesent1 as "contact_messageSent" }


================================================================================
File: paraglide/messages/contact_phone.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Phone`
};

const de_contact_phone = /** @type {(inputs: {}) => string} */ () => {
	return `Telefon`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_phone = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_phone(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_phone", locale)
	if (locale === "en") return en_contact_phone(inputs)
	return de_contact_phone(inputs)
};


================================================================================
File: paraglide/messages/contact_sendmessage1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Send Message`
};

const de_contact_sendmessage1 = /** @type {(inputs: {}) => string} */ () => {
	return `Nachricht senden`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_sendmessage1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_sendmessage1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_sendmessage1", locale)
	if (locale === "en") return en_contact_sendmessage1(inputs)
	return de_contact_sendmessage1(inputs)
};
export { contact_sendmessage1 as "contact_sendMessage" }


================================================================================
File: paraglide/messages/contact_socialmedia1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Social Media`
};

const de_contact_socialmedia1 = /** @type {(inputs: {}) => string} */ () => {
	return `Soziale Medien`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_socialmedia1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_socialmedia1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_socialmedia1", locale)
	if (locale === "en") return en_contact_socialmedia1(inputs)
	return de_contact_socialmedia1(inputs)
};
export { contact_socialmedia1 as "contact_socialMedia" }


================================================================================
File: paraglide/messages/contact_subject.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Subject`
};

const de_contact_subject = /** @type {(inputs: {}) => string} */ () => {
	return `Betreff`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const contact_subject = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_subject(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_subject", locale)
	if (locale === "en") return en_contact_subject(inputs)
	return de_contact_subject(inputs)
};


================================================================================
File: paraglide/messages/contact_youremail1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `Your Email`
};

const de_contact_youremail1 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihre E-Mail`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_youremail1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_youremail1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_youremail1", locale)
	if (locale === "en") return en_contact_youremail1(inputs)
	return de_contact_youremail1(inputs)
};
export { contact_youremail1 as "contact_yourEmail" }


================================================================================
File: paraglide/messages/contact_yourname1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Your Name`
};

const de_contact_yourname1 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihr Name`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const contact_yourname1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.contact_yourname1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("contact_yourname1", locale)
	if (locale === "en") return en_contact_yourname1(inputs)
	return de_contact_yourname1(inputs)
};
export { contact_yourname1 as "contact_yourName" }


================================================================================
File: paraglide/messages/exhibitions_curator.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Curator`
};

const de_exhibitions_curator = /** @type {(inputs: {}) => string} */ () => {
	return `Kurator`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_curator = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_curator(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_curator", locale)
	if (locale === "en") return en_exhibitions_curator(inputs)
	return de_exhibitions_curator(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_current.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Current Exhibitions`
};

const de_exhibitions_current = /** @type {(inputs: {}) => string} */ () => {
	return `Aktuelle Ausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_current = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_current(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_current", locale)
	if (locale === "en") return en_exhibitions_current(inputs)
	return de_exhibitions_current(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_duration.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Duration`
};

const de_exhibitions_duration = /** @type {(inputs: {}) => string} */ () => {
	return `Dauer`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_duration = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_duration(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_duration", locale)
	if (locale === "en") return en_exhibitions_duration(inputs)
	return de_exhibitions_duration(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_featured.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Featured Exhibition`
};

const de_exhibitions_featured = /** @type {(inputs: {}) => string} */ () => {
	return `Hauptausstellung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_featured = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_featured(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_featured", locale)
	if (locale === "en") return en_exhibitions_featured(inputs)
	return de_exhibitions_featured(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_past.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Past Exhibitions`
};

const de_exhibitions_past = /** @type {(inputs: {}) => string} */ () => {
	return `Vergangene Ausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_past = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_past(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_past", locale)
	if (locale === "en") return en_exhibitions_past(inputs)
	return de_exhibitions_past(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_permanent.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Permanent Collection`
};

const de_exhibitions_permanent = /** @type {(inputs: {}) => string} */ () => {
	return `Dauerausstellung`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_permanent = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_permanent(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_permanent", locale)
	if (locale === "en") return en_exhibitions_permanent(inputs)
	return de_exhibitions_permanent(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_sponsors.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsors`
};

const de_exhibitions_sponsors = /** @type {(inputs: {}) => string} */ () => {
	return `Sponsoren`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_sponsors = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_sponsors(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_sponsors", locale)
	if (locale === "en") return en_exhibitions_sponsors(inputs)
	return de_exhibitions_sponsors(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_temporary.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Temporary Exhibitions`
};

const de_exhibitions_temporary = /** @type {(inputs: {}) => string} */ () => {
	return `Sonderausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_temporary = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_temporary(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_temporary", locale)
	if (locale === "en") return en_exhibitions_temporary(inputs)
	return de_exhibitions_temporary(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_upcoming.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Upcoming Exhibitions`
};

const de_exhibitions_upcoming = /** @type {(inputs: {}) => string} */ () => {
	return `Kommende Ausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const exhibitions_upcoming = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_upcoming(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_upcoming", locale)
	if (locale === "en") return en_exhibitions_upcoming(inputs)
	return de_exhibitions_upcoming(inputs)
};


================================================================================
File: paraglide/messages/exhibitions_viewdetails1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `View Details`
};

const de_exhibitions_viewdetails1 = /** @type {(inputs: {}) => string} */ () => {
	return `Details anzeigen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const exhibitions_viewdetails1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.exhibitions_viewdetails1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("exhibitions_viewdetails1", locale)
	if (locale === "en") return en_exhibitions_viewdetails1(inputs)
	return de_exhibitions_viewdetails1(inputs)
};
export { exhibitions_viewdetails1 as "exhibitions_viewDetails" }


================================================================================
File: paraglide/messages/footer_copyright.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `© 2025 Zungri Museum. All rights reserved.`
};

const de_footer_copyright = /** @type {(inputs: {}) => string} */ () => {
	return `© 2025 Museum von Zungri. Alle Rechte vorbehalten.`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_copyright = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_copyright(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_copyright", locale)
	if (locale === "en") return en_footer_copyright(inputs)
	return de_footer_copyright(inputs)
};


================================================================================
File: paraglide/messages/footer_followus1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Follow Us`
};

const de_footer_followus1 = /** @type {(inputs: {}) => string} */ () => {
	return `Folgen Sie uns`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const footer_followus1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_followus1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_followus1", locale)
	if (locale === "en") return en_footer_followus1(inputs)
	return de_footer_followus1(inputs)
};
export { footer_followus1 as "footer_followUs" }


================================================================================
File: paraglide/messages/footer_newsletter.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Subscribe to Newsletter`
};

const de_footer_newsletter = /** @type {(inputs: {}) => string} */ () => {
	return `Newsletter abonnieren`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_newsletter = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_newsletter(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_newsletter", locale)
	if (locale === "en") return en_footer_newsletter(inputs)
	return de_footer_newsletter(inputs)
};


================================================================================
File: paraglide/messages/footer_privacy.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Privacy Policy`
};

const de_footer_privacy = /** @type {(inputs: {}) => string} */ () => {
	return `Datenschutz`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_privacy = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_privacy(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_privacy", locale)
	if (locale === "en") return en_footer_privacy(inputs)
	return de_footer_privacy(inputs)
};


================================================================================
File: paraglide/messages/footer_supportedby1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Supported by`
};

const de_footer_supportedby1 = /** @type {(inputs: {}) => string} */ () => {
	return `Unterstützt von`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const footer_supportedby1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_supportedby1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_supportedby1", locale)
	if (locale === "en") return en_footer_supportedby1(inputs)
	return de_footer_supportedby1(inputs)
};
export { footer_supportedby1 as "footer_supportedBy" }


================================================================================
File: paraglide/messages/footer_terms.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Terms and Conditions`
};

const de_footer_terms = /** @type {(inputs: {}) => string} */ () => {
	return `Nutzungsbedingungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const footer_terms = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.footer_terms(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("footer_terms", locale)
	if (locale === "en") return en_footer_terms(inputs)
	return de_footer_terms(inputs)
};


================================================================================
File: paraglide/messages/languages_de.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `German`
};

const de_languages_de = /** @type {(inputs: {}) => string} */ () => {
	return `Deutsch`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_de = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_de(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_de", locale)
	if (locale === "en") return en_languages_de(inputs)
	return de_languages_de(inputs)
};


================================================================================
File: paraglide/messages/languages_en.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `English`
};

const de_languages_en = /** @type {(inputs: {}) => string} */ () => {
	return `Englisch`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_en = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_en(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_en", locale)
	if (locale === "en") return en_languages_en(inputs)
	return de_languages_en(inputs)
};


================================================================================
File: paraglide/messages/languages_it.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italian`
};

const de_languages_it = /** @type {(inputs: {}) => string} */ () => {
	return `Italienisch`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const languages_it = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.languages_it(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("languages_it", locale)
	if (locale === "en") return en_languages_it(inputs)
	return de_languages_it(inputs)
};


================================================================================
File: paraglide/messages/museum_accessibility.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Accessibility`
};

const de_museum_accessibility = /** @type {(inputs: {}) => string} */ () => {
	return `Barrierefreiheit`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const museum_accessibility = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_accessibility(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_accessibility", locale)
	if (locale === "en") return en_museum_accessibility(inputs)
	return de_museum_accessibility(inputs)
};


================================================================================
File: paraglide/messages/museum_admissionfees1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Admission Fees`
};

const de_museum_admissionfees1 = /** @type {(inputs: {}) => string} */ () => {
	return `Eintrittspreise`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_admissionfees1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_admissionfees1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_admissionfees1", locale)
	if (locale === "en") return en_museum_admissionfees1(inputs)
	return de_museum_admissionfees1(inputs)
};
export { museum_admissionfees1 as "museum_admissionFees" }


================================================================================
File: paraglide/messages/museum_location.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `How to Reach Us`
};

const de_museum_location = /** @type {(inputs: {}) => string} */ () => {
	return `Anfahrt`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const museum_location = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_location(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_location", locale)
	if (locale === "en") return en_museum_location(inputs)
	return de_museum_location(inputs)
};


================================================================================
File: paraglide/messages/museum_openinghours1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `Opening Hours`
};

const de_museum_openinghours1 = /** @type {(inputs: {}) => string} */ () => {
	return `Öffnungszeiten`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_openinghours1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_openinghours1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_openinghours1", locale)
	if (locale === "en") return en_museum_openinghours1(inputs)
	return de_museum_openinghours1(inputs)
};
export { museum_openinghours1 as "museum_openingHours" }


================================================================================
File: paraglide/messages/museum_welcomesubtitle1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Discover the rich history and traditions of Southern Italy`
};

const de_museum_welcomesubtitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Entdecken Sie die reiche Geschichte und Traditionen Süditaliens`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_welcomesubtitle1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_welcomesubtitle1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_welcomesubtitle1", locale)
	if (locale === "en") return en_museum_welcomesubtitle1(inputs)
	return de_museum_welcomesubtitle1(inputs)
};
export { museum_welcomesubtitle1 as "museum_welcomeSubtitle" }


================================================================================
File: paraglide/messages/museum_welcometitle1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Welcome to Zungri Museum`
};

const de_museum_welcometitle1 = /** @type {(inputs: {}) => string} */ () => {
	return `Willkommen im Museum von Zungri`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const museum_welcometitle1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.museum_welcometitle1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("museum_welcometitle1", locale)
	if (locale === "en") return en_museum_welcometitle1(inputs)
	return de_museum_welcometitle1(inputs)
};
export { museum_welcometitle1 as "museum_welcomeTitle" }


================================================================================
File: paraglide/messages/navigation_about.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `About`
};

const de_navigation_about = /** @type {(inputs: {}) => string} */ () => {
	return `Über uns`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_about = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_about(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_about", locale)
	if (locale === "en") return en_navigation_about(inputs)
	return de_navigation_about(inputs)
};


================================================================================
File: paraglide/messages/navigation_book.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Book Tickets`
};

const de_navigation_book = /** @type {(inputs: {}) => string} */ () => {
	return `Tickets buchen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_book = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_book(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_book", locale)
	if (locale === "en") return en_navigation_book(inputs)
	return de_navigation_book(inputs)
};


================================================================================
File: paraglide/messages/navigation_collections.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Collections`
};

const de_navigation_collections = /** @type {(inputs: {}) => string} */ () => {
	return `Sammlungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_collections = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_collections(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_collections", locale)
	if (locale === "en") return en_navigation_collections(inputs)
	return de_navigation_collections(inputs)
};


================================================================================
File: paraglide/messages/navigation_contact.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Contact Us`
};

const de_navigation_contact = /** @type {(inputs: {}) => string} */ () => {
	return `Kontakt`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_contact = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_contact(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_contact", locale)
	if (locale === "en") return en_navigation_contact(inputs)
	return de_navigation_contact(inputs)
};


================================================================================
File: paraglide/messages/navigation_events.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Events`
};

const de_navigation_events = /** @type {(inputs: {}) => string} */ () => {
	return `Veranstaltungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_events = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_events(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_events", locale)
	if (locale === "en") return en_navigation_events(inputs)
	return de_navigation_events(inputs)
};


================================================================================
File: paraglide/messages/navigation_exhibitions.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Exhibitions`
};

const de_navigation_exhibitions = /** @type {(inputs: {}) => string} */ () => {
	return `Ausstellungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_exhibitions = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_exhibitions(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_exhibitions", locale)
	if (locale === "en") return en_navigation_exhibitions(inputs)
	return de_navigation_exhibitions(inputs)
};


================================================================================
File: paraglide/messages/navigation_home.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Home`
};

const de_navigation_home = /** @type {(inputs: {}) => string} */ () => {
	return `Startseite`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_home = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_home(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_home", locale)
	if (locale === "en") return en_navigation_home(inputs)
	return de_navigation_home(inputs)
};


================================================================================
File: paraglide/messages/navigation_news.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `News`
};

const de_navigation_news = /** @type {(inputs: {}) => string} */ () => {
	return `Nachrichten`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_news = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_news(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_news", locale)
	if (locale === "en") return en_navigation_news(inputs)
	return de_navigation_news(inputs)
};


================================================================================
File: paraglide/messages/navigation_shop.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Museum Shop`
};

const de_navigation_shop = /** @type {(inputs: {}) => string} */ () => {
	return `Museumsshop`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_shop = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_shop(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_shop", locale)
	if (locale === "en") return en_navigation_shop(inputs)
	return de_navigation_shop(inputs)
};


================================================================================
File: paraglide/messages/navigation_visit.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Plan Your Visit`
};

const de_navigation_visit = /** @type {(inputs: {}) => string} */ () => {
	return `Besuch planen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const navigation_visit = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.navigation_visit(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("navigation_visit", locale)
	if (locale === "en") return en_navigation_visit(inputs)
	return de_navigation_visit(inputs)
};


================================================================================
File: paraglide/messages/visit_beforeyoucome2.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Before You Come`
};

const de_visit_beforeyoucome2 = /** @type {(inputs: {}) => string} */ () => {
	return `Vor Ihrem Besuch`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_beforeyoucome2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_beforeyoucome2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_beforeyoucome2", locale)
	if (locale === "en") return en_visit_beforeyoucome2(inputs)
	return de_visit_beforeyoucome2(inputs)
};
export { visit_beforeyoucome2 as "visit_beforeYouCome" }


================================================================================
File: paraglide/messages/visit_cafeteria.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Cafeteria`
};

const de_visit_cafeteria = /** @type {(inputs: {}) => string} */ () => {
	return `Cafeteria`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_cafeteria = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_cafeteria(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_cafeteria", locale)
	if (locale === "en") return en_visit_cafeteria(inputs)
	return de_visit_cafeteria(inputs)
};


================================================================================
File: paraglide/messages/visit_facilities.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Facilities`
};

const de_visit_facilities = /** @type {(inputs: {}) => string} */ () => {
	return `Einrichtungen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_facilities = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_facilities(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_facilities", locale)
	if (locale === "en") return en_visit_facilities(inputs)
	return de_visit_facilities(inputs)
};


================================================================================
File: paraglide/messages/visit_familyfriendly1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Family Friendly`
};

const de_visit_familyfriendly1 = /** @type {(inputs: {}) => string} */ () => {
	return `Familienfreundlich`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_familyfriendly1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_familyfriendly1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_familyfriendly1", locale)
	if (locale === "en") return en_visit_familyfriendly1(inputs)
	return de_visit_familyfriendly1(inputs)
};
export { visit_familyfriendly1 as "visit_familyFriendly" }


================================================================================
File: paraglide/messages/visit_giftshop1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Gift Shop`
};

const de_visit_giftshop1 = /** @type {(inputs: {}) => string} */ () => {
	return `Geschenkeladen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_giftshop1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_giftshop1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_giftshop1", locale)
	if (locale === "en") return en_visit_giftshop1(inputs)
	return de_visit_giftshop1(inputs)
};
export { visit_giftshop1 as "visit_giftShop" }


================================================================================
File: paraglide/messages/visit_parking.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parking`
};

const de_visit_parking = /** @type {(inputs: {}) => string} */ () => {
	return `Parkplatz`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
export const visit_parking = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_parking(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_parking", locale)
	if (locale === "en") return en_visit_parking(inputs)
	return de_visit_parking(inputs)
};


================================================================================
File: paraglide/messages/visit_planyourvisit2.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Plan Your Visit`
};

const de_visit_planyourvisit2 = /** @type {(inputs: {}) => string} */ () => {
	return `Ihren Besuch planen`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_planyourvisit2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_planyourvisit2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_planyourvisit2", locale)
	if (locale === "en") return en_visit_planyourvisit2(inputs)
	return de_visit_planyourvisit2(inputs)
};
export { visit_planyourvisit2 as "visit_planYourVisit" }


================================================================================
File: paraglide/messages/visit_whattoexpected2.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_whattoexpected2 = /** @type {(inputs: {}) => string} */ () => {
	return `What to Expect`
};

const de_visit_whattoexpected2 = /** @type {(inputs: {}) => string} */ () => {
	return `Was Sie erwartet`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_whattoexpected2 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_whattoexpected2(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_whattoexpected2", locale)
	if (locale === "en") return en_visit_whattoexpected2(inputs)
	return de_visit_whattoexpected2(inputs)
};
export { visit_whattoexpected2 as "visit_whatToExpected" }


================================================================================
File: paraglide/messages/visit_wheelchairaccess1.js
================================================================================

// eslint-disable
import { getLocale, trackMessageCall, experimentalMiddlewareLocaleSplitting, isServer } from '../runtime.js';

const en_visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Wheelchair Access`
};

const de_visit_wheelchairaccess1 = /** @type {(inputs: {}) => string} */ () => {
	return `Rollstuhlzugang`
};

/**
* This function has been compiled by [Paraglide JS](https://inlang.com/m/gerre34r).
*
* - Changing this function will be over-written by the next build.
*
* - If you want to change the translations, you can either edit the source files e.g. `en.json`, or
* use another inlang app like [Fink](https://inlang.com/m/tdozzpar) or the [VSCode extension Sherlock](https://inlang.com/m/r7kp499g).
* 
* @param {{}} inputs
* @param {{ locale?: "en" | "de" }} options
* @returns {string}
*/
/* @__NO_SIDE_EFFECTS__ */
const visit_wheelchairaccess1 = (inputs = {}, options = {}) => {
	if (experimentalMiddlewareLocaleSplitting && isServer === false) {
		return /** @type {any} */ (globalThis).__paraglide_ssr.visit_wheelchairaccess1(inputs) 
	}
	const locale = options.locale ?? getLocale()
	trackMessageCall("visit_wheelchairaccess1", locale)
	if (locale === "en") return en_visit_wheelchairaccess1(inputs)
	return de_visit_wheelchairaccess1(inputs)
};
export { visit_wheelchairaccess1 as "visit_wheelchairAccess" }


================================================================================
File: paraglide/messages.js
================================================================================

// eslint-disable
export * from './messages/_index.js'
// enabling auto-import by exposing all messages as m
export * as m from './messages/_index.js'


================================================================================
File: paraglide/registry.js
================================================================================

// eslint-disable

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.PluralRulesOptions} [options]
 * @returns {string}
 */
export function plural(locale, input, options) { 
	return new Intl.PluralRules(locale, options).select(Number(input))
};

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.NumberFormatOptions} [options]
 * @returns {string}
 */
export function number(locale, input, options) {
	return new Intl.NumberFormat(locale, options).format(Number(input))
};

/**
 * @param {import("./runtime.js").Locale} locale
 * @param {unknown} input
 * @param {Intl.DateTimeFormatOptions} [options]
 * @returns {string}
 */
export function datetime(locale, input, options) {
	return new Intl.DateTimeFormat(locale, options).format(new Date(/** @type {string} */ (input)))
};


================================================================================
File: paraglide/runtime.js
================================================================================

// eslint-disable

/** @type {any} */
const URLPattern = {}

/**
 * The project's base locale.
 *
 * @example
 *   if (locale === baseLocale) {
 *     // do something
 *   }
 */
export const baseLocale = "en";
/**
 * The project's locales that have been specified in the settings.
 *
 * @example
 *   if (locales.includes(userSelectedLocale) === false) {
 *     throw new Error('Locale is not available');
 *   }
 */
export const locales = /** @type {const} */ (["en", "de"]);
/** @type {string} */
export const cookieName = "PARAGLIDE_LOCALE";
/** @type {number} */
export const cookieMaxAge = 34560000;
/** @type {string} */
export const cookieDomain = "";
/** @type {string} */
export const localStorageKey = "PARAGLIDE_LOCALE";
/**
 * @type {Array<"cookie" | "baseLocale" | "globalVariable" | "url" | "preferredLanguage" | "localStorage" | `custom-${string}`>}
 */
export const strategy = [
    "cookie",
    "globalVariable",
    "baseLocale"
];
/**
 * The used URL patterns.
 *
 * @type {Array<{ pattern: string, localized: Array<[Locale, string]> }> }
 */
export const urlPatterns = [
    {
        "pattern": ":protocol://:domain(.*)::port?/:path(.*)?",
        "localized": [
            [
                "de",
                ":protocol://:domain(.*)::port?/de/:path(.*)?"
            ],
            [
                "en",
                ":protocol://:domain(.*)::port?/:path(.*)?"
            ]
        ]
    }
];
/**
 * @typedef {{
 * 		getStore(): {
 *   		locale?: Locale,
 * 			origin?: string,
 * 			messageCalls?: Set<string>
 *   	} | undefined,
 * 		run: (store: { locale?: Locale, origin?: string, messageCalls?: Set<string>},
 *    cb: any) => any
 * }} ParaglideAsyncLocalStorage
 */
/**
 * Server side async local storage that is set by `serverMiddleware()`.
 *
 * The variable is used to retrieve the locale and origin in a server-side
 * rendering context without effecting other requests.
 *
 * @type {ParaglideAsyncLocalStorage | undefined}
 */
export let serverAsyncLocalStorage = undefined;
export const disableAsyncLocalStorage = false;
export const experimentalMiddlewareLocaleSplitting = false;
export const isServer = typeof window === 'undefined';
/**
 * Sets the server side async local storage.
 *
 * The function is needed because the `runtime.js` file
 * must define the `serverAsyncLocalStorage` variable to
 * avoid a circular import between `runtime.js` and
 * `server.js` files.
 *
 * @param {ParaglideAsyncLocalStorage | undefined} value
 */
export function overwriteServerAsyncLocalStorage(value) {
    serverAsyncLocalStorage = value;
}
const TREE_SHAKE_COOKIE_STRATEGY_USED = true;
const TREE_SHAKE_URL_STRATEGY_USED = false;
const TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED = true;
const TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED = false;
const TREE_SHAKE_DEFAULT_URL_PATTERN_USED = true;
const TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED = false;

globalThis.__paraglide = {}

/**
 * This is a fallback to get started with a custom
 * strategy and avoid type errors.
 *
 * The implementation is overwritten
 * by \`overwriteGetLocale()\` and \`defineSetLocale()\`.
 *
 * @type {Locale|undefined}
 */
let _locale;
let localeInitiallySet = false;
/**
 * Get the current locale.
 *
 * @example
 *   if (getLocale() === 'de') {
 *     console.log('Germany 🇩🇪');
 *   } else if (getLocale() === 'nl') {
 *     console.log('Netherlands 🇳🇱');
 *   }
 *
 * @type {() => Locale}
 */
export let getLocale = () => {
    /** @type {string | undefined} */
    let locale;
    // if running in a server-side rendering context
    // retrieve the locale from the async local storage
    if (serverAsyncLocalStorage) {
        const locale = serverAsyncLocalStorage?.getStore()?.locale;
        if (locale) {
            return locale;
        }
    }
    for (const strat of strategy) {
        if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            locale = extractLocaleFromCookie();
        }
        else if (strat === "baseLocale") {
            locale = baseLocale;
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED &&
            strat === "url" &&
            !isServer &&
            typeof window !== "undefined") {
            locale = extractLocaleFromUrl(window.location.href);
        }
        else if (TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED &&
            strat === "globalVariable" &&
            _locale !== undefined) {
            locale = _locale;
        }
        else if (TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED &&
            strat === "preferredLanguage" &&
            !isServer) {
            locale = extractLocaleFromNavigator();
        }
        else if (TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED &&
            strat === "localStorage" &&
            !isServer) {
            locale = localStorage.getItem(localStorageKey) ?? undefined;
        }
        else if (isCustomStrategy(strat) && customClientStrategies.has(strat)) {
            const handler = customClientStrategies.get(strat);
            locale = handler.getLocale();
        }
        // check if match, else continue loop
        if (locale !== undefined) {
            const asserted = assertIsLocale(locale);
            if (!localeInitiallySet) {
                _locale = asserted;
                // https://github.com/opral/inlang-paraglide-js/issues/455
                localeInitiallySet = true;
                setLocale(asserted, { reload: false });
            }
            return asserted;
        }
    }
    throw new Error("No locale found. Read the docs https://inlang.com/m/gerre34r/library-inlang-paraglideJs/errors#no-locale-found");
};
/**
 * Overwrite the \`getLocale()\` function.
 *
 * Use this function to overwrite how the locale is resolved. For example,
 * you can resolve the locale from the browser's preferred language,
 * a cookie, env variable, or a user's preference.
 *
 * @example
 *   overwriteGetLocale(() => {
 *     // resolve the locale from a cookie. fallback to the base locale.
 *     return Cookies.get('locale') ?? baseLocale
 *   }
 *
 * @type {(fn: () => Locale) => void}
 */
export const overwriteGetLocale = (fn) => {
    getLocale = fn;
};

/**
 * Set the locale.
 *
 * Set locale reloads the site by default on the client. Reloading
 * can be disabled by passing \`reload: false\` as an option. If
 * reloading is disabled, you need to ensure that the UI is updated
 * to reflect the new locale.
 *
 * @example
 *   setLocale('en');
 *
 * @example
 *   setLocale('en', { reload: false });
 *
 * @type {(newLocale: Locale, options?: { reload?: boolean }) => void}
 */
export let setLocale = (newLocale, options) => {
    const optionsWithDefaults = {
        reload: true,
        ...options,
    };
    // locale is already set
    // https://github.com/opral/inlang-paraglide-js/issues/430
    let currentLocale;
    try {
        currentLocale = getLocale();
    }
    catch {
        // do nothing, no locale has been set yet.
    }
    /** @type {string | undefined} */
    let newLocation = undefined;
    for (const strat of strategy) {
        if (TREE_SHAKE_GLOBAL_VARIABLE_STRATEGY_USED &&
            strat === "globalVariable") {
            // a default for a custom strategy to get started quickly
            // is likely overwritten by `defineSetLocale()`
            _locale = newLocale;
        }
        else if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            if (isServer ||
                typeof document === "undefined" ||
                typeof window === "undefined") {
                continue;
            }
            const domain = cookieDomain || window.location.hostname;
            // set the cookie
            document.cookie = `${cookieName}=${newLocale}; path=/; max-age=${cookieMaxAge}; domain=${domain}`;
        }
        else if (strat === "baseLocale") {
            // nothing to be set here. baseLocale is only a fallback
            continue;
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED &&
            strat === "url" &&
            typeof window !== "undefined") {
            // route to the new url
            //
            // this triggers a page reload but a user rarely
            // switches locales, so this should be fine.
            //
            // if the behavior is not desired, the implementation
            // can be overwritten by `defineSetLocale()` to avoid
            // a full page reload.
            newLocation = localizeUrl(window.location.href, {
                locale: newLocale,
            }).href;
        }
        else if (TREE_SHAKE_LOCAL_STORAGE_STRATEGY_USED &&
            strat === "localStorage" &&
            typeof window !== "undefined") {
            // set the localStorage
            localStorage.setItem(localStorageKey, newLocale);
        }
        else if (isCustomStrategy(strat) && customClientStrategies.has(strat)) {
            const handler = customClientStrategies.get(strat);
            handler.setLocale(newLocale);
        }
    }
    if (!isServer &&
        optionsWithDefaults.reload &&
        window.location &&
        newLocale !== currentLocale) {
        if (newLocation) {
            // reload the page by navigating to the new url
            window.location.href = newLocation;
        }
        else {
            // reload the page to reflect the new locale
            window.location.reload();
        }
    }
    return;
};
/**
 * Overwrite the \`setLocale()\` function.
 *
 * Use this function to overwrite how the locale is set. For example,
 * modify a cookie, env variable, or a user's preference.
 *
 * @example
 *   overwriteSetLocale((newLocale) => {
 *     // set the locale in a cookie
 *     return Cookies.set('locale', newLocale)
 *   });
 *
 * @param {(newLocale: Locale) => void} fn
 */
export const overwriteSetLocale = (fn) => {
    setLocale = fn;
};

/**
 * The origin of the current URL.
 *
 * Defaults to "http://y.com" in non-browser environments. If this
 * behavior is not desired, the implementation can be overwritten
 * by `overwriteGetUrlOrigin()`.
 *
 * @type {() => string}
 */
export let getUrlOrigin = () => {
    if (serverAsyncLocalStorage) {
        return serverAsyncLocalStorage.getStore()?.origin ?? "http://fallback.com";
    }
    else if (typeof window !== "undefined") {
        return window.location.origin;
    }
    return "http://fallback.com";
};
/**
 * Overwrite the getUrlOrigin function.
 *
 * Use this function in server environments to
 * define how the URL origin is resolved.
 *
 * @type {(fn: () => string) => void}
 */
export let overwriteGetUrlOrigin = (fn) => {
    getUrlOrigin = fn;
};

/**
 * Check if something is an available locale.
 *
 * @example
 *   if (isLocale(params.locale)) {
 *     setLocale(params.locale);
 *   } else {
 *     setLocale('en');
 *   }
 *
 * @param {any} locale
 * @returns {locale is Locale}
 */
export function isLocale(locale) {
    return !locale ? false : locales.includes(locale);
}

/**
 * Asserts that the input is a locale.
 *
 * @param {any} input - The input to check.
 * @returns {Locale} The input if it is a locale.
 * @throws {Error} If the input is not a locale.
 */
export function assertIsLocale(input) {
    if (isLocale(input) === false) {
        throw new Error(`Invalid locale: ${input}. Expected one of: ${locales.join(", ")}`);
    }
    return input;
}

/**
 * Extracts a locale from a request.
 *
 * Use the function on the server to extract the locale
 * from a request.
 *
 * The function goes through the strategies in the order
 * they are defined. If a strategy returns an invalid locale,
 * it will fall back to the next strategy.
 *
 * @example
 *   const locale = extractLocaleFromRequest(request);
 *
 * @type {(request: Request) => Locale}
 */
export const extractLocaleFromRequest = (request) => {
    /** @type {string|undefined} */
    let locale;
    for (const strat of strategy) {
        if (TREE_SHAKE_COOKIE_STRATEGY_USED && strat === "cookie") {
            locale = request.headers
                .get("cookie")
                ?.split("; ")
                .find((c) => c.startsWith(cookieName + "="))
                ?.split("=")[1];
        }
        else if (TREE_SHAKE_URL_STRATEGY_USED && strat === "url") {
            locale = extractLocaleFromUrl(request.url);
        }
        else if (TREE_SHAKE_PREFERRED_LANGUAGE_STRATEGY_USED &&
            strat === "preferredLanguage") {
            locale = extractLocaleFromHeader(request);
        }
        else if (strat === "globalVariable") {
            locale = _locale;
        }
        else if (strat === "baseLocale") {
            return baseLocale;
        }
        else if (strat === "localStorage") {
            continue;
        }
        else if (isCustomStrategy(strat) && customServerStrategies.has(strat)) {
            const handler = customServerStrategies.get(strat);
            locale = handler.getLocale(request);
        }
        if (locale !== undefined) {
            if (!isLocale(locale)) {
                locale = undefined;
            }
            else {
                return assertIsLocale(locale);
            }
        }
    }
    throw new Error("No locale found. There is an error in your strategy. Try adding 'baseLocale' as the very last strategy. Read more here https://inlang.com/m/gerre34r/library-inlang-paraglideJs/errors#no-locale-found");
};

/**
 * Extracts a cookie from the document.
 *
 * Will return undefined if the document is not available or if the cookie is not set.
 * The `document` object is not available in server-side rendering, so this function should not be called in that context.
 *
 * @returns {string | undefined}
 */
export function extractLocaleFromCookie() {
    if (typeof document === "undefined" || !document.cookie) {
        return;
    }
    const match = document.cookie.match(new RegExp(`(^| )${cookieName}=([^;]+)`));
    const locale = match?.[2];
    if (isLocale(locale)) {
        return locale;
    }
    return undefined;
}

/**
 * Extracts a locale from the accept-language header.
 *
 * Use the function on the server to extract the locale
 * from the accept-language header that is sent by the client.
 *
 * @example
 *   const locale = extractLocaleFromHeader(request);
 *
 * @type {(request: Request) => Locale}
 * @param {Request} request - The request object to extract the locale from.
 * @returns {string|undefined} The negotiated preferred language.
 */
export function extractLocaleFromHeader(request) {
    const acceptLanguageHeader = request.headers.get("accept-language");
    if (acceptLanguageHeader) {
        // Parse language preferences with their q-values and base language codes
        const languages = acceptLanguageHeader
            .split(",")
            .map((lang) => {
                const [tag, q = "1"] = lang.trim().split(";q=");
                // Get both the full tag and base language code
                const baseTag = tag?.split("-")[0]?.toLowerCase();
                return {
                    fullTag: tag?.toLowerCase(),
                    baseTag,
                    q: Number(q),
                };
            })
            .sort((a, b) => b.q - a.q);
        for (const lang of languages) {
            if (isLocale(lang.fullTag)) {
                return lang.fullTag;
            }
            else if (isLocale(lang.baseTag)) {
                return lang.baseTag;
            }
        }
        return undefined;
    }
    return undefined;
}

/**
 * Negotiates a preferred language from navigator.languages.
 *
 * Use the function on the client to extract the locale
 * from the navigator.languages array.
 *
 * @example
 *   const locale = extractLocaleFromNavigator();
 *
 * @type {() => Locale | undefined}
 * @returns {string | undefined}
 */
export function extractLocaleFromNavigator() {
    if (!navigator?.languages?.length) {
        return undefined;
    }
    const languages = navigator.languages.map((lang) => ({
        fullTag: lang.toLowerCase(),
        baseTag: lang.split("-")[0]?.toLowerCase(),
    }));
    for (const lang of languages) {
        if (isLocale(lang.fullTag)) {
            return lang.fullTag;
        }
        else if (isLocale(lang.baseTag)) {
            return lang.baseTag;
        }
    }
    return undefined;
}

/**
 * If extractLocaleFromUrl is called many times on the same page and the URL
 * hasn't changed, we don't need to recompute it every time which can get expensive.
 * We might use a LRU cache if needed, but for now storing only the last result is enough.
 * https://github.com/opral/monorepo/pull/3575#discussion_r2066731243
 */
/** @type {string|undefined} */
let cachedUrl;
/** @type {Locale|undefined} */
let cachedLocale;
/**
 * Extracts the locale from a given URL using native URLPattern.
 *
 * @param {URL|string} url - The full URL from which to extract the locale.
 * @returns {Locale|undefined} The extracted locale, or undefined if no locale is found.
 */
export function extractLocaleFromUrl(url) {
    const urlString = typeof url === "string" ? url : url.href;
    if (cachedUrl === urlString) {
        return cachedLocale;
    }
    let result;
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        result = defaultUrlPatternExtractLocale(url);
    }
    else {
        const urlObj = typeof url === "string" ? new URL(url) : url;
        // Iterate over URL patterns
        for (const element of urlPatterns) {
            for (const [locale, localizedPattern] of element.localized) {
                const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
                if (!match) {
                    continue;
                }
                // Check if the locale is valid
                if (assertIsLocale(locale)) {
                    result = locale;
                    break;
                }
            }
            if (result)
                break;
        }
    }
    cachedUrl = urlString;
    cachedLocale = result;
    return result;
}
/**
 * https://github.com/opral/inlang-paraglide-js/issues/381
 *
 * @param {URL|string} url - The full URL from which to extract the locale.
 * @returns {Locale|undefined} The extracted locale, or undefined if no locale is found.
 */
function defaultUrlPatternExtractLocale(url) {
    const urlObj = new URL(url, "http://dummy.com");
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    if (pathSegments.length > 0) {
        const potentialLocale = pathSegments[0];
        if (isLocale(potentialLocale)) {
            return potentialLocale;
        }
    }
    // everything else has to be the base locale
    return baseLocale;
}

/**
 * Lower-level URL localization function, primarily used in server contexts.
 *
 * This function is designed for server-side usage where you need precise control
 * over URL localization, such as in middleware or request handlers. It works with
 * URL objects and always returns absolute URLs.
 *
 * For client-side UI components, use `localizeHref()` instead, which provides
 * a more convenient API with relative paths and automatic locale detection.
 *
 * @example
 * ```typescript
 * // Server middleware example
 * app.use((req, res, next) => {
 *   const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);
 *   const localized = localizeUrl(url, { locale: "de" });
 *
 *   if (localized.href !== url.href) {
 *     return res.redirect(localized.href);
 *   }
 *   next();
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using with URL patterns
 * const url = new URL("https://example.com/about");
 * localizeUrl(url, { locale: "de" });
 * // => URL("https://example.com/de/about")
 *
 * // Using with domain-based localization
 * const url = new URL("https://example.com/store");
 * localizeUrl(url, { locale: "de" });
 * // => URL("https://de.example.com/store")
 * ```
 *
 * @param {string | URL} url - The URL to localize. If string, must be absolute.
 * @param {Object} [options] - Options for localization
 * @param {string} [options.locale] - Target locale. If not provided, uses getLocale()
 * @returns {URL} The localized URL, always absolute
 */
export function localizeUrl(url, options) {
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        return localizeUrlDefaultPattern(url, options);
    }
    const targetLocale = options?.locale ?? getLocale();
    const urlObj = typeof url === "string" ? new URL(url) : url;
    // Iterate over URL patterns
    for (const element of urlPatterns) {
        // match localized patterns
        for (const [, localizedPattern] of element.localized) {
            const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
            if (!match) {
                continue;
            }
            const targetPattern = element.localized.find(([locale]) => locale === targetLocale)?.[1];
            if (!targetPattern) {
                continue;
            }
            const localizedUrl = fillPattern(targetPattern, aggregateGroups(match), urlObj.origin);
            return fillMissingUrlParts(localizedUrl, match);
        }
        const unlocalizedMatch = new URLPattern(element.pattern, urlObj.href).exec(urlObj.href);
        if (unlocalizedMatch) {
            const targetPattern = element.localized.find(([locale]) => locale === targetLocale)?.[1];
            if (targetPattern) {
                const localizedUrl = fillPattern(targetPattern, aggregateGroups(unlocalizedMatch), urlObj.origin);
                return fillMissingUrlParts(localizedUrl, unlocalizedMatch);
            }
        }
    }
    // If no match found, return the original URL
    return urlObj;
}
/**
 * https://github.com/opral/inlang-paraglide-js/issues/381
 *
 * @param {string | URL} url
 * @param {Object} [options]
 * @param {string} [options.locale]
 * @returns {URL}
 */
function localizeUrlDefaultPattern(url, options) {
    const urlObj = typeof url === "string" ? new URL(url, getUrlOrigin()) : new URL(url);
    const locale = options?.locale ?? getLocale();
    const currentLocale = extractLocaleFromUrl(urlObj);
    // If current locale matches target locale, no change needed
    if (currentLocale === locale) {
        return urlObj;
    }
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    // If current path starts with a locale, remove it
    if (pathSegments.length > 0 && isLocale(pathSegments[0])) {
        pathSegments.shift();
    }
    // For base locale, don't add prefix
    if (locale === baseLocale) {
        urlObj.pathname = "/" + pathSegments.join("/");
    }
    else {
        // For other locales, add prefix
        urlObj.pathname = "/" + locale + "/" + pathSegments.join("/");
    }
    return urlObj;
}
/**
 * Low-level URL de-localization function, primarily used in server contexts.
 *
 * This function is designed for server-side usage where you need precise control
 * over URL de-localization, such as in middleware or request handlers. It works with
 * URL objects and always returns absolute URLs.
 *
 * For client-side UI components, use `deLocalizeHref()` instead, which provides
 * a more convenient API with relative paths.
 *
 * @example
 * ```typescript
 * // Server middleware example
 * app.use((req, res, next) => {
 *   const url = new URL(req.url, `${req.protocol}://${req.headers.host}`);
 *   const baseUrl = deLocalizeUrl(url);
 *
 *   // Store the base URL for later use
 *   req.baseUrl = baseUrl;
 *   next();
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Using with URL patterns
 * const url = new URL("https://example.com/de/about");
 * deLocalizeUrl(url); // => URL("https://example.com/about")
 *
 * // Using with domain-based localization
 * const url = new URL("https://de.example.com/store");
 * deLocalizeUrl(url); // => URL("https://example.com/store")
 * ```
 *
 * @param {string | URL} url - The URL to de-localize. If string, must be absolute.
 * @returns {URL} The de-localized URL, always absolute
 */
export function deLocalizeUrl(url) {
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        return deLocalizeUrlDefaultPattern(url);
    }
    const urlObj = typeof url === "string" ? new URL(url) : url;
    // Iterate over URL patterns
    for (const element of urlPatterns) {
        // Iterate over localized versions
        for (const [, localizedPattern] of element.localized) {
            const match = new URLPattern(localizedPattern, urlObj.href).exec(urlObj.href);
            if (match) {
                // Convert localized URL back to the base pattern
                const groups = aggregateGroups(match);
                const baseUrl = fillPattern(element.pattern, groups, urlObj.origin);
                return fillMissingUrlParts(baseUrl, match);
            }
        }
        // match unlocalized pattern
        const unlocalizedMatch = new URLPattern(element.pattern, urlObj.href).exec(urlObj.href);
        if (unlocalizedMatch) {
            const baseUrl = fillPattern(element.pattern, aggregateGroups(unlocalizedMatch), urlObj.origin);
            return fillMissingUrlParts(baseUrl, unlocalizedMatch);
        }
    }
    // no match found return the original url
    return urlObj;
}
/**
 * De-localizes a URL using the default pattern (/:locale/*)
 * @param {string|URL} url
 * @returns {URL}
 */
function deLocalizeUrlDefaultPattern(url) {
    const urlObj = typeof url === "string" ? new URL(url, getUrlOrigin()) : new URL(url);
    const pathSegments = urlObj.pathname.split("/").filter(Boolean);
    // If first segment is a locale, remove it
    if (pathSegments.length > 0 && isLocale(pathSegments[0])) {
        urlObj.pathname = "/" + pathSegments.slice(1).join("/");
    }
    return urlObj;
}
/**
 * Takes matches of implicit wildcards in the UrlPattern (when a part is missing
 * it is equal to '*') and adds them back to the result of fillPattern.
 *
 * At least protocol and hostname are required to create a valid URL inside fillPattern.
 *
 * @param {URL} url
 * @param {any} match
 * @returns {URL}
 */
function fillMissingUrlParts(url, match) {
    if (match.protocol.groups["0"]) {
        url.protocol = match.protocol.groups["0"] ?? "";
    }
    if (match.hostname.groups["0"]) {
        url.hostname = match.hostname.groups["0"] ?? "";
    }
    if (match.username.groups["0"]) {
        url.username = match.username.groups["0"] ?? "";
    }
    if (match.password.groups["0"]) {
        url.password = match.password.groups["0"] ?? "";
    }
    if (match.port.groups["0"]) {
        url.port = match.port.groups["0"] ?? "";
    }
    if (match.pathname.groups["0"]) {
        url.pathname = match.pathname.groups["0"] ?? "";
    }
    if (match.search.groups["0"]) {
        url.search = match.search.groups["0"] ?? "";
    }
    if (match.hash.groups["0"]) {
        url.hash = match.hash.groups["0"] ?? "";
    }
    return url;
}
/**
 * Fills a URL pattern with values for named groups, supporting all URLPattern-style modifiers.
 *
 * This function will eventually be replaced by https://github.com/whatwg/urlpattern/issues/73
 *
 * Matches:
 * - :name        -> Simple
 * - :name?       -> Optional
 * - :name+       -> One or more
 * - :name*       -> Zero or more
 * - :name(...)   -> Regex group
 * - {text}       -> Group delimiter
 * - {text}?      -> Optional group delimiter
 *
 * If the value is `null`, the segment is removed.
 *
 * @param {string} pattern - The URL pattern containing named groups.
 * @param {Record<string, string | null | undefined>} values - Object of values for named groups.
 * @param {string} origin - Base URL to use for URL construction.
 * @returns {URL} - The constructed URL with named groups filled.
 */
function fillPattern(pattern, values, origin) {
    // Pre-process the pattern to handle explicit port numbers
    // This detects patterns like "http://localhost:5173" and protects the port number
    // from being interpreted as a parameter
    let processedPattern = pattern.replace(/(https?:\/\/[^:/]+):(\d+)(\/|$)/g, (_, protocol, port, slash) => {
        // Replace ":5173" with "#PORT-5173#" to protect it from parameter replacement
        return `${protocol}#PORT-${port}#${slash}`;
    });
    // First, handle group delimiters with curly braces
    let processedGroupDelimiters = processedPattern.replace(/\{([^{}]*)\}([?+*]?)/g, (_, content, modifier) => {
        // For optional group delimiters
        if (modifier === "?") {
            // For optional groups, we'll include the content
            return content;
        }
        // For non-optional group delimiters, always include the content
        return content;
    });
    // Then handle named groups
    let filled = processedGroupDelimiters.replace(/(\/?):([a-zA-Z0-9_]+)(\([^)]*\))?([?+*]?)/g, (_, slash, name, __, modifier) => {
        const value = values[name];
        if (value === null) {
            // If value is null, remove the entire segment including the preceding slash
            return "";
        }
        if (modifier === "?") {
            // Optional segment
            return value !== undefined ? `${slash}${value}` : "";
        }
        if (modifier === "+" || modifier === "*") {
            // Repeatable segments
            if (value === undefined && modifier === "+") {
                throw new Error(`Missing value for "${name}" (one or more required)`);
            }
            return value ? `${slash}${value}` : "";
        }
        // Simple named group (no modifier)
        if (value === undefined) {
            throw new Error(`Missing value for "${name}"`);
        }
        return `${slash}${value}`;
    });
    // Restore port numbers
    filled = filled.replace(/#PORT-(\d+)#/g, ":$1");
    return new URL(filled, origin);
}
/**
 * Aggregates named groups from various parts of the URLPattern match result.
 *
 *
 * @type {(match: any) => Record<string, string | null | undefined>}
 */
export function aggregateGroups(match) {
    return {
        ...match.hash.groups,
        ...match.hostname.groups,
        ...match.password.groups,
        ...match.pathname.groups,
        ...match.port.groups,
        ...match.protocol.groups,
        ...match.search.groups,
        ...match.username.groups,
    };
}

/**
 * High-level URL localization function optimized for client-side UI usage.
 *
 * This is a convenience wrapper around `localizeUrl()` that provides features
 * needed in UI:
 *
 * - Accepts relative paths (e.g., "/about")
 * - Returns relative paths when possible
 * - Automatically detects current locale if not specified
 * - Handles string input/output instead of URL objects
 *
 * @example
 * ```typescript
 * // In a React/Vue/Svelte component
 * const NavLink = ({ href }) => {
 *   // Automatically uses current locale, keeps path relative
 *   return <a href={localizeHref(href)}>...</a>;
 * };
 *
 * // Examples:
 * localizeHref("/about")
 * // => "/de/about" (if current locale is "de")
 * localizeHref("/store", { locale: "fr" })
 * // => "/fr/store" (explicit locale)
 *
 * // Cross-origin links remain absolute
 * localizeHref("https://other-site.com/about")
 * // => "https://other-site.com/de/about"
 * ```
 *
 * For server-side URL localization (e.g., in middleware), use `localizeUrl()`
 * which provides more precise control over URL handling.
 *
 * @param {string} href - The href to localize (can be relative or absolute)
 * @param {Object} [options] - Options for localization
 * @param {string} [options.locale] - Target locale. If not provided, uses `getLocale()`
 * @returns {string} The localized href, relative if input was relative
 */
export function localizeHref(href, options) {
    const currentLocale = getLocale();
    const locale = options?.locale ?? currentLocale;
    const url = new URL(href, getUrlOrigin());
    const localized = localizeUrl(url, { locale });
    // if the origin is identical and the href is relative,
    // return the relative path
    if (href.startsWith("/") && url.origin === localized.origin) {
        // check for cross origin localization in which case an absolute URL must be returned.
        if (locale !== currentLocale) {
            const localizedCurrentLocale = localizeUrl(url, {
                locale: currentLocale,
            });
            if (localizedCurrentLocale.origin !== localized.origin) {
                return localized.href;
            }
        }
        return localized.pathname + localized.search + localized.hash;
    }
    return localized.href;
}
/**
 * High-level URL de-localization function optimized for client-side UI usage.
 *
 * This is a convenience wrapper around `deLocalizeUrl()` that provides features
 * needed in the UI:
 *
 * - Accepts relative paths (e.g., "/de/about")
 * - Returns relative paths when possible
 * - Handles string input/output instead of URL objects
 *
 * @example
 * ```typescript
 * // In a React/Vue/Svelte component
 * const LocaleSwitcher = ({ href }) => {
 *   // Remove locale prefix before switching
 *   const baseHref = deLocalizeHref(href);
 *   return locales.map(locale =>
 *     <a href={localizeHref(baseHref, { locale })}>
 *       Switch to {locale}
 *     </a>
 *   );
 * };
 *
 * // Examples:
 * deLocalizeHref("/de/about")  // => "/about"
 * deLocalizeHref("/fr/store")  // => "/store"
 *
 * // Cross-origin links remain absolute
 * deLocalizeHref("https://example.com/de/about")
 * // => "https://example.com/about"
 * ```
 *
 * For server-side URL de-localization (e.g., in middleware), use `deLocalizeUrl()`
 * which provides more precise control over URL handling.
 *
 * @param {string} href - The href to de-localize (can be relative or absolute)
 * @returns {string} The de-localized href, relative if input was relative
 * @see deLocalizeUrl - For low-level URL de-localization in server contexts
 */
export function deLocalizeHref(href) {
    const url = new URL(href, getUrlOrigin());
    const deLocalized = deLocalizeUrl(url);
    // If the origin is identical and the href is relative,
    // return the relative path instead of the full URL.
    if (href.startsWith("/") && url.origin === deLocalized.origin) {
        return deLocalized.pathname + deLocalized.search + deLocalized.hash;
    }
    return deLocalized.href;
}

/**
 * @param {string} safeModuleId
 * @param {Locale} locale
 */
export function trackMessageCall(safeModuleId, locale) {
    if (isServer === false)
        return;
    const store = serverAsyncLocalStorage?.getStore();
    if (store) {
        store.messageCalls?.add(`${safeModuleId}:${locale}`);
    }
}

/**
 * Generates a list of localized URLs for all provided URLs.
 *
 * This is useful for SSG (Static Site Generation) and sitemap generation.
 * NextJS and other frameworks use this function for SSG.
 *
 * @example
 * ```typescript
 * const urls = generateStaticLocalizedUrls([
 *   "https://example.com/about",
 *   "https://example.com/blog",
 * ]);
 * urls[0].href // => "https://example.com/about"
 * urls[1].href // => "https://example.com/blog"
 * urls[2].href // => "https://example.com/de/about"
 * urls[3].href // => "https://example.com/de/blog"
 * ...
 * ```
 *
 * @param {(string | URL)[]} urls - List of URLs to generate localized versions for. Can be absolute URLs or paths.
 * @returns {URL[]} List of localized URLs as URL objects
 */
export function generateStaticLocalizedUrls(urls) {
    const localizedUrls = new Set();
    // For default URL pattern, we can optimize the generation
    if (TREE_SHAKE_DEFAULT_URL_PATTERN_USED) {
        for (const urlInput of urls) {
            const url = urlInput instanceof URL
                ? urlInput
                : new URL(urlInput, "http://localhost");
            // Base locale doesn't get a prefix
            localizedUrls.add(url);
            // Other locales get their code as prefix
            for (const locale of locales) {
                if (locale !== baseLocale) {
                    const localizedPath = `/${locale}${url.pathname}${url.search}${url.hash}`;
                    const localizedUrl = new URL(localizedPath, url.origin);
                    localizedUrls.add(localizedUrl);
                }
            }
        }
        return Array.from(localizedUrls);
    }
    // For custom URL patterns, we need to use localizeUrl for each URL and locale
    for (const urlInput of urls) {
        const url = urlInput instanceof URL
            ? urlInput
            : new URL(urlInput, "http://localhost");
        // Try each URL pattern to find one that matches
        let patternFound = false;
        for (const pattern of urlPatterns) {
            try {
                // Try to match the unlocalized pattern
                const unlocalizedMatch = new URLPattern(pattern.pattern, url.href).exec(url.href);
                if (!unlocalizedMatch)
                    continue;
                patternFound = true;
                // Track unique localized URLs to avoid duplicates when patterns are the same
                const seenUrls = new Set();
                // Generate localized URL for each locale
                for (const [locale] of pattern.localized) {
                    try {
                        const localizedUrl = localizeUrl(url, { locale });
                        const urlString = localizedUrl.href;
                        // Only add if we haven't seen this exact URL before
                        if (!seenUrls.has(urlString)) {
                            seenUrls.add(urlString);
                            localizedUrls.add(localizedUrl);
                        }
                    }
                    catch {
                        // Skip if localization fails for this locale
                        continue;
                    }
                }
                break;
            }
            catch {
                // Skip if pattern matching fails
                continue;
            }
        }
        // If no pattern matched, use the URL as is
        if (!patternFound) {
            localizedUrls.add(url);
        }
    }
    return Array.from(localizedUrls);
}

/**
 * @typedef {"cookie" | "baseLocale" | "globalVariable" | "url" | "preferredLanguage" | "localStorage"} BuiltInStrategy
 */
/**
 * @typedef {`custom_${string}`} CustomStrategy
 */
/**
 * @typedef {BuiltInStrategy | CustomStrategy} Strategy
 */
/**
 * @typedef {Array<Strategy>} Strategies
 */
/**
 * @typedef {{ getLocale: (request?: Request) => string | undefined }} CustomServerStrategyHandler
 */
/**
 * @typedef {{ getLocale: () => string | undefined, setLocale: (locale: string) => void }} CustomClientStrategyHandler
 */
export const customServerStrategies = new Map();
export const customClientStrategies = new Map();
/**
 * Checks if the given strategy is a custom strategy.
 *
 * @param {any} strategy The name of the custom strategy to validate.
 * Must be a string that starts with "custom-" followed by alphanumeric characters.
 * @returns {boolean} Returns true if it is a custom strategy, false otherwise.
 */
export function isCustomStrategy(strategy) {
    return typeof strategy === "string" && /^custom-[A-Za-z0-9]+$/.test(strategy);
}
/**
 * Defines a custom strategy that is executed on the server.
 *
 * @param {any} strategy The name of the custom strategy to define. Must follow the pattern `custom-<name>` where
 * `<name>` contains only alphanumeric characters.
 * @param {CustomServerStrategyHandler} handler The handler for the custom strategy, which should implement
 * the method `getLocale`.
 * @returns {void}
 */
export function defineCustomServerStrategy(strategy, handler) {
    if (!isCustomStrategy(strategy)) {
        throw new Error(`Invalid custom strategy: "${strategy}". Must be a custom strategy following the pattern custom-<name>` +
            " where <name> contains only alphanumeric characters.");
    }
    customServerStrategies.set(strategy, handler);
}
/**
 * Defines a custom strategy that is executed on the client.
 *
 * @param {any} strategy The name of the custom strategy to define. Must follow the pattern `custom-<name>` where
 * `<name>` contains only alphanumeric characters.
 * @param {CustomClientStrategyHandler} handler The handler for the custom strategy, which should implement the
 * methods `getLocale` and `setLocale`.
 * @returns {void}
 */
export function defineCustomClientStrategy(strategy, handler) {
    if (!isCustomStrategy(strategy)) {
        throw new Error(`Invalid custom strategy: "${strategy}". Must be a custom strategy following the pattern custom-<name>` +
            " where <name> contains only alphanumeric characters.");
    }
    customClientStrategies.set(strategy, handler);
}

// ------ TYPES ------

/**
 * A locale that is available in the project.
 *
 * @example
 *   setLocale(request.locale as Locale)
 *
 * @typedef {(typeof locales)[number]} Locale
 */




================================================================================
File: paraglide/server.js
================================================================================

// eslint-disable

import * as runtime from "./runtime.js";

/**
 * Server middleware that handles locale-based routing and request processing.
 *
 * This middleware performs several key functions:
 *
 * 1. Determines the locale for the incoming request using configured strategies
 * 2. Handles URL localization and redirects (only for document requests)
 * 3. Maintains locale state using AsyncLocalStorage to prevent request interference
 *
 * When URL strategy is used:
 *
 * - The locale is extracted from the URL for all request types
 * - If URL doesn't match the determined locale, redirects to localized URL (only for document requests)
 * - De-localizes URLs before passing to server (e.g., `/fr/about` → `/about`)
 *
 * @template T - The return type of the resolve function
 *
 * @param {Request} request - The incoming request object
 * @param {(args: { request: Request, locale: import("./runtime.js").Locale }) => T | Promise<T>} resolve - Function to handle the request
 * @param {{ onRedirect:(response: Response) => void }} [callbacks] - Callbacks to handle events from middleware
 * @returns {Promise<Response>}
 *
 * @example
 * ```typescript
 * // Basic usage in metaframeworks like NextJS, SvelteKit, Astro, Nuxt, etc.
 * export const handle = async ({ event, resolve }) => {
 *   return serverMiddleware(event.request, ({ request, locale }) => {
 *     // let the framework further resolve the request
 *     return resolve(request);
 *   });
 * };
 * ```
 *
 * @example
 * ```typescript
 * // Usage in a framework like Express JS or Hono
 * app.use(async (req, res, next) => {
 *   const result = await serverMiddleware(req, ({ request, locale }) => {
 *     // If a redirect happens this won't be called
 *     return next(request);
 *   });
 * });
 * ```
 *
 * @example
 * ```typescript
 * // Usage in serverless environments like Cloudflare Workers
 * // ⚠️ WARNING: This should ONLY be used in serverless environments like Cloudflare Workers.
 * // Disabling AsyncLocalStorage in traditional server environments risks cross-request pollution where state from
 * // one request could leak into another concurrent request.
 * export default {
 *   fetch: async (request) => {
 *     return serverMiddleware(
 *       request,
 *       ({ request, locale }) => handleRequest(request, locale),
 *       { disableAsyncLocalStorage: true }
 *     );
 *   }
 * };
 * ```
 */
export async function paraglideMiddleware(request, resolve, callbacks) {
    if (!runtime.disableAsyncLocalStorage && !runtime.serverAsyncLocalStorage) {
        const { AsyncLocalStorage } = await import("async_hooks");
        runtime.overwriteServerAsyncLocalStorage(new AsyncLocalStorage());
    }
    else if (!runtime.serverAsyncLocalStorage) {
        runtime.overwriteServerAsyncLocalStorage(createMockAsyncLocalStorage());
    }
    const locale = runtime.extractLocaleFromRequest(request);
    const origin = new URL(request.url).origin;
    // if the client makes a request to a URL that doesn't match
    // the localizedUrl, redirect the client to the localized URL
    if (request.headers.get("Sec-Fetch-Dest") === "document" &&
        runtime.strategy.includes("url")) {
        const localizedUrl = runtime.localizeUrl(request.url, { locale });
        if (normalizeURL(localizedUrl.href) !== normalizeURL(request.url)) {
            // Create headers object with Vary header if preferredLanguage strategy is used
            /** @type {Record<string, string>} */
            const headers = {};
            if (runtime.strategy.includes("preferredLanguage")) {
                headers["Vary"] = "Accept-Language";
            }
            const response = new Response(null, {
                status: 307,
                headers: {
                    Location: localizedUrl.href,
                    ...headers,
                },
            });
            callbacks?.onRedirect(response);
            return response;
        }
    }
    // If the strategy includes "url", we need to de-localize the URL
    // before passing it to the server middleware.
    //
    // The middleware is responsible for mapping a localized URL to the
    // de-localized URL e.g. `/en/about` to `/about`. Otherwise,
    // the server can't render the correct page.
    const newRequest = runtime.strategy.includes("url")
        ? new Request(runtime.deLocalizeUrl(request.url), request)
        : // need to create a new request object because some metaframeworks (nextjs!) throw otherwise
            // https://github.com/opral/inlang-paraglide-js/issues/411
            new Request(request);
    // the message functions that have been called in this request
    /** @type {Set<string>} */
    const messageCalls = new Set();
    const response = await runtime.serverAsyncLocalStorage?.run({ locale, origin, messageCalls }, () => resolve({ locale, request: newRequest }));
    // Only modify HTML responses
    if (runtime.experimentalMiddlewareLocaleSplitting &&
        response.headers.get("Content-Type")?.includes("html")) {
        const body = await response.text();
        const messages = [];
        // using .values() to avoid polyfilling in older projects. else the following error is thrown
        // Type 'Set<string>' can only be iterated through when using the '--downlevelIteration' flag or with a '--target' of 'es2015' or higher.
        for (const messageCall of Array.from(messageCalls)) {
            const [id, locale] = 
            /** @type {[string, import("./runtime.js").Locale]} */ (messageCall.split(":"));
            messages.push(`${id}: ${compiledBundles[id]?.[locale]}`);
        }
        const script = `<script>globalThis.__paraglide_ssr = { ${messages.join(",")} }</script>`;
        // Insert the script before the closing head tag
        const newBody = body.replace("</head>", `${script}</head>`);
        // Create a new response with the modified body
        // Clone all headers except Content-Length which will be set automatically
        const newHeaders = new Headers(response.headers);
        newHeaders.delete("Content-Length"); // Let the browser calculate the correct length
        return new Response(newBody, {
            status: response.status,
            statusText: response.statusText,
            headers: newHeaders,
        });
    }
    return response;
}
/**
 * Normalize url for comparison.
 * Strips trailing slash
 * @param {string} url
 * @returns {string} normalized url string
 */
function normalizeURL(url) {
    const urlObj = new URL(url);
    // // strip trailing slash from pathname
    urlObj.pathname = urlObj.pathname.replace(/\/$/, "");
    return urlObj.href;
}
/**
 * Creates a mock AsyncLocalStorage implementation for environments where
 * native AsyncLocalStorage is not available or disabled.
 *
 * This mock implementation mimics the behavior of the native AsyncLocalStorage
 * but doesn't require the async_hooks module. It's designed to be used in
 * environments like Cloudflare Workers where AsyncLocalStorage is not available.
 *
 * @returns {import("./runtime.js").ParaglideAsyncLocalStorage}
 */
function createMockAsyncLocalStorage() {
    /** @type {any} */
    let currentStore = undefined;
    return {
        getStore() {
            return currentStore;
        },
        async run(store, callback) {
            currentStore = store;
            try {
                return await callback();
            }
            finally {
                currentStore = undefined;
            }
        },
    };
}
/**
 * The compiled messages for the server middleware.
 *
 * Only populated if `enableMiddlewareOptimizations` is set to `true`.
 *
 * @type {Record<string, Record<import("./runtime.js").Locale, string>>}
 */
const compiledBundles = {};



================================================================================
File: routes/+layout.server.ts
================================================================================

import type { LayoutServerLoad } from './$types';

/**
 * @file Root server layout loader for the Zungri Museum application.
 * @description This function runs on the server for every request and loads
 * essential data that is available to all pages. It primarily deals with
 * session and user authentication state.
 *
 * @param {object} event - The SvelteKit load event.
 * @returns {Promise<object>} An object containing session and user data.
 * This data is merged into the `data` prop available in all layouts and pages.
 */
export const load: LayoutServerLoad = async ({ locals: { session, user } }) => {
    return {
        session,
        user
    };
};


================================================================================
File: routes/+layout.svelte
================================================================================

<!--
/**
 * @file +layout.svelte (Root Layout)
 * @description The main layout for the entire application.
 * It sets up global styles, fonts, and initializes client-side services like Supabase auth listener.
 *
 * @dependencies
 * - $app/navigation: `goto` for navigation.
 * - $lib/stores/session: `initializeAuthListener` to set up Supabase auth state listener.
 * - svelte: `onMount` lifecycle hook.
 *
 * @notes
 * - The `initializeAuthListener` is called here to ensure it runs once on client mount.
 * - Includes global CSS and font imports.
 * - The main page content is rendered via the <slot />.
 */
-->
<script lang="ts">
	import '../app.css'; // Global styles including Tailwind
	import { initializeAuthListener } from '$lib/stores/authStore';

	let { children } = $props();

	// Initialize the Supabase auth listener when the component mounts on the client
	$effect(() => {
		const unsubscribe = initializeAuthListener();
		return () => {
			if (unsubscribe) {
				unsubscribe();
			}
		};
	});
</script>

<!-- 
  The main application content will be slotted here.
  The previous landing page content has been removed from this root layout.
  It should reside in `src/routes/+page.svelte` if it's the homepage.
-->
<div class="flex min-h-screen flex-col bg-gray-300 text-white">
	{@render children()}
</div>

<!-- 
  The previous styling in <style> block seems to be for a specific landing page, 
  not general app layout. It has been removed. Global styles should be in app.css.
  If specific styles are needed for this layout wrapper, they can be added here.
-->
<style>
	/* Minimal global layout styles can go here if not covered by app.css */
	:global(body) {
		font-family: 'Poppins', sans-serif;
		background-color: hsl(210, 20%, 12%); /* Default dark background from :root of previous style */
		color: hsl(0, 0%, 95%); /* Default light text */
	}
</style>



================================================================================
File: routes/+layout.ts
================================================================================

// src/routes/+layout.ts

import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'
import { dev } from '$app/environment';
import { injectAnalytics } from '@vercel/analytics/sveltekit';

export const load = async ({ fetch, data, depends }) => {
    depends('supabase:auth')

    const supabase = isBrowser()
        ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
            global: { fetch }
        })
        : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
            global: { fetch },
            cookies: {
                getAll() {
                    return data.cookies
                }
            }
        })

    const session = isBrowser() ? (await supabase.auth.getSession()).data.session : data.session

    return { supabase, session }
}



injectAnalytics({ mode: dev ? 'development' : 'production' });



================================================================================
File: routes/+page.svelte
================================================================================




================================================================================
File: routes/auth/+layout.svelte
================================================================================

<!--
/**
 * @file +layout.svelte
 * @description Enhanced layout for authentication pages with smooth transitions,
 * improved accessibility, responsive design, and better error handling.
 *
 * @features
 * - Elegant loading states with fade transitions
 * - Responsive design with proper spacing on all devices
 * - Improved accessibility with aria attributes
 * - Proper error handling with user feedback
 * - Dynamic navigation links based on current route
 * - Subtle animations for better user experience
 */
-->
<script lang="ts">
	import { fade, fly } from 'svelte/transition';
	import { sessionStore, authReady } from '$lib/stores/authStore';
	import { goto } from '$app/navigation';
	import { page } from '$app/state';

	let { children } = $props();

	let authError: string | null = $state(null);
	let isRedirecting = $state(false);

	// Auth page config
	const authRoutes = [
		{
			path: '/auth/login',
			links: [
				{
					label: 'Sign up',
					href: '/auth/signup',
					prompt: "Don't have an account?"
				},
				{
					label: 'Forgot your password?',
					href: '/auth/reset-password',
					prompt: '',
					size: 'sm'
				}
			]
		},
		{
			path: '/auth/signup',
			links: [
				{
					label: 'Log in',
					href: '/auth/login',
					prompt: 'Already have an account?'
				}
			]
		},
		{
			path: '/auth/reset-password',
			links: [
				{
					label: 'Back to login',
					href: '/auth/login',
					prompt: 'Remember your password?'
				}
			]
		}
		// Add new auth routes here, eg: verify-email, magic-link, etc
	];

	// Get current route info
	let currentPath = $derived(page.url.pathname);
	let currentAuthRoute = $derived(authRoutes.find((r) => r.path === currentPath));

	$effect(() => {
		let unsubAuthReady: (() => void) | undefined;
		let unsubSession: (() => void) | undefined;

		unsubAuthReady = authReady.subscribe((ready) => {
			if (ready) {
				unsubSession = sessionStore.subscribe((session) => {
					// Only try redirect if there is a session and we aren't already on /dashboard
					if (session && page.url.pathname !== '/dashboard') {
						isRedirecting = true;
						goto('/dashboard', { replaceState: true }).catch((error) => {
							isRedirecting = false;
							authError = 'Navigation error. Please try again.';
							console.error('[AuthLayout] Navigation error:', error);
						});
					}
				});
			}
		});

		return () => {
			unsubAuthReady && unsubAuthReady();
			unsubSession && unsubSession();
		};
	});
</script>

<div
	class="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-gray-900 to-gray-800 p-4 text-white sm:p-6"
>
	<div class="w-full max-w-md" in:fade={{ duration: 300, delay: 150 }}>
		<!-- Logo and branding -->
		<div class="mb-8 text-center">
			<a href="/" class="group inline-flex items-center" aria-label="Go to homepage">
				<span
					class="bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-3xl font-bold text-transparent transition-all duration-300 group-hover:from-blue-300 group-hover:to-blue-500"
				>
					Project NAME
				</span>
			</a>
			<p class="mt-2 text-sm text-gray-400">Your business connection platform</p>
		</div>
		<div
			class="overflow-hidden rounded-xl border border-gray-700 bg-gray-800 shadow-2xl"
			in:fly={{ y: 20, duration: 400, delay: 200 }}
		>
			<!-- State management -->
			{#if !$authReady}
				<div class="p-8 text-center" aria-live="polite">
					<div class="mb-4 flex justify-center">
						<div
							class="h-8 w-8 animate-spin rounded-full border-4 border-gray-600 border-t-blue-500"
						></div>
					</div>
					<p class="text-gray-300">Preparing your authentication...</p>
				</div>
			{:else if isRedirecting}
				<div class="p-8 text-center" aria-live="polite">
					<div class="mb-4 flex justify-center">
						<div
							class="h-8 w-8 animate-spin rounded-full border-4 border-gray-600 border-t-blue-500"
						></div>
					</div>
					<p class="text-gray-300">Redirecting to your dashboard...</p>
				</div>
			{:else if authError}
				<div class="bg-red-900/30 p-6 text-center" role="alert" aria-live="assertive">
					<p class="text-red-200">{authError}</p>
					<button
						class="mt-2 rounded-md bg-red-800 px-4 py-1 text-sm transition-colors hover:bg-red-700"
						on:click={() => (authError = null)}
					>
						Dismiss
					</button>
				</div>
				<div class="p-6 sm:p-8">
					{@render children()}
				</div>
			{:else}
				<div class="p-6 sm:p-8">
					{@render children()}
				</div>
			{/if}
		</div>
		<!-- Dynamic navigation links -->
		<div class="mt-6 text-center" in:fade={{ duration: 300, delay: 400 }}>
			{#if currentAuthRoute}
				{#each currentAuthRoute.links as l}
					{#if l.prompt}
						<p class="text-gray-300">
							{l.prompt}
							<a
								href={l.href}
								class={`font-medium text-blue-400 underline-offset-2 transition-colors hover:text-blue-300 hover:underline ${l.size === 'sm' ? 'text-sm' : ''}`}
							>
								{l.label}
							</a>
						</p>
					{:else}
						<p class="text-sm text-gray-400">
							<a href={l.href} class="transition-colors hover:text-gray-300">
								{l.label}
							</a>
						</p>
					{/if}
				{/each}
			{/if}
			<!-- Footer info -->
			<div class="mt-8 text-xs text-gray-500">
				<p>
					© {new Date().getFullYear()} B2B Deals, Inc. All rights reserved.
				</p>
				<div class="mt-2 flex justify-center space-x-4">
					<a href="/privacy" class="transition-colors hover:text-gray-400">Privacy</a>
					<a href="/terms" class="transition-colors hover:text-gray-400">Terms</a>
					<a href="/help" class="transition-colors hover:text-gray-400">Help</a>
				</div>
			</div>
		</div>
	</div>
</div>



================================================================================
File: routes/auth/login/+page.svelte
================================================================================

<!--
/**
 * @file +page.svelte (Login Page)
 * @description Allows users to log in to the application using their email and password.
 *
 * Key features:
 * - Email and password input fields.
 * - Form submission handling.
 * - Interaction with Supabase for authentication.
 * - Display of loading states and error messages.
 * - Redirection to the dashboard upon successful login.
 *
 * @dependencies
 * - $app/navigation: For programmatic navigation (goto).
 * - $lib/utils/supabaseClient: The Supabase client instance.
 * - $lib/components/ui/Input.svelte: Reusable input component.
 * - $lib/components/ui/Button.svelte: Reusable button component.
 * - $lib/components/ui/Alert.svelte: Reusable alert component.
 * - $lib/stores/session: For checking auth state (optional here, primarily for layout).
 *
 * @notes
 * - Uses Svelte 5 runes ($state) for managing component state.
 * - Implements client-side authentication logic.
 */
-->
<script lang="ts">
	import { goto } from '$app/navigation';
	import { supabase } from '$lib/utils/supabaseClient'; // Assuming this path from existing code
	import Input from '$lib/components/ui/Input.svelte';
	import Button from '$lib/components/ui/Button.svelte';
	import Alert from '$lib/components/ui/Alert.svelte';

	let email = $state('');
	let password = $state('');
	let loading = $state(false);
	let errorMessage = $state<string | null>(null);

	/**
	 * Handles the login form submission.
	 * Attempts to sign in the user with Supabase Auth.
	 * Manages loading states and displays errors if any.
	 * Redirects to '/dashboard' on successful login.
	 */
	async function handleLogin() {
		loading = true;
		errorMessage = null;

		try {
			const { error } = await supabase.auth.signInWithPassword({
				email: email,
				password: password
			});

			if (error) {
				console.error('Login error:', error);
				errorMessage = error.message;
			} else {
				// Supabase onAuthStateChange listener in session.ts will handle sessionStore update.
				// Redirect to dashboard.
				console.log('Login successful, redirecting to /dashboard...');
				goto('/dashboard');
			}
		} catch (err) {
			console.error('Unexpected error during login:', err);
			errorMessage = 'An unexpected error occurred. Please try again.';
		} finally {
			loading = false;
		}
	}
</script>

<h1 class="mb-6 text-center text-2xl font-semibold text-white">Log In</h1>

{#if errorMessage}
	<Alert type="error" message={errorMessage} class="mb-4" />
{/if}

<form on:submit|preventDefault={handleLogin} class="space-y-5">
	<Input
		type="email"
		id="email"
		bind:value={email}
		placeholder="you@example.com"
		required
		disabled={loading}
	/>

	<Input
		type="password"
		id="password"
		bind:value={password}
		placeholder="••••••••"
		required
		disabled={loading}
	/>

	<div>
		<a href="/auth/reset-password" class="text-sm text-blue-400 hover:underline">Forgot password?</a
		>
	</div>

	<!-- Login page -->
	<Button type="submit" disabled={loading} {loading} class="w-full" variant="primary" size="lg">
		Sign In
	</Button>
</form>



================================================================================
File: routes/auth/reset-password/+page.svelte
================================================================================

<!-- src/routes/reset-password/+page.svelte -->
<script>
	import { supabase } from '$lib/utils/supabaseClient'; // Assuming this path from existing code
	import { goto } from '$app/navigation';

	let email = '';
	let loading = false;
	let message = '';
	let error = '';

	async function handleResetRequest() {
		if (!email) {
			error = 'Please enter your email address';
			return;
		}

		loading = true;
		error = '';
		message = '';

		try {
			const { error: resetError } = await supabase.auth.resetPasswordForEmail(email, {
				redirectTo: `${window.location.origin}/update-password`
			});

			if (resetError) {
				error = resetError.message;
			} else {
				message = 'Check your email for a password reset link!';
				email = ''; // Clear the form
			}
		} catch (err) {
			error = 'An unexpected error occurred. Please try again.';
			console.error('Reset password error:', err);
		} finally {
			loading = false;
		}
	}

	function handleSubmit(event) {
		event.preventDefault();
		handleResetRequest();
	}
</script>

<svelte:head>
	<title>Reset Password</title>
</svelte:head>

<div class="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
	<div class="w-full max-w-md space-y-8">
		<div>
			<h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Reset your password</h2>
			<p class="mt-2 text-center text-sm text-gray-600">
				Enter your email address and we'll send you a link to reset your password.
			</p>
		</div>

		<form class="mt-8 space-y-6" on:submit={handleSubmit}>
			<div>
				<label for="email" class="sr-only">Email address</label>
				<input
					id="email"
					name="email"
					type="email"
					required
					bind:value={email}
					disabled={loading}
					class="relative block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
					placeholder="Email address"
				/>
			</div>

			{#if error}
				<div class="rounded-md bg-red-50 p-4">
					<div class="text-sm text-red-700">{error}</div>
				</div>
			{/if}

			{#if message}
				<div class="rounded-md bg-green-50 p-4">
					<div class="text-sm text-green-700">{message}</div>
				</div>
			{/if}

			<div>
				<button
					type="submit"
					disabled={loading}
					class="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
				>
					{#if loading}
						<svg
							class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
						>
							<circle
								class="opacity-25"
								cx="12"
								cy="12"
								r="10"
								stroke="currentColor"
								stroke-width="4"
							></circle>
							<path
								class="opacity-75"
								fill="currentColor"
								d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
							></path>
						</svg>
						Sending...
					{:else}
						Send reset link
					{/if}
				</button>
			</div>

			<div class="text-center">
				<a href="/login" class="font-medium text-indigo-600 hover:text-indigo-500">
					Back to sign in
				</a>
			</div>
		</form>
	</div>
</div>

<style>
	/* Add any custom styles here if needed */
</style>



================================================================================
File: routes/auth/signup/+page.server.ts
================================================================================

/**
 * @file Signup Page Server Load & Actions (signup/+page.server.ts)
 * @description Handles server-side logic for the signup page:
 * - Redirects authenticated users.
 * - Initializes the signup form using Superforms.
 * - Handles form submission for user registration via Supabase Auth.
 * - Provides comprehensive error handling for Supabase authentication errors.
 *
 * @dependencies
 * - @sveltejs/kit: Provides `Actions`, `fail`, `redirect` types and functions.
 * - App.Locals: Access to `supabase` client and `getSession` initialized in hooks.
 * - sveltekit-superforms: Provides `superValidate`, `message`, `setError`.
 * - sveltekit-superforms/adapters: Provides `zod` adapter.
 * - ./schema: Contains the Zod schema for signup form validation.
 */

import { fail, redirect } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';
import { message, superValidate, setError } from 'sveltekit-superforms';
import { zod } from 'sveltekit-superforms/adapters';
import { formSchema } from './schema';

export const load: PageServerLoad = async ({ locals: { getSession }, url }) => {
    const session = await getSession();
    // If user is already logged in, redirect them
    if (session) {
        console.log('[Signup Page Load] User already logged in, redirecting to dashboard.');
        // Use 'next' param if present, otherwise default to dashboard
        const redirectTo = url.searchParams.get('next') ?? '/dashboard';
        throw redirect(303, redirectTo);
    }

    // Initialize the signup form on page load
    return { form: await superValidate(zod(formSchema)) };
};

// Error patterns that indicate duplicate email
const duplicateEmailPatterns = [
    'already registered',
    'already exists',
    'A user with this email address has already been registered',
    'User already registered',
    'This email is already in use',
    'duplicate key value violates unique constraint',
    'unique constraint',
    'unique violation',
    'email address is already in use',
    'Email already in use'
];

// Helper function to check if an error message indicates a duplicate email
const isDuplicateEmailError = (message) => {
    if (!message) return false;
    return duplicateEmailPatterns.some(pattern =>
        message.toLowerCase().includes(pattern.toLowerCase()));
};

export const actions: Actions = {
    /**
     * Default action for handling email/password signup form submission.
     */
    default: async ({ request, locals: { supabase }, url }) => {
        console.log('[Signup Action] Received POST request.');

        try {
            // Validate the form data against the Zod schema
            const form = await superValidate(request, zod(formSchema));
            console.log('[Signup Action] Form validation result:', form);

            // Basic server-side check if validation failed (client-side should catch most)
            if (!form.valid) {
                console.log('[Signup Action] Form invalid.');
                // Return validation errors
                return fail(400, { form });
            }

            // Extract form data
            const { email, password, fullName } = form.data;

            console.log(`[Signup Action] Attempting signup for: ${email}`);
            const { data: signupData, error: signupError } = await supabase.auth.signUp({
                email,
                password,
                options: {
                    // Store optional data like full name in user_metadata
                    data: {
                        full_name: fullName || '' // Use provided name or empty string
                    },
                    // Use current URL as base for redirect
                    emailRedirectTo: `${url.origin}/auth/callback`
                }
            });



            // Handle Supabase Signup Errors
            if (signupError) {
                console.error('[Signup Action] Supabase signup error:', signupError);

                // Check specifically for duplicate email errors
                if (isDuplicateEmailError(signupError.message)) {
                    console.log('[Signup Action] Detected duplicate email error');
                    return setError(form, 'email', 'An account with this email already exists. Try logging in.');
                }

                // Handle password errors
                if (signupError.message.toLowerCase().includes('password')) {
                    return setError(form, 'password', signupError.message);
                }

                // Generic error for other cases
                return message(form, `Registration error: ${signupError.message}`, {
                    status: signupError.status || 500
                });
            }

            // --- Handle Signup Success ---
            // Check if email confirmation is required
            if (signupData.user && !signupData.session) {
                console.log('[Signup Action] Signup successful, email confirmation required.');
                return message(form, 'Signup successful! Please check your email to confirm your account.', { status: 200 });
            }

            // Handle case where signup might auto-verify
            if (signupData.session) {
                console.log('[Signup Action] Signup successful and session created. Redirecting...');
                throw redirect(303, '/dashboard');
            }

            // Fallback success message
            console.log('[Signup Action] Signup process completed.');
            return message(form, 'Signup process completed. Please check your email.', { status: 200 });

        } catch (error) {
            // Catch any unexpected errors not returned by Supabase API
            console.error('[Signup Action] Unexpected error:', error);

            // Create a new form to attach the error
            const form = await superValidate(zod(formSchema));

            // Check if it's a known error type or just show generic message
            const errorMessage = error instanceof Error
                ? error.message
                : 'An unexpected error occurred';

            return message(form, `An unexpected error occurred. Please try again later. (${errorMessage})`, { status: 500 });
        }
    }
};


================================================================================
File: routes/auth/signup/+page.svelte
================================================================================

<!--
/**
 * @file Signup Page Component (signup/+page.svelte)
 * @description Provides the user interface for signing up using email/password
 * or Google OAuth. Uses SvelteKit Superforms for form handling and validation,
 * styled with DaisyUI classes.
 *
 * @dependencies
 * - $lib/components/auth/GoogleSignInButton.svelte: Google sign-in button.
 * - ./schema: Zod schema definition for the signup form.
 * - sveltekit-superforms: `superForm` hook.
 * - sveltekit-superforms/adapters: `zodClient` adapter.
 * - ./$types: Page data types.
 */
-->

<script lang="ts">
	import { formSchema } from './schema';
	// REMOVED: import { enhance } from '$app/forms'; // Not needed when using superForm's enhance
	import { type SuperValidated, type Infer, superForm, message } from 'sveltekit-superforms';
	import { zodClient } from 'sveltekit-superforms/adapters';
	import type { PageData } from './$types';
	import { AlertCircle, CheckCircle } from 'lucide-svelte'; // Icons for messages

	// Props: `data` contains the validated form object from the load function
	let { data }: { data: PageData } = $props();

	// Initialize Superform for the signup form
	const form = superForm(data.form, {
		validators: zodClient(formSchema),
		taintedMessage: null, // Disable tainted message for signup form
		// Optionally reset form on success message
		onUpdated: ({ form: f }) => {
			if (f.message && f.valid) {
				// Consider resetting only if it's a success message (e.g., "Check email")
				if (f.message.toLowerCase().includes('success')) {
					// Check the message string directly
					form.reset(); // Reset form fields after successful signup message
				}
			}
		}
	});

	/// Destructure form state and helpers - THIS enhance is from superForm
	const { form: formData, errors, submitting, enhance, message: messageStore } = form;

	// Fix: In Svelte 5, we access the store value directly with $
	// messageStore is the Writable<string> store from superForm
	$effect(() => {
		// This effect will re-run whenever $messageStore changes
		console.log('Message updated:', $messageStore);
	});

	// Derived value to check if the message is a success message
	let isSuccessMessage = $derived(
		typeof $messageStore === 'string' && $messageStore?.toLowerCase().includes('success')
	);
</script>

<div class="hero bg-ui-bg min-h-screen">
	<div class="w-full max-w-sm shadow-2xl">
		<div class="text-center">
			<h1 class="text-2xl font-bold">SIGN UP!</h1>
			<p class="py-4">Crea il tuo account</p>
		</div>
		<div class="card bg-ui-bg-2 w-full max-w-sm shrink-0 shadow-2xl">
			<!-- Use the enhance function from superForm -->
			<form class="card-body" method="POST" use:enhance novalidate>
				<h2 class="card-title mb-4 justify-center text-2xl">Crea Account</h2>

				<!-- General Form Message (Success or Error) -->
				{#if $messageStore}
					<div
						role="alert"
						class="alert mb-4 p-2 text-sm"
						class:alert-success={isSuccessMessage}
						class:alert-error={!isSuccessMessage}
					>
						{#if isSuccessMessage}
							<CheckCircle class="h-6 w-6 shrink-0 stroke-current" />
						{:else}
							<AlertCircle class="h-6 w-6 shrink-0 stroke-current" />
						{/if}
						<!-- Safely render message text -->
						<span>{$messageStore}</span>
					</div>
				{/if}

				<!-- Full Name Input (Optional) -->
				<div class="form-control text-gray-300">
					<label class="label" for="full-name">
						<span class="label-text">Full Name (Optional)</span>
					</label>
					<input
						type="text"
						id="full-name"
						name="fullName"
						placeholder="Your Name"
						autocomplete="name"
						class="input input-bordered text-gray-300"
						class:input-error={$errors.fullName}
						aria-invalid={$errors.fullName ? 'true' : undefined}
						aria-describedby={$errors.fullName ? 'fullName-error' : undefined}
						bind:value={$formData.fullName}
						disabled={$submitting}
					/>
					{#if $errors.fullName}
						<div class="label" id="fullName-error">
							<span class="label-text-alt text-error">{$errors.fullName}</span>
						</div>
					{/if}
				</div>

				<!-- Email Input -->
				<div class="form-control">
					<label class="label" for="email-address">
						<span class="label-text">Email</span>
					</label>
					<input
						type="email"
						id="email-address"
						name="email"
						placeholder="you@example.com"
						autocomplete="email"
						required
						class="input input-bordered"
						class:input-error={$errors.email}
						aria-invalid={$errors.email ? 'true' : undefined}
						aria-describedby={$errors.email ? 'email-error' : undefined}
						bind:value={$formData.email}
						disabled={$submitting}
					/>
					{#if $errors.email}
						<div class="label" id="email-error">
							<span class="label-text-alt text-error">{$errors.email}</span>
						</div>
					{/if}
				</div>

				<!-- Password Input -->
				<div class="form-control">
					<label class="label" for="password">
						<span class="label-text">Password</span>
					</label>
					<input
						type="password"
						id="password"
						name="password"
						placeholder="•••••••• (min. 8 characters)"
						required
						class="input input-bordered"
						class:input-error={$errors.password}
						aria-invalid={$errors.password ? 'true' : undefined}
						aria-describedby={$errors.password ? 'password-error' : undefined}
						bind:value={$formData.password}
						disabled={$submitting}
					/>
					{#if $errors.password}
						<div class="label" id="password-error">
							<span class="label-text-alt text-error">{$errors.password}</span>
						</div>
					{/if}
				</div>

				<!-- Confirm Password Input -->
				<div class="form-control">
					<label class="label" for="confirmPassword">
						<span class="label-text">Confirm Password</span>
					</label>
					<input
						type="password"
						id="confirmPassword"
						name="confirmPassword"
						placeholder="••••••••"
						required
						class="input input-bordered"
						class:input-error={$errors.confirmPassword}
						aria-invalid={$errors.confirmPassword ? 'true' : undefined}
						aria-describedby={$errors.confirmPassword ? 'confirmPassword-error' : undefined}
						bind:value={$formData.confirmPassword}
						disabled={$submitting}
					/>
					{#if $errors.confirmPassword}
						<div class="label" id="confirmPassword-error">
							<span class="label-text-alt text-error">{$errors.confirmPassword}</span>
						</div>
					{/if}
				</div>

				<!-- Submit Button -->
				<div class=" form-control mt-6">
					<button type="submit" class="btn btn-primary" disabled={$submitting}>
						{#if $submitting}
							<span class="loading loading-spinner"></span>
							Creating Account...
						{:else}
							Registrati
						{/if}
					</button>
				</div>
				<!-- Placeholder for Social Logins -->
				<div class="relative my-4">
					<div class="absolute inset-0 flex items-center" aria-hidden="true">
						<div class="w-full border-t border-neutral-300"></div>
					</div>
					<div class="relative flex justify-center text-sm">
						<span class="bg-neutral-50 px-2 text-neutral-500">Or continue with</span>
					</div>
				</div>

				<div>
					<!-- <GoogleSignInButton /> -->
					<div class="text-center text-sm text-neutral-500">
						<!-- Google -->
						<button class="btn border-[#e5e5e5] bg-white text-black">
							<svg
								aria-label="Google logo"
								width="16"
								height="16"
								xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 512 512"
								><g
									><path d="m0 0H512V512H0" fill="#fff"></path><path
										fill="#34a853"
										d="M153 292c30 82 118 95 171 60h62v48A192 192 0 0190 341"
									></path><path
										fill="#4285f4"
										d="m386 400a140 175 0 0053-179H260v74h102q-7 37-38 57"
									></path><path fill="#fbbc02" d="m90 341a208 200 0 010-171l63 49q-12 37 0 73"
									></path><path
										fill="#ea4335"
										d="m153 219c22-69 116-109 179-50l55-54c-78-75-230-72-297 55"
									></path></g
								></svg
							>
							Signup with Google (PLACEHOLDER)
						</button>
					</div>
				</div>
			</form>
		</div>
	</div>
</div>



================================================================================
File: routes/auth/signup/schema.ts
================================================================================

/**
 * @file signup/schema.ts
 * @description Zod schema definition for the user signup form.
 * Includes validation rules for email, password, confirmPassword, and optionally full name.
 */
import { z } from 'zod';

export const formSchema = z
    .object({
        // Optional full name field
        fullName: z
            .string()
            .trim()
            .min(2, 'Full name must be at least 2 characters')
            .optional(), // Make it optional for signup
        email: z.string().email('Please enter a valid email address'),
        password: z
            .string()
            .min(8, 'Password must be at least 8 characters long')
            // Optional: Add complexity requirements if desired (e.g., regex)
            .max(100, 'Password must be no more than 100 characters'),
        confirmPassword: z.string() // Confirmation field
    })
    // Refine step to check if passwords match
    .refine((data) => data.password === data.confirmPassword, {
        message: "Passwords don't match",
        path: ['confirmPassword'] // Set the error path to the confirmation field
    });

// Infer the TypeScript type from the schema
export type FormSchema = z.infer<typeof formSchema>;



================================================================================
File: routes/auth/update-password/+page.svelte
================================================================================

<!-- src/routes/update-password/+page.svelte -->
<script>
	import { onMount } from 'svelte';
	import { supabase } from '$lib/utils/supabaseClient';
	import { goto } from '$app/navigation';
	import { page } from '$app/state';

	let password = '';
	let confirmPassword = '';
	let loading = false;
	let error = '';
	let isValidSession = false;

	onMount(async () => {
		// Check URL parameters first (from email link)
		const urlParams = new URLSearchParams(window.location.search);
		const accessToken = urlParams.get('access_token');
		const refreshToken = urlParams.get('refresh_token');
		const type = urlParams.get('type');

		console.log('URL params:', {
			accessToken: !!accessToken,
			refreshToken: !!refreshToken,
			type
		});

		if (accessToken && refreshToken && type === 'recovery') {
			try {
				const { data, error: setSessionError } = await supabase.auth.setSession({
					access_token: accessToken,
					refresh_token: refreshToken
				});

				console.log('Set session result:', {
					data: !!data.session,
					error: setSessionError
				});

				if (setSessionError) {
					console.error('Set session error:', setSessionError);
					error = 'Invalid or expired reset link. Please request a new password reset.';
				} else if (data.session) {
					isValidSession = true;
					// Clear the URL parameters for security
					window.history.replaceState({}, document.title, window.location.pathname);
				} else {
					error = 'Unable to establish session. Please request a new password reset.';
				}
			} catch (err) {
				console.error('Session setup error:', err);
				error = 'An error occurred processing the reset link. Please request a new password reset.';
			}
		} else {
			// Check if we already have a valid session
			const {
				data: { session },
				error: sessionError
			} = await supabase.auth.getSession();

			if (session && session.user) {
				console.log('Existing session found');
				isValidSession = true;
			} else {
				console.log('No valid session or tokens found');
				error = 'Invalid or expired reset link. Please request a new password reset.';
			}
		}
	});

	async function handlePasswordUpdate() {
		if (!password || !confirmPassword) {
			error = 'Please fill in all fields';
			return;
		}

		if (password.length < 6) {
			error = 'Password must be at least 6 characters long';
			return;
		}

		if (password !== confirmPassword) {
			error = 'Passwords do not match';
			return;
		}

		loading = true;
		error = '';

		try {
			const { error: updateError } = await supabase.auth.updateUser({
				password: password
			});

			if (updateError) {
				error = updateError.message;
			} else {
				// Success! Redirect to login or dashboard
				await goto('/login?message=Password updated successfully');
			}
		} catch (err) {
			error = 'An unexpected error occurred. Please try again.';
			console.error('Update password error:', err);
		} finally {
			loading = false;
		}
	}

	function handleSubmit(event) {
		event.preventDefault();
		handlePasswordUpdate();
	}
</script>

<svelte:head>
	<title>Update Password</title>
</svelte:head>

<div class="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
	<div class="w-full max-w-md space-y-8">
		<div>
			<h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Update your password</h2>
			<p class="mt-2 text-center text-sm text-gray-600">Enter your new password below.</p>
		</div>

		{#if !isValidSession && !error}
			<div class="flex justify-center">
				<svg
					class="h-8 w-8 animate-spin text-indigo-600"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
				>
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"
					></circle>
					<path
						class="opacity-75"
						fill="currentColor"
						d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
					></path>
				</svg>
			</div>
		{:else if error && !isValidSession}
			<div class="rounded-md bg-red-50 p-4">
				<div class="text-sm text-red-700">{error}</div>
				<div class="mt-3">
					<a href="/reset-password" class="font-medium text-red-600 hover:text-red-500">
						Request a new password reset
					</a>
				</div>
			</div>
		{:else if isValidSession}
			<form class="mt-8 space-y-6" on:submit={handleSubmit}>
				<div class="space-y-4">
					<div>
						<label for="password" class="block text-sm font-medium text-gray-700">
							New Password
						</label>
						<input
							id="password"
							name="password"
							type="password"
							required
							bind:value={password}
							disabled={loading}
							class="relative mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
							placeholder="Enter new password"
						/>
					</div>

					<div>
						<label for="confirm-password" class="block text-sm font-medium text-gray-700">
							Confirm New Password
						</label>
						<input
							id="confirm-password"
							name="confirm-password"
							type="password"
							required
							bind:value={confirmPassword}
							disabled={loading}
							class="relative mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
							placeholder="Confirm new password"
						/>
					</div>
				</div>

				{#if error}
					<div class="rounded-md bg-red-50 p-4">
						<div class="text-sm text-red-700">{error}</div>
					</div>
				{/if}

				<div>
					<button
						type="submit"
						disabled={loading}
						class="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
					>
						{#if loading}
							<svg
								class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
							>
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								></circle>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								></path>
							</svg>
							Updating...
						{:else}
							Update password
						{/if}
					</button>
				</div>
			</form>
		{/if}
	</div>
</div>



================================================================================
File: types.ts
================================================================================

export type SupabaseJwt = {
    aal: string;
    aud: string;
    email: string;
    exp: number;
    iat: number;
    phone: string;
    role: string;
    session_id: string;
    sub: string;
    amr?: { method: string; timestamp: number; }[];
    app_metadata?: {
        provider?: string;
        providers?: string[];
        [key: string]: any;
    };
    is_anonymous?: boolean;
    iss?: string;
    jti?: string;
    nbf?: string;
    user_metadata?: {
        [key: string]: any;
    };
}


Summary:
Files Processed: 114
Lines Written: 10119
Errors Encountered: 0
