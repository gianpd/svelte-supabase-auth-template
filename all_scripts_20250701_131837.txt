Collected scripts from /home/jaco/develops/projects/ZUNGRI/frontend
Generated on 2025-07-01 13:18:37.138123


================================================================================
File: src/app.d.ts
================================================================================

/**
 * @file App Type Definitions (app.d.ts)
 * @description Contains global type definitions for the SvelteKit application.
 *
 * @dependencies
 * - @supabase/supabase-js: Provides the `SupabaseClient` and `Session` types.
 * - $lib/types/supabase: Contains generated database types (assuming this path is correct).
 */

import type { SupabaseClient, Session } from '@supabase/supabase-js';
import type { Database } from '$lib/types/supabase'; // Adjust path if needed

declare global {
	namespace App {
		interface Error {
			message: string;
			details?: string;
			code?: string;
		}

		/**
		 * @interface Locals
		 * @description Defines `event.locals` properties added by `hooks.server.ts`.
		 */
		interface Locals {
			supabase: SupabaseClient<Database>;
			getSession(): Promise<Session | null>;
			session: Session | null;
			accessToken: string | null; // Keep this if backend API needs it
		}

		/**
		 * @interface PageData
		 * @description Defines the common shape of data returned from load functions.
		 * Root layouts will populate session and potentially supabase client.
		 */
		interface PageData {
			session: Session | null;
			// Add supabase client if passed from universal load
			supabase?: SupabaseClient<Database>;
			flash?: { type: 'success' | 'error'; message: string };
		}

		// interface PageState {}
		// interface Platform {}
	}
}

export { };


================================================================================
File: src/hooks.server.ts
================================================================================

/**
 * @file Server Hooks (hooks.server.ts)
 * @description This file uses a sequence of handles to process requests.
 * 1. `i18nHandle`: Manages internationalization (i18n) using Paraglide,
 *    detecting the locale and setting the language context.
 * 2. `authHandle`: Initializes the Supabase client, validates the user's session
 *    using JWT, performs route guarding, and makes the validated session
 *    available in `event.locals`.
 *
 * @dependencies
 * - $env/static/public: Supabase URL and Anon Key.
 * - $env/static/private: Supabase JWT Secret.
 * - @supabase/ssr: `createServerClient`.
 * - @sveltejs/kit/hooks: `sequence` for chaining handles.
 * - @sveltejs/kit: `redirect`, `Handle`.
 * - jose: `jwtVerify`.
 * - @supabase/supabase-js: `Session`.
 * - $lib/paraglide: Generated Paraglide i18n handle.
 */

import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';
import { JWT_SECRET } from '$env/static/private';
import { createServerClient } from '@supabase/ssr';
import { redirect, type Handle } from '@sveltejs/kit';
import { sequence } from '@sveltejs/kit/hooks';
import * as jose from 'jose';
import type { Session } from '@supabase/supabase-js';
import { paraglideMiddleware } from '$lib/paraglide/server';


// Define the accurate Supabase JWT payload structure
export type SupabaseJwt = {
    aal: string;
    aud: string;
    email: string;
    exp: number;
    iat: number;
    phone: string;
    role: string;
    session_id: string;
    sub: string;
    amr?: { method: string; timestamp: number }[];
    app_metadata?: { provider?: string; providers?: string[];[key: string]: any };
    is_anonymous?: boolean;
    iss?: string;
    jti?: string;
    nbf?: string;
    user_metadata?: { [key: string]: any };
} & jose.JWTPayload;

// creating a handle to use the paraglide middleware
const paraglideHandle: Handle = ({ event, resolve }) =>
    paraglideMiddleware(event.request, ({ request: localizedRequest, locale }) => {
        event.request = localizedRequest;
        return resolve(event, {
            transformPageChunk: ({ html }) => {
                return html.replace('%lang%', locale);
            }
        });
    });



/**
 * @name authHandle
 * @description The second handle in the sequence. It manages authentication,
 * session validation, and route protection.
 */
const authHandle: Handle = async ({ event, resolve }) => {
    console.log(`\n--- [Auth Handle] Handling request for: ${event.url.pathname} ---`); // DEBUG

    // Use explicit getAll/setAll cookie handlers for Supabase SSR client
    event.locals.supabase = createServerClient(
        PUBLIC_SUPABASE_URL,
        PUBLIC_SUPABASE_ANON_KEY,
        {
            cookies: {
                getAll: () => {
                    const cookies = event.cookies.getAll();
                    console.log(`[DEBUG Auth Handle - getAll] Found ${cookies.length} cookies.`); // DEBUG
                    return cookies;
                },
                setAll: (cookies) => {
                    console.log(
                        `[DEBUG Auth Handle - setAll] Setting ${cookies.length} cookies:`,
                        JSON.stringify(cookies.map((c) => c.name))
                    ); // DEBUG
                    cookies.forEach(({ name, value, options }) => {
                        event.cookies.set(name, value, { ...options, path: '/' });
                    });
                }
            }
        }
    );

    /**
     * @name getSession
     * @description A method on `event.locals` to securely get the session data.
     * It retrieves the session from Supabase and then validates the JWT signature
     * against the private secret. Returns a valid session object or null.
     */
    event.locals.getSession = async (): Promise<Session | null> => {
        console.log('[DEBUG getSession in Auth Handle] Running...'); // DEBUG
        const {
            data: { session: rawSession },
            error: getSessionError
        } = await event.locals.supabase.auth.getSession();

        if (getSessionError) {
            console.error(
                '[ERROR getSession in Auth Handle] supabase.auth.getSession() error:',
                getSessionError.message
            );
        }

        if (!rawSession) {
            console.log('[DEBUG getSession in Auth Handle] Raw session NOT FOUND by supabase.auth.getSession().');
            event.locals.user = null;
            event.locals.accessToken = null;
            return null;
        }
        console.log(
            '[DEBUG getSession in Auth Handle] Raw session FOUND. User ID:',
            rawSession.user?.id
        ); // DEBUG

        try {
            console.log('[DEBUG getSession in Auth Handle] Attempting JWT validation...'); // DEBUG
            const secret = new TextEncoder().encode(JWT_SECRET);
            const { payload: decoded }: { payload: SupabaseJwt } = await jose.jwtVerify(
                rawSession.access_token,
                secret
            );
            console.log('[DEBUG getSession in Auth Handle] JWT validation SUCCESSFUL.'); // DEBUG

            const validated_session: Session = {
                access_token: rawSession.access_token,
                refresh_token: rawSession.refresh_token,
                expires_at: decoded.exp,
                expires_in: decoded.exp ? decoded.exp - Math.round(Date.now() / 1000) : 0,
                token_type: 'bearer',
                user: {
                    id: decoded.sub,
                    aud: decoded.aud,
                    role: decoded.role ?? 'authenticated',
                    email: decoded.email,
                    phone: decoded.phone,
                    created_at: rawSession.user?.created_at ?? '',
                    app_metadata: decoded.app_metadata ?? {},
                    user_metadata: decoded.user_metadata ?? {},
                    is_anonymous: decoded.is_anonymous ?? false
                }
            };
            event.locals.user = validated_session.user;
            event.locals.accessToken = validated_session.access_token;
            return validated_session;
        } catch (err: any) {
            console.error('[ERROR getSession in Auth Handle] JWT validation FAILED:', err.message); // DEBUG
            event.locals.user = null;
            event.locals.accessToken = null;
            return null;
        }
    };

    // Call getSession ONCE per request and store the result in locals.session
    event.locals.session = await event.locals.getSession();
    console.log(
        '[DEBUG Auth Handle] Stored session in locals:',
        event.locals.session ? `User: ${event.locals.session.user.id}` : 'null'
    ); // DEBUG

    // --- Route Guarding ---
    // Use the session stored directly in locals for guarding
    const sessionForGuard = event.locals.session;

    if (sessionForGuard) {
        console.log(`[DEBUG Auth Handle Guard] Using session FOUND in locals. User: ${sessionForGuard.user.id}`);
    } else {
        console.log(`[DEBUG Auth Handle Guard] Using session NOT FOUND in locals.`);
    }

    // Protect admin routes
    if (event.url.pathname.startsWith('/admin')) {
        if (!sessionForGuard) {
            console.warn(`[GUARD] Access denied to ${event.url.pathname}. No session. Redirecting to /login.`);
            redirect(303, '/login');
        }
        // You can add role-based checks here if needed
        // if (sessionForGuard.user.role !== 'Administrator') {
        //   redirect(303, '/');
        // }
    }

    // Redirect logged-in users from public auth pages
    if (event.url.pathname === '/login' || event.url.pathname === '/signup') {
        if (sessionForGuard) {
            console.log(`[GUARD] User already logged in. Redirecting from ${event.url.pathname} to /admin.`);
            redirect(303, '/admin');
        }
    }

    console.log(`[DEBUG Auth Handle] Resolving request for ${event.url.pathname}`); // DEBUG

    // Resolve the request, allowing it to proceed to the route handler.
    // SvelteKit automatically passes `event.locals.session` and `event.locals.user`
    // to the root layout data via the `+layout.server.ts` load function.
    return resolve(event, {
        filterSerializedResponseHeaders: (name) => name.toLowerCase() === 'content-type',
        /*filterSerializedResponseHeaders(name) {
            return name === 'content-range' || name === 'x-supabase-api-version';
        }
            */
    });
};

// Export the sequence of handles. They will run in the order they are provided.
export const handle = sequence(paraglideHandle, authHandle);


================================================================================
File: src/hooks.ts
================================================================================

import type { Reroute } from '@sveltejs/kit';
import { deLocalizeUrl } from '$lib/paraglide/runtime';

export const reroute: Reroute = (request) => {
	return deLocalizeUrl(request.url).pathname;
};


================================================================================
File: src/lib/api/apiClient.ts
================================================================================

/**
* @file apiClient.ts
* @purpose Centralized API client for communicating with FastAPI backend
*
* @dependencies
* - SvelteKit's fetch: Server-side fetch during load functions
* - TypeScript: Strong typing for API responses and requests
*
* @notes
* - Handles authentication for admin endpoints
* - Provides error handling and response validation
* - Supports both server-side and client-side requests
* - Error handling: Throws typed errors for proper catch handling
* - Updated to include payment-related endpoints.
*/


import type { OrderCreatePayload } from "$lib/schemas/payment";

// Types based on backend schema structure
export interface Language {
    code: string;
    name: string;
    is_default: boolean;
}

export interface PageContent {
    id: string;
    slug: string;
    language_code: string;
    title: string;
    content: string;
    created_at: string;
    updated_at: string;
}

export interface PageContentCreate {
    slug: string;
    language_code: string;
    title: string;
    content: string;
}

export interface PageContentUpdate {
    title?: string;
    content?: string;
}

export interface ContactForm {
    name: string;
    email: string;
    subject: string;
    message: string;
}

export interface User {
    id: string;
    email: string;
    name?: string;
    role: 'Administrator' | 'Staff';
    profile_image_path?: string;
    created_at: string;
    updated_at: string;
}

export interface TicketType {
    id: string;
    name_translations: Record<string, string>;
    description_translations?: Record<string, string>;
    price: number;
    group_size?: number;
    created_at: string;
    updated_at: string;
}

export interface TimeSlot {
    id: string;
    ticket_type_id: string;
    start_time: string;
    end_time: string;
    capacity: number;
    available_slots: number;
    created_at: string;
    updated_at: string;
}

export interface Merchandise {
    id: string;
    name_translations: Record<string, string>;
    description_translations?: Record<string, string>;
    price: number;
    inventory: number;
    created_at: string;
    updated_at: string;
}

export interface Booking {
    id: string;
    user_id?: string;
    customer_name?: string;
    customer_email?: string;
    booking_date: string;
    time_slot_id: string;
    ticket_type_id: string;
    quantity: number;
    total_price: number;
    status: 'PENDING' | 'CONFIRMED' | 'CANCELLED' | 'COMPLETED';
    order_id?: string;
    source: 'ONLINE' | 'ONSITE';
    created_at: string;
    updated_at: string;
}

export interface Order {
    id: string;
    user_id?: string;
    customer_name?: string;
    customer_email?: string;
    order_date: string;
    total_amount: number;
    payment_status: 'PENDING' | 'PAID' | 'FAILED' | 'REFUNDED';
    payment_intent_id?: string;
    source: 'ONLINE' | 'ONSITE';
    created_at: string;
    updated_at: string;
}

// Error types for better error handling
export class ApiError extends Error {
    constructor(
        public status: number,
        public detail: string,
        public endpoint: string
    ) {
        super(`API Error ${status}: ${detail}`);
        this.name = 'ApiError';
    }
}

export class NetworkError extends Error {
    constructor(public endpoint: string, public originalError: Error) {
        super(`Network error calling ${endpoint}: ${originalError.message}`);
        this.name = 'NetworkError';
    }
}

// API Client configuration
interface ApiClientConfig {
    baseUrl?: string;
    timeout?: number;
    defaultHeaders?: Record<string, string>;
    debug?: boolean;
}

// Main API Client class
export class ApiClient {
    private baseUrl: string;
    private timeout: number;
    private defaultHeaders: Record<string, string>;
    private debug: boolean;

    constructor(config: ApiClientConfig = {}) {
        // Use relative URLs for SvelteKit proxy - this is crucial
        this.baseUrl = config.baseUrl || '/api/v1';
        this.timeout = config.timeout || 30000;
        this.debug = config.debug || false;
        this.defaultHeaders = {
            'Content-Type': 'application/json',
            ...config.defaultHeaders
        };
    }

    /**
     * Internal fetch wrapper with error handling and timeout
     * @param endpoint API endpoint path
     * @param options Fetch options
     * @param customFetch Custom fetch function (for server-side)
     * @returns Promise with parsed response
     */
    private async request<T>(
        endpoint: string,
        options: RequestInit = {},
        customFetch: typeof fetch = fetch
    ): Promise<T> {
        const url = `${this.baseUrl}${endpoint}`;

        if (this.debug) {
            console.log(`🔄 API Request: ${options.method || 'GET'} ${url}`);
            if (options.body) {
                console.log('📤 Request body:', options.body);
            }
        }

        // Setup request with timeout
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), this.timeout);

        try {
            const response = await customFetch(url, {
                ...options,
                headers: {
                    ...this.defaultHeaders,
                    ...options.headers
                },
                signal: controller.signal
            });

            clearTimeout(timeoutId);

            if (this.debug) {
                console.log(`📥 API Response: ${response.status} ${response.statusText} for ${url}`);
            }

            // Handle different content types
            const contentType = response.headers.get('content-type');
            let data: any;

            if (contentType && contentType.includes('application/json')) {
                data = await response.json();
            } else {
                // For endpoints that return simple text or no body
                const text = await response.text();
                data = text ? { message: text } : { message: 'Success' };
            }

            if (!response.ok) {
                if (this.debug) {
                    console.error(`❌ API Error: ${response.status} for ${url}`, data);
                }

                throw new ApiError(
                    response.status,
                    data.detail || data.message || `HTTP ${response.status}: ${response.statusText}`,
                    endpoint
                );
            }

            if (this.debug) {
                console.log('✅ API Success:', data);
            }

            return data;
        } catch (error) {
            clearTimeout(timeoutId);

            if (error instanceof ApiError) {
                throw error;
            }

            if (error.name === 'AbortError') {
                throw new NetworkError(endpoint, new Error('Request timeout'));
            }

            // Handle network errors and other fetch failures
            if (error instanceof TypeError && error.message.includes('fetch')) {
                throw new NetworkError(endpoint, new Error('Network connection failed'));
            }

            throw new NetworkError(endpoint, error as Error);
        }
    }

    // Content API methods
    async getPageContent(
        slug: string,
        langCode: string,
        customFetch?: typeof fetch
    ): Promise<PageContent> {
        return this.request<PageContent>(
            `/content/${slug}/${langCode}`,
            { method: 'GET' },
            customFetch
        );
    }

    async submitContactForm(
        contactData: ContactForm,
        customFetch?: typeof fetch
    ): Promise<{ message: string }> {
        return this.request<{ message: string }>(
            '/content/contact',
            {
                method: 'POST',
                body: JSON.stringify(contactData)
            },
            customFetch
        );
    }

    // Admin Content API methods (require authentication)
    async createPageContent(
        contentData: PageContentCreate,
        authToken: string,
        customFetch?: typeof fetch
    ): Promise<PageContent> {
        return this.request<PageContent>(
            '/content/admin/content',
            {
                method: 'POST',
                headers: {
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify(contentData)
            },
            customFetch
        );
    }

    async updatePageContent(
        contentId: string,
        contentData: PageContentUpdate,
        authToken: string,
        customFetch?: typeof fetch
    ): Promise<PageContent> {
        return this.request<PageContent>(
            `/content/admin/content/${contentId}`,
            {
                method: 'PUT',
                headers: {
                    'Authorization': `Bearer ${authToken}`
                },
                body: JSON.stringify(contentData)
            },
            customFetch
        );
    }

    async getLanguages(
        authToken: string,
        customFetch?: typeof fetch
    ): Promise<Language[]> {
        return this.request<Language[]>(
            '/content/admin/languages',
            {
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${authToken}`
                }
            },
            customFetch
        );
    }

    // Ticket API methods
    async getTicketTypes(customFetch?: typeof fetch): Promise<TicketType[]> {
        return this.request<TicketType[]>(
            '/tickets/types',
            { method: 'GET' },
            customFetch
        );
    }

    async getTimeSlots(
        ticketTypeId: string,
        date: string,
        customFetch?: typeof fetch
    ): Promise<TimeSlot[]> {
        return this.request<TimeSlot[]>(
            `/tickets/time-slots/${ticketTypeId}?date=${date}`,
            { method: 'GET' },
            customFetch
        );
    }

    // Merchandise API methods
    async getMerchandise(customFetch?: typeof fetch): Promise<Merchandise[]> {
        return this.request<Merchandise[]>(
            '/merchandise',
            { method: 'GET' },
            customFetch
        );
    }

    async getMerchandiseItem(
        merchandiseId: string,
        customFetch?: typeof fetch
    ): Promise<Merchandise> {
        return this.request<Merchandise>(
            `/merchandise/${merchandiseId}`,
            { method: 'GET' },
            customFetch
        );
    }

    // Booking API methods
    async createBooking(
        bookingData: Partial<Booking>,
        customFetch?: typeof fetch
    ): Promise<Booking> {
        return this.request<Booking>(
            '/bookings',
            {
                method: 'POST',
                body: JSON.stringify(bookingData)
            },
            customFetch
        );
    }

    async getBooking(
        bookingId: string,
        customFetch?: typeof fetch
    ): Promise<Booking> {
        return this.request<Booking>(
            `/bookings/${bookingId}`,
            { method: 'GET' },
            customFetch
        );
    }

    // --- ADDED: Payment API methods ---
    async createPaymentIntent(
        payload: OrderCreatePayload,
        customFetch?: typeof fetch
    ): Promise<{ client_secret: string }> {
        return this.request<{ client_secret: string }>(
            '/payments/create-payment-intent',
            {
                method: 'POST',
                body: JSON.stringify(payload)
            },
            customFetch
        );
    }

    // Health check method for debugging
    async healthCheck(customFetch?: typeof fetch): Promise<{ status: string }> {
        return this.request<{ status: string }>(
            '/health',
            { method: 'GET' },
            customFetch
        );
    }
}

// Export default instances for different environments
export const apiClient = new ApiClient();

// Debug version for development
export const debugApiClient = new ApiClient({ debug: true });

// Utility functions for common patterns
export function createApiClient(config?: ApiClientConfig): ApiClient {
    return new ApiClient(config);
}

/**
 * Helper function to handle API errors in load functions
 * @param error Caught error from API call
 * @param fallbackMessage User-friendly fallback message
 * @returns Error object for SvelteKit error function
 */
export function handleApiError(
    error: unknown,
    fallbackMessage: string = 'An unexpected error occurred'
): { status: number; message: string; details: string } {
    if (error instanceof ApiError) {
        return {
            status: error.status,
            message: getPublicErrorMessage(error.status),
            details: error.detail
        };
    }

    if (error instanceof NetworkError) {
        return {
            status: 500,
            message: 'Connection Error',
            details: 'Unable to connect to the server. Please try again later.'
        };
    }

    console.error('Unexpected API error:', error);
    return {
        status: 500,
        message: fallbackMessage,
        details: 'An unexpected error occurred while processing your request.'
    };
}

/**
 * Convert HTTP status codes to user-friendly messages
 * @param status HTTP status code
 * @returns User-friendly error message
 */
function getPublicErrorMessage(status: number): string {
    switch (status) {
        case 400:
            return 'Invalid Request';
        case 401:
            return 'Authentication Required';
        case 403:
            return 'Access Denied';
        case 404:
            return 'Content Not Found';
        case 409:
            return 'Resource Already Exists';
        case 429:
            return 'Too Many Requests';
        case 500:
            return 'Server Error';
        case 502:
        case 503:
        case 504:
            return 'Service Unavailable';
        default:
            return 'An Error Occurred';
    }
}

/**
 * Utility to check if the API client is working correctly
 * Can be used in development to debug proxy issues
 */
export async function testApiConnection(customFetch?: typeof fetch): Promise<boolean> {
    try {
        await debugApiClient.healthCheck(customFetch);
        console.log('✅ API connection test successful');
        return true;
    } catch (error) {
        console.error('❌ API connection test failed:', error);
        return false;
    }
}


================================================================================
File: src/lib/components/Calendar.svelte
================================================================================

<script lang="ts">
	/**
	 * @file Calendar.svelte
	 * @purpose A responsive and interactive calendar component for date selection.
	 *
	 * @dependencies
	 * - svelte: For component logic, transitions, and creating event dispatchers.
	 * - lucide-svelte: For icons.
	 * - $lib/stores/bookingStore: For type definitions.
	 *
	 * @notes
	 * - Manages its own internal state for the currently displayed month and year.
	 * - Calls onSelect callback when a valid date is clicked.
	 * - Calls onMonthChange callback when the user navigates to the next/previous month.
	 * - Disables dates that are in the past or marked as 'unavailable' or 'loading' in the `availabilityMap`.
	 * - Uses callback props instead of event dispatchers for Svelte 5 compatibility.
	 */
	import { ChevronLeft, ChevronRight, Loader2 } from 'lucide-svelte';
	import type { DateAvailabilityStatus } from '$lib/stores/bookingStore';

	// --- PROPS ---
	interface Props {
		selectedDate?: Date | null;
		availabilityMap?: Map<string, DateAvailabilityStatus> | null;
		selectedTicketId?: string | null;
		class?: string;
		onSelect?: (date: Date) => void;
		onMonthChange?: (date: Date) => void;
	}

	let {
		selectedDate = null,
		availabilityMap = null,
		selectedTicketId = null,
		class: className = '',
		onSelect,
		onMonthChange
	}: Props = $props();

	// --- STATE ---
	let viewDate = $state(new Date());
	let days = $state<
		Array<{ date: Date; isCurrentMonth: boolean; isToday: boolean; isSelected: boolean }>
	>([]);
	const today = new Date();
	today.setHours(0, 0, 0, 0); // Normalize today's date

	// --- DERIVED STATE & HELPERS ---
	const monthName = $derived(
		viewDate.toLocaleString('default', { month: 'long', year: 'numeric' })
	);

	/**
	 * Generates the calendar grid for the given date
	 * @param date - The date to generate the calendar for
	 */
	function generateCalendar(date: Date) {
		const year = date.getFullYear();
		const month = date.getMonth();
		const firstDayOfMonth = new Date(year, month, 1);
		const lastDayOfMonth = new Date(year, month + 1, 0);
		const daysInMonth = lastDayOfMonth.getDate();
		const startDayOfWeek = firstDayOfMonth.getDay(); // 0 (Sun) - 6 (Sat)

		const newDays = [];
		// Get current selected date value
		const currentSelectedDate = selectedDate;

		// Previous month's days
		for (let i = 0; i < startDayOfWeek; i++) {
			const d = new Date(year, month, 1 - (startDayOfWeek - i));
			newDays.push({
				date: d,
				isCurrentMonth: false,
				isToday: false,
				isSelected: false
			});
		}

		// Current month's days
		for (let i = 1; i <= daysInMonth; i++) {
			const d = new Date(year, month, i);
			newDays.push({
				date: d,
				isCurrentMonth: true,
				isToday: d.getTime() === today.getTime(),
				isSelected: currentSelectedDate ? d.getTime() === currentSelectedDate.getTime() : false
			});
		}

		// Next month's days
		const gridCells = 42; // 6 weeks * 7 days
		const remainingCells = gridCells - newDays.length;
		for (let i = 1; i <= remainingCells; i++) {
			const d = new Date(year, month + 1, i);
			newDays.push({
				date: d,
				isCurrentMonth: false,
				isToday: false,
				isSelected: false
			});
		}
		days = newDays;
	}

	/**
	 * Navigate to the previous month
	 */
	function previousMonth() {
		const newDate = new Date(viewDate.setMonth(viewDate.getMonth() - 1));
		viewDate = newDate;
		onMonthChange?.(newDate);
	}

	/**
	 * Navigate to the next month
	 */
	function nextMonth() {
		const newDate = new Date(viewDate.setMonth(viewDate.getMonth() + 1));
		viewDate = newDate;
		onMonthChange?.(newDate);
	}

	/**
	 * Select a date if it's available
	 * @param date - The date to select
	 */
	function selectDate(date: Date) {
		const status = getAvailabilityStatus(date);
		if (date < today || status !== 'available') {
			return; // Do not select past or unavailable dates
		}
		selectedDate = date;
		onSelect?.(date);
	}

	/**
	 * Get the availability status for a given date
	 * @param date - The date to check
	 * @returns The availability status
	 */
	function getAvailabilityStatus(date: Date): DateAvailabilityStatus {
		if (date < today) return 'unavailable';
		if (!selectedTicketId) return 'unknown';
		const dateString = date.toISOString().split('T')[0];
		return availabilityMap?.get(dateString) || 'unknown';
	}

	// --- EFFECTS ---
	$effect(() => {
		// Re-generate the calendar grid whenever the view date or selected date changes.
		generateCalendar(viewDate);
	});

	$effect(() => {
		// Initialize with the current date, potentially based on an existing selection.
		const currentSelectedDate = selectedDate;
		viewDate = currentSelectedDate || new Date();
		generateCalendar(viewDate);
	});
</script>

<div class="rounded-lg border border-neutral-200 bg-white p-4 {className}">
	<!-- Calendar Header -->
	<div class="mb-4 flex items-center justify-between">
		<button
			type="button"
			class="rounded-full p-2 text-neutral-500 transition-colors hover:bg-neutral-100 hover:text-neutral-800"
			onclick={previousMonth}
			aria-label="Previous month"
		>
			<ChevronLeft class="h-5 w-5" />
		</button>
		<h3 class="w-40 text-center font-semibold text-neutral-800">{monthName}</h3>
		<button
			type="button"
			class="rounded-full p-2 text-neutral-500 transition-colors hover:bg-neutral-100 hover:text-neutral-800"
			onclick={nextMonth}
			aria-label="Next month"
		>
			<ChevronRight class="h-5 w-5" />
		</button>
	</div>

	<!-- Calendar Grid -->
	<div class="grid grid-cols-7 gap-1 text-center text-sm">
		<!-- Day Headers -->
		{#each ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'] as day}
			<div class="font-medium text-neutral-500">{day}</div>
		{/each}

		<!-- Dates -->
		{#each days as day (day.date.getTime())}
			{@const status = getAvailabilityStatus(day.date)}
			{@const isUnavailable =
				status === 'unavailable' || status === 'unknown' || !day.isCurrentMonth}
			{@const isLoading = status === 'loading'}

			<div class="relative">
				<button
					type="button"
					class="relative h-10 w-10 rounded-full transition-all duration-200"
					class:text-neutral-400={!day.isCurrentMonth}
					class:text-neutral-800={day.isCurrentMonth}
					class:font-bold={day.isToday || day.isSelected}
					class:bg-primary-600={day.isSelected}
					class:text-white={day.isSelected}
					class:hover:bg-primary-100={!isUnavailable && !day.isSelected}
					class:cursor-not-allowed={isUnavailable}
					class:opacity-50={isUnavailable && day.isCurrentMonth}
					onclick={() => selectDate(day.date)}
					disabled={isUnavailable || isLoading}
				>
					{#if isLoading}
						<Loader2 class="text-primary-500 absolute inset-0 m-auto h-4 w-4 animate-spin" />
					{:else}
						{day.date.getDate()}
					{/if}
				</button>
			</div>
		{/each}
	</div>

	<!-- Legend -->
	<div class="mt-4 flex items-center justify-center space-x-4 text-xs text-neutral-600">
		<div class="flex items-center">
			<span class="bg-primary-600 mr-2 h-3 w-3 rounded-full"></span>
			<span>Selected</span>
		</div>
		<div class="flex items-center">
			<span class="border-primary-500 mr-2 h-3 w-3 rounded-full border bg-white"></span>
			<span>Available</span>
		</div>
		<div class="flex items-center">
			<span class="mr-2 h-3 w-3 rounded-full bg-neutral-200"></span>
			<span>Unavailable</span>
		</div>
	</div>
</div>



================================================================================
File: src/lib/components/Footer.svelte
================================================================================

<!--
/**
 * @file Footer.svelte
 * @description Footer component for the Zungri Museum website.
 * Contains museum contact information, navigation links, social media,
 * and legal information.
 *
 * Key features:
 * - Museum contact information and location
 * - Quick navigation links
 * - Social media links
 * - Legal and policy links
 * - Responsive design with proper spacing
 * - Multilingual support
 *
 * @dependencies
 * - $lib/paraglide/messages: Internationalization messages
 * - lucide-svelte: Icons for contact info and social media
 *
 * @notes
 * - Uses Tailwind CSS for responsive layout
 * - Implements structured contact information
 * - Includes accessibility considerations
 */
-->
<script lang="ts">
	import * as m from '$lib/paraglide/messages';
	import { MapPin, Phone, Mail, Clock, Facebook, Instagram, Twitter } from 'lucide-svelte';

	// Quick navigation links
	const quickLinks = [
		{ href: '/', label: m.navigation_home },
		{ href: '/about', label: m.navigation_about },
		{ href: '/plan-your-visit', label: m.navigation_visit },
		{ href: '/exhibitions', label: m.navigation_exhibitions },
		{ href: '/contact', label: m.navigation_contact }
	];

	// Legal and policy links
	const legalLinks = [
		{ href: '/privacy', label: m.footer_privacy },
		{ href: '/terms', label: m.footer_terms }
	];

	// Social media links
	const socialLinks = [
		{
			href: 'https://facebook.com/museozungri',
			label: 'Facebook',
			icon: Facebook,
			ariaLabel: 'Visit our Facebook page'
		},
		{
			href: 'https://instagram.com/museozungri',
			label: 'Instagram',
			icon: Instagram,
			ariaLabel: 'Visit our Instagram page'
		},
		{
			href: 'https://twitter.com/museozungri',
			label: 'Twitter',
			icon: Twitter,
			ariaLabel: 'Visit our Twitter page'
		}
	];

	// Museum contact information
	const contactInfo = {
		address: 'Via Roma, 123\n89020 Zungri (VV)\nCalabria, Italia',
		phone: '+39 0963 123456',
		email: 'info@museozungri.it',
		hours: {
			weekdays: '9:00 - 17:00',
			weekends: '10:00 - 18:00',
			closed: 'Lunedì / Monday / Montag'
		}
	};
</script>

<footer class="bg-gray-900 text-white">
	<div class="mx-auto max-w-7xl px-4 py-12 sm:px-6 lg:px-8">
		<!-- Main Footer Content -->
		<div class="grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-4">
			<!-- Museum Information -->
			<div class="lg:col-span-1">
				<div class="flex items-center space-x-3 text-blue-400">
					<div class="flex h-10 w-10 items-center justify-center rounded-full bg-blue-900">
						<svg
							class="h-6 w-6"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
							/>
						</svg>
					</div>
					<div>
						<h3 class="text-lg font-bold">Museo di Zungri</h3>
						<p class="text-sm text-gray-400">Calabria, Italia</p>
					</div>
				</div>
				<p class="mt-4 text-sm text-gray-300">
					{m.museum_welcomeSubtitle()}
				</p>

				<!-- Social Media Links -->
				<div class="mt-6">
					<h4 class="text-sm font-semibold text-gray-200">{m.footer_followUs()}</h4>
					<div class="mt-2 flex space-x-3">
						{#each socialLinks as social}
							<a
								href={social.href}
								class="text-gray-400 transition-colors duration-200 hover:text-blue-400"
								aria-label={social.ariaLabel}
								target="_blank"
								rel="noopener noreferrer"
							>
								<svelte:component this={social.icon} class="h-5 w-5" />
							</a>
						{/each}
					</div>
				</div>
			</div>

			<!-- Contact Information -->
			<div>
				<h3 class="text-lg font-semibold text-white">{m.contact_getInTouch()}</h3>
				<div class="mt-4 space-y-3">
					<!-- Address -->
					<div class="flex items-start space-x-3">
						<MapPin class="mt-0.5 h-5 w-5 flex-shrink-0 text-blue-400" />
						<div>
							<h4 class="text-sm font-medium text-gray-200">{m.contact_address()}</h4>
							<p class="mt-1 whitespace-pre-line text-sm text-gray-400">
								{contactInfo.address}
							</p>
						</div>
					</div>

					<!-- Phone -->
					<div class="flex items-center space-x-3">
						<Phone class="h-5 w-5 flex-shrink-0 text-blue-400" />
						<div>
							<h4 class="text-sm font-medium text-gray-200">{m.contact_phone()}</h4>
							<a
								href="tel:{contactInfo.phone}"
								class="mt-1 text-sm text-gray-400 hover:text-blue-400"
							>
								{contactInfo.phone}
							</a>
						</div>
					</div>

					<!-- Email -->
					<div class="flex items-center space-x-3">
						<Mail class="h-5 w-5 flex-shrink-0 text-blue-400" />
						<div>
							<h4 class="text-sm font-medium text-gray-200">{m.contact_email()}</h4>
							<a
								href="mailto:{contactInfo.email}"
								class="mt-1 text-sm text-gray-400 hover:text-blue-400"
							>
								{contactInfo.email}
							</a>
						</div>
					</div>
				</div>
			</div>

			<!-- Opening Hours -->
			<div>
				<h3 class="text-lg font-semibold text-white">{m.museum_openingHours()}</h3>
				<div class="mt-4 space-y-2">
					<div class="flex items-center space-x-3">
						<Clock class="h-5 w-5 flex-shrink-0 text-blue-400" />
						<div>
							<div class="text-sm text-gray-300">
								<p class="font-medium">Mar - Dom</p>
								<p class="text-gray-400">{contactInfo.hours.weekdays}</p>
							</div>
						</div>
					</div>
					<div class="ml-8">
						<p class="text-sm text-gray-300">
							<span class="font-medium">Sab - Dom:</span>
							<span class="text-gray-400">{contactInfo.hours.weekends}</span>
						</p>
						<p class="text-sm text-red-400">
							<span class="font-medium">Chiuso:</span>
							{contactInfo.hours.closed}
						</p>
					</div>
				</div>
			</div>

			<!-- Quick Links -->
			<div>
				<h3 class="text-lg font-semibold text-white">Link Rapidi</h3>
				<div class="mt-4">
					<ul class="space-y-2">
						{#each quickLinks as link}
							<li>
								<a
									href={link.href}
									class="text-sm text-gray-400 transition-colors duration-200 hover:text-blue-400"
								>
									{link.label()}
								</a>
							</li>
						{/each}
					</ul>
				</div>

				<!-- Newsletter Signup -->
				<div class="mt-6">
					<h4 class="text-sm font-semibold text-gray-200">{m.footer_newsletter()}</h4>
					<p class="mt-2 text-xs text-gray-400">
						Ricevi aggiornamenti su mostre ed eventi del museo.
					</p>
					<div class="mt-3 flex">
						<input
							type="email"
							placeholder="La tua email"
							class="flex-grow rounded-l-md border-0 bg-gray-800 px-3 py-2 text-sm text-white placeholder-gray-400 focus:ring-2 focus:ring-blue-500"
						/>
						<button
							type="button"
							class="rounded-r-md bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							Iscriviti
						</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Footer Bottom -->
		<div class="mt-12 border-t border-gray-800 pt-8">
			<div class="flex flex-col items-center justify-between space-y-4 md:flex-row md:space-y-0">
				<!-- Copyright -->
				<div class="text-center text-sm text-gray-400 md:text-left">
					<p>{m.footer_copyright()}</p>
				</div>

				<!-- Legal Links -->
				<div class="flex space-x-6">
					{#each legalLinks as link}
						<a
							href={link.href}
							class="text-sm text-gray-400 transition-colors duration-200 hover:text-blue-400"
						>
							{link.label()}
						</a>
					{/each}
				</div>

				<!-- Support Information -->
				<div class="text-center text-xs text-gray-500 md:text-right">
					<p>{m.footer_supportedBy()}</p>
					<p>Regione Calabria • Comune di Zungri</p>
				</div>
			</div>
		</div>
	</div>
</footer>



================================================================================
File: src/lib/components/Header.svelte
================================================================================

<!--
/**
 * @file Header.svelte
 * @description Main navigation header for the Zungri Museum website.
 * Features responsive design with mobile menu, multilingual navigation,
 * and museum branding.
 *
 * Key features:
 * - Fully responsive navigation with mobile hamburger menu
 * - Language switcher integration
 * - Museum logo and branding
 * - Navigation links for all main sections
 * - Shopping cart and booking CTAs
 * - Optimized for all screen sizes including very small devices
 *
 * @dependencies
 * - $lib/components/LanguageSwitcher.svelte: Language switching component
 * - $lib/paraglide/messages: Internationalization messages
 * - lucide-svelte: Icons for navigation
 * - $app/page: Current page state for active link highlighting
 *
 * @notes
 * - Uses Tailwind CSS for responsive design
 * - Implements mobile-first approach
 * - Supports keyboard navigation for accessibility
 * - Handles very small screens (320px+)
 */
-->
<script lang="ts">
	import { page } from '$app/state';
	import LanguageSwitcher from './LanguageSwitcher.svelte';
	import * as m from '$lib/paraglide/messages';
	import { Menu, X, ShoppingBag, Calendar, MapPin } from 'lucide-svelte';

	// Mobile menu state
	let mobileMenuOpen = $state(false);

	// Navigation items with i18n labels
	const navigationItems = [
		{
			href: '/',
			label: m.navigation_home,
			icon: null
		},
		{
			href: '/about',
			label: m.navigation_about,
			icon: null
		},
		{
			href: '/plan-your-visit',
			label: m.navigation_visit,
			icon: MapPin
		},
		{
			href: '/exhibitions',
			label: m.navigation_exhibitions,
			icon: null
		},
		{
			href: '/contact',
			label: m.navigation_contact,
			icon: null
		}
	];

	// Action buttons with i18n labels
	const actionButtons = [
		{
			href: '/book',
			label: m.navigation_book,
			icon: Calendar,
			variant: 'primary'
		},
		{
			href: '/shop',
			label: m.navigation_shop,
			icon: ShoppingBag,
			variant: 'secondary'
		}
	];

	// Check if current route is active
	function isActiveRoute(href: string): boolean {
		if (href === '/') {
			return page.url.pathname === '/';
		}
		return page.url.pathname.startsWith(href);
	}

	// Close mobile menu when route changes
	$effect(() => {
		page.url.pathname;
		mobileMenuOpen = false;
	});

	// Handle mobile menu toggle
	function toggleMobileMenu() {
		mobileMenuOpen = !mobileMenuOpen;
	}

	// Handle escape key to close mobile menu
	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape' && mobileMenuOpen) {
			mobileMenuOpen = false;
		}
	}

	// Close mobile menu when clicking outside (optional - can be removed if causing issues)
	function handleClickOutside(event: MouseEvent) {
		if (mobileMenuOpen && event.target && !(event.target as Element).closest('header')) {
			mobileMenuOpen = false;
		}
	}
</script>

<svelte:document on:keydown={handleKeydown} />

<header class="sticky top-0 z-50 bg-white shadow-md">
	<div class="mx-auto max-w-7xl px-3 sm:px-4 lg:px-8">
		<div class="flex h-14 items-center justify-between sm:h-16">
			<!-- Logo and Museum Name -->
			<div class="flex min-w-0 flex-shrink-0 items-center">
				<a
					href="/"
					class="flex items-center space-x-2 text-blue-600 transition-colors duration-200 hover:text-blue-700 sm:space-x-3"
				>
					<!-- Museum Logo/Icon -->
					<div
						class="flex h-8 w-8 flex-shrink-0 items-center justify-center rounded-full bg-blue-100 sm:h-10 sm:w-10"
					>
						<svg
							class="h-4 w-4 sm:h-6 sm:w-6"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"
							/>
						</svg>
					</div>
					<div class="xs:block hidden min-w-0 sm:block">
						<h1 class="truncate text-base font-bold text-gray-900 sm:text-xl">Museo di Zungri</h1>
						<p class="hidden text-xs text-gray-600 sm:block">Calabria, Italia</p>
					</div>
				</a>
			</div>

			<!-- Desktop Navigation -->
			<nav class="hidden lg:flex lg:items-center lg:space-x-6 xl:space-x-8">
				{#each navigationItems as item}
					<a
						href={item.href}
						class="inline-flex items-center space-x-1 whitespace-nowrap text-sm font-medium transition-colors duration-200 {isActiveRoute(
							item.href
						)
							? 'border-b-2 border-blue-600 text-blue-600'
							: 'text-gray-700 hover:text-blue-600'}"
					>
						{#if item.icon}
							<svelte:component this={item.icon} class="h-4 w-4" />
						{/if}
						<span>{item.label()}</span>
					</a>
				{/each}
			</nav>

			<!-- Action Buttons and Language Switcher (Desktop) -->
			<div class="hidden md:flex md:items-center md:space-x-2 lg:space-x-4">
				{#each actionButtons as button}
					<a
						href={button.href}
						class="inline-flex items-center space-x-1 whitespace-nowrap rounded-md px-2 py-2 text-xs font-medium transition-colors duration-200 sm:space-x-2 sm:px-4 sm:text-sm {button.variant ===
						'primary'
							? 'bg-blue-600 text-white hover:bg-blue-700'
							: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50'}"
					>
						<svelte:component this={button.icon} class="h-3 w-3 sm:h-4 sm:w-4" />
						<span class="hidden sm:inline">{button.label()}</span>
						<span class="sm:hidden">{button.label().split(' ')[0]}</span>
					</a>
				{/each}

				<!-- Language Switcher -->
				<div class="flex-shrink-0">
					<LanguageSwitcher />
				</div>
			</div>

			<!-- Mobile Menu Button -->
			<div class="flex md:hidden">
				<button
					type="button"
					class="inline-flex items-center justify-center rounded-md p-2 text-gray-700 transition-colors duration-200 hover:bg-gray-100 hover:text-blue-600 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500"
					aria-expanded={mobileMenuOpen}
					aria-label="Toggle navigation menu"
					on:click={toggleMobileMenu}
				>
					{#if mobileMenuOpen}
						<X class="h-5 w-5 sm:h-6 sm:w-6" />
					{:else}
						<Menu class="h-5 w-5 sm:h-6 sm:w-6" />
					{/if}
				</button>
			</div>
		</div>
	</div>

	<!-- Mobile Navigation Menu -->
	{#if mobileMenuOpen}
		<div class="mobile-menu md:hidden">
			<div
				class="max-h-screen overflow-y-auto border-t border-gray-200 bg-white px-3 pb-3 pt-2 shadow-lg sm:px-4"
			>
				<!-- Mobile Navigation Links -->
				<div class="space-y-1">
					{#each navigationItems as item}
						<a
							href={item.href}
							class="flex items-center space-x-3 rounded-md px-3 py-3 text-base font-medium transition-colors duration-200 {isActiveRoute(
								item.href
							)
								? 'bg-blue-50 text-blue-600'
								: 'text-gray-700 hover:bg-gray-50 hover:text-blue-600'}"
						>
							{#if item.icon}
								<svelte:component this={item.icon} class="h-5 w-5 flex-shrink-0" />
							{/if}
							<span class="truncate">{item.label()}</span>
						</a>
					{/each}
				</div>

				<!-- Mobile Action Buttons -->
				<div class="mt-4 space-y-2 border-t border-gray-200 pt-4">
					{#each actionButtons as button}
						<a
							href={button.href}
							class="flex items-center justify-center space-x-2 rounded-md px-4 py-3 text-base font-medium transition-colors duration-200 {button.variant ===
							'primary'
								? 'bg-blue-600 text-white hover:bg-blue-700'
								: 'border border-gray-300 bg-white text-gray-700 hover:bg-gray-50'}"
						>
							<svelte:component this={button.icon} class="h-5 w-5 flex-shrink-0" />
							<span>{button.label()}</span>
						</a>
					{/each}
				</div>

				<!-- Mobile Language Switcher -->
				<div class="mt-4 border-t border-gray-200 pt-4">
					<LanguageSwitcher />
				</div>
			</div>
		</div>
	{/if}
</header>

<style>
	/* Custom responsive breakpoint for very small screens */
	@media (min-width: 375px) {
		.xs\:block {
			display: block;
		}
	}

	/* Ensure smooth transitions */
	.mobile-menu {
		animation: slideDown 0.2s ease-out;
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	/* Ensure proper text truncation on very small screens */
	@media (max-width: 374px) {
		h1 {
			font-size: 0.875rem;
		}
	}
</style>



================================================================================
File: src/lib/components/LanguageSwitcher.svelte
================================================================================

<!--
/**
 * @file LanguageSwitcher.svelte
 * @description Language switcher component for the Zungri Museum website.
 * Allows users to switch between Italian, English, and German languages.
 * Uses Paraglide for internationalization and URL-based locale switching.
 *
 * Key features:
 * - Dropdown menu for language selection
 * - Current language indication
 * - Smooth transitions and hover effects
 * - Keyboard navigation support
 * - Automatic URL localization
 *
 * @dependencies
 * - $lib/paraglide/runtime: Paraglide i18n runtime for locale switching
 * - $lib/paraglide/messages: Language labels
 * - lucide-svelte: Icons for UI
 * - $app/navigation: SvelteKit navigation utilities
 *
 * @notes
 * - Uses Paraglide's setLocale function for language switching
 * - Supports keyboard navigation (Enter, Escape, Arrow keys)
 * - Implements proper ARIA attributes for accessibility
 * - Uses flag emojis for visual language identification
 */
-->
<script lang="ts">
	import { setLocale, getLocale, locales } from '$lib/paraglide/runtime';
	import * as m from '$lib/paraglide/messages';
	import { ChevronDown, Globe } from 'lucide-svelte';
	import { goto } from '$app/navigation';
	import { page } from '$app/state';

	// Language configuration with labels and flags
	const languageOptions = [
		{
			code: 'it',
			label: m.languages_it,
			nativeLabel: 'Italiano',
			flag: '🇮🇹'
		},
		{
			code: 'en',
			label: m.languages_en,
			nativeLabel: 'English',
			flag: '🇬🇧'
		},
		{
			code: 'de',
			label: m.languages_de,
			nativeLabel: 'Deutsch',
			flag: '🇩🇪'
		}
	];

	// Component state
	let isOpen = $state(false);
	let currentLocale = $state(getLocale());

	// Get current language info
	let currentLanguage = $derived(
		languageOptions.find((lang) => lang.code === currentLocale) || languageOptions[0]
	);

	// Update current locale when it changes
	$effect(() => {
		currentLocale = getLocale();
	});

	// Close dropdown when clicking outside or on route change
	$effect(() => {
		page.url.pathname;
		isOpen = false;
	});

	// Handle language change
	async function handleLanguageChange(newLocale: string) {
		try {
			// Set the new locale using Paraglide
			setLocale(newLocale as any);
			isOpen = false;

			// The page will automatically reload with the new locale
			// due to Paraglide's URL-based routing
		} catch (error) {
			console.error('Error changing language:', error);
		}
	}

	// Toggle dropdown
	function toggleDropdown() {
		isOpen = !isOpen;
	}

	// Close dropdown
	function closeDropdown() {
		isOpen = false;
	}

	// Handle keyboard navigation
	function handleKeydown(event: KeyboardEvent) {
		if (event.key === 'Escape') {
			closeDropdown();
		} else if (event.key === 'Enter' || event.key === ' ') {
			event.preventDefault();
			toggleDropdown();
		}
	}

	// Handle option selection with keyboard
	function handleOptionKeydown(event: KeyboardEvent, locale: string) {
		if (event.key === 'Enter' || event.key === ' ') {
			event.preventDefault();
			handleLanguageChange(locale);
		}
	}
</script>

<div class="relative">
	<!-- Language Switcher Button -->
	<button
		type="button"
		class="inline-flex items-center space-x-2 rounded-md border border-gray-300 bg-white px-3 py-2 text-sm font-medium text-gray-700 shadow-sm transition-colors duration-200 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
		aria-expanded={isOpen}
		aria-haspopup="listbox"
		aria-label="Change language"
		on:click={toggleDropdown}
		on:keydown={handleKeydown}
	>
		<!-- Globe icon for desktop, flag for mobile -->
		<div class="flex items-center space-x-1">
			<Globe class="h-4 w-4 text-gray-500 sm:hidden" />
			<span class="hidden text-sm sm:inline">{currentLanguage.flag}</span>
			<span class="hidden sm:inline">{currentLanguage.nativeLabel}</span>
			<span class="sm:hidden">{currentLanguage.code.toUpperCase()}</span>
		</div>
		<ChevronDown
			class="h-4 w-4 text-gray-500 transition-transform duration-200 {isOpen
				? 'rotate-180'
				: 'rotate-0'}"
		/>
	</button>

	<!-- Dropdown Menu -->
	{#if isOpen}
		<div
			class="absolute right-0 z-10 mt-2 w-48 origin-top-right rounded-md border border-gray-200 bg-white py-1 shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none"
			role="listbox"
			aria-label="Language options"
		>
			{#each languageOptions as language}
				<button
					type="button"
					class="flex w-full items-center space-x-3 px-4 py-2 text-left text-sm transition-colors duration-200 {language.code ===
					currentLocale
						? 'bg-blue-50 text-blue-700'
						: 'text-gray-700 hover:bg-gray-50'}"
					role="option"
					aria-selected={language.code === currentLocale}
					tabindex={isOpen ? 0 : -1}
					on:click={() => handleLanguageChange(language.code)}
					on:keydown={(e) => handleOptionKeydown(e, language.code)}
				>
					<span class="text-lg">{language.flag}</span>
					<div class="flex flex-col">
						<span class="font-medium">{language.nativeLabel}</span>
						<span class="text-xs text-gray-500">{language.label()}</span>
					</div>
					{#if language.code === currentLocale}
						<div class="ml-auto">
							<svg
								class="h-4 w-4 text-blue-600"
								fill="currentColor"
								viewBox="0 0 20 20"
								xmlns="http://www.w3.org/2000/svg"
							>
								<path
									fill-rule="evenodd"
									d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
									clip-rule="evenodd"
								/>
							</svg>
						</div>
					{/if}
				</button>
			{/each}
		</div>
	{/if}
</div>

<!-- Close dropdown when clicking outside -->
<svelte:window
	on:click={(e) => {
		if (isOpen && !e.target?.closest('.relative')) {
			closeDropdown();
		}
	}}
/>



================================================================================
File: src/lib/components/PaymentForm.svelte
================================================================================

<script lang="ts">
	/**
	 * @file PaymentForm.svelte
	 * @purpose A reusable component that encapsulates the Stripe Payment Element for secure payment processing.
	 * @dependencies
	 * - @stripe/stripe-js: For loading Stripe.js and interacting with the Stripe API.
	 * - svelte: For component logic and lifecycle hooks.
	 * - lucide-svelte: For icons.
	 * @notes
	 * - The component is responsible for mounting the Stripe Payment Element.
	 * - It handles the payment submission process, including calling `stripe.confirmPayment`.
	 * - It displays loading states and error messages returned from the Stripe API.
	 * - It expects a `clientSecret` prop to initialize the Payment Element.
	 */
	import {
		loadStripe,
		type Stripe,
		type StripeElements,
		type StripePaymentElement
	} from '@stripe/stripe-js';
	import { Loader2 } from 'lucide-svelte';
	import { env } from '$env/dynamic/public';

	// Define props interface for type safety
	interface Props {
		clientSecret: string;
	}
	let { clientSecret }: Props = $props();

	let stripe: Stripe | null = null;
	let elements: StripeElements | undefined;
	let paymentElement: StripePaymentElement | undefined;
	let isLoading = $state(true); // Loading state for the form itself
	let isProcessing = $state(false); // Processing state for payment submission
	let errorMessage = $state<string | undefined>();
	let paymentElementContainer: HTMLElement;

	$effect(() => {
		// Ensure this runs only on the client
		if (typeof window === 'undefined') {
			isLoading = false;
			return;
		}

		const stripeKey = env.PUBLIC_STRIPE_PUBLISHABLE_KEY;
		if (!stripeKey) {
			console.error('Stripe public key is not set.');
			errorMessage = 'Payment system is not configured correctly.';
			isLoading = false;
			return;
		}

		// Async effect to load and mount Stripe
		(async () => {
			stripe = await loadStripe(stripeKey);
			if (!stripe || !clientSecret) {
				isLoading = false;
				return;
			}

			elements = stripe.elements({ clientSecret });
			paymentElement = elements.create('payment');
			paymentElement.mount(paymentElementContainer);
			isLoading = false;
		})();

		// Cleanup function to unmount the payment element
		return () => {
			if (paymentElement) {
				paymentElement.unmount();
				paymentElement.destroy();
			}
		};
	});

	async function handleSubmit(event: Event) {
		event.preventDefault(); // Handle preventDefault inside the function

		if (!stripe || !elements) {
			errorMessage = 'Payment system is not ready.';
			return;
		}

		isProcessing = true;

		const { error } = await stripe.confirmPayment({
			elements,
			confirmParams: {
				// Make sure to change this to your payment completion page
				return_url: `${window.location.origin}/payment-success`
			}
		});

		// This point will only be reached if there is an immediate error when
		// confirming the payment. Otherwise, the customer will be redirected to
		// the `return_url`. For some payment methods like iDEAL, the customer will
		// be redirected to an intermediate site first to authorize the payment, then
		// redirected to the `return_url`.
		if (error.type === 'card_error' || error.type === 'validation_error') {
			errorMessage = error.message;
		} else {
			errorMessage = 'An unexpected error occurred.';
		}

		isProcessing = false;
	}
</script>

<form onsubmit={handleSubmit} class="space-y-6">
	<div id="payment-element" bind:this={paymentElementContainer}>
		{#if isLoading}
			<div
				class="flex h-32 items-center justify-center rounded-md border border-neutral-200 bg-neutral-50 text-neutral-500"
			>
				<Loader2 class="mr-2 h-5 w-5 animate-spin" />
				<span>Loading Payment Form...</span>
			</div>
		{/if}
	</div>

	<button
		disabled={isProcessing || isLoading || !stripe || !elements}
		class="bg-primary-600 hover:bg-primary-700 focus-visible:outline-primary-600 w-full rounded-md px-4 py-3 font-semibold text-white shadow-sm transition-colors focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 disabled:cursor-not-allowed disabled:opacity-50"
	>
		{#if isProcessing}
			<div class="flex items-center justify-center">
				<Loader2 class="mr-2 h-5 w-5 animate-spin" />
				<span>Processing...</span>
			</div>
		{:else}
			<span>Pay Now</span>
		{/if}
	</button>

	<!-- Show any error that happens when confirming the payment -->
	{#if errorMessage}
		<div class="mt-4 text-center text-sm text-red-600" role="alert">
			{errorMessage}
		</div>
	{/if}
</form>



================================================================================
File: src/lib/components/ProductCard.svelte
================================================================================

<script lang="ts">
	/** 
     * * @file ProductCard.svelte 
     * * @purpose A reusable component to display a single merchandise item
in a list or grid. * 
* @dependencies * - svelte: For component logic and transitions. * -
lucide-svelte: For icons. * - $lib/api/apiClient: For the `Merchandise` type definition. * -
$lib/stores/cartStore: For the `addToCart` action. * 
* @notes * - It displays a placeholder image,
as actual image serving is handled elsewhere. 
* - The "Add to Cart" button is disabled if the
product inventory is zero. 
* - The entire card is a link to the product's detail page. 
* - It
defaults to showing the 'en' translation for the product name. */

	import type { Merchandise } from '$lib/api/apiClient';
	import { cart } from '$lib/stores/cartStore';
	import { ShoppingCart } from 'lucide-svelte';

	let { product }: { product: Merchandise } = $props();

	/** Handles the click event for the "Add to Cart" button. */
	function handleAddToCart() {
		cart.addToCart(product, 1);
		// In a full application, a toast notification could be shown here.
	}

	// Determine the name to display, falling back from 'en' to the first available translation.
	const lang = 'en';
	const name = product.name_translations[lang] || Object.values(product.name_translations)[0];
</script>

<div
	class="rounded-card shadow-soft hover:shadow-large group relative flex h-full flex-col overflow-hidden border border-neutral-200 bg-white transition-all duration-300 hover:-translate-y-1"
>
	<a href="/shop/{product.id}" class="block" aria-label="View details for {name}">
		<div class="aspect-h-1 aspect-w-1 w-full overflow-hidden bg-neutral-100">
			<!-- Placeholder for product image. -->
			<div class="flex h-full w-full items-center justify-center text-neutral-400">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					width="48"
					height="48"
					viewBox="0 0 24 24"
					fill="none"
					stroke="currentColor"
					stroke-width="1"
					stroke-linecap="round"
					stroke-linejoin="round"
					><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle
						cx="8.5"
						cy="8.5"
						r="1.5"
					></circle><polyline points="21 15 16 10 5 21"></polyline></svg
				>
			</div>
			<!-- Example of how a real image would be used:
    			<img src={`/api/v1/merchandise/image/${product.primary_image_path}`} alt={name} class="h-full w-full object-cover object-center transition-transform duration-300 group-hover:scale-105" />
    			-->
		</div>
		<div class="p-4">
			<h3 class="font-heading truncate text-lg font-semibold text-neutral-800" title={name}>
				{name}
			</h3>
			<p class="text-primary-600 mt-2 text-xl font-bold">
				€{product.price.toFixed(2)}
			</p>
		</div>
	</a>
	<div class="mt-auto p-4 pt-0">
		<button
			type="button"
			class="bg-primary-500 text-primary-50 hover:bg-primary-600 flex w-full items-center justify-center gap-2 rounded-md px-4 py-2 text-sm font-medium transition-colors disabled:cursor-not-allowed disabled:opacity-50"
			onclick={handleAddToCart}
			disabled={product.inventory <= 0}
		>
			<ShoppingCart class="h-4 w-4" />
			<span>{product.inventory > 0 ? 'Add to Cart' : 'Out of Stock'}</span>
		</button>
	</div>
</div>



================================================================================
File: src/lib/components/TicketSelector.svelte
================================================================================

<!--
@file TicketSelector Component - Ticket type and quantity selection
@description 
Interactive component for selecting ticket types and quantities for museum visits.
Updated to work with the new single-ticket booking store structure.

Key features:
- Single ticket type selection (matching new store structure)
- Quantity increment/decrement controls
- Real-time price calculations
- Multilingual ticket names and descriptions
- Input validation and error display
- Responsive design for all screen sizes

@dependencies
- Svelte 5: For reactive state management with runes
- Lucide Icons: For UI icons (plus, minus, ticket, users)
- Tailwind CSS: For styling and responsive design
- bookingStore: For ticket selection state management

@notes
- Now supports single ticket selection model as per the refactored store
- Prices are displayed in EUR format
- Maximum quantity limits can be configured
- Integrates with time slot capacity checking
- Handles multilingual content via translation props
-->

<script lang="ts">
	import { Plus, Minus, Ticket, Users, Info, AlertTriangle } from 'lucide-svelte';
	import {
		selectedTicket,
		availableTicketTypes,
		totalPrice,
		totalTickets,
		validationErrors,
		bookingActions
	} from '$lib/stores/bookingStore';
	import type { TicketType } from '$lib/stores/bookingStore';

	// Type definitions
	interface Props {
		language?: string;
		maxQuantityPerType?: number;
		maxTotalTickets?: number;
		showDescriptions?: boolean;
		class?: string;
		disabled?: boolean;
	}

	interface Translations {
		[key: string]: string;
	}

	// Props for customization
	let {
		language = 'en',
		maxQuantityPerType = 10,
		maxTotalTickets = 20,
		showDescriptions = true,
		class: className = '',
		disabled = false
	}: Props = $props();

	// Helper function to get localized text
	function getLocalizedText(translations: Translations | undefined, fallback: string = ''): string {
		if (!translations || typeof translations !== 'object') return fallback;
		return translations[language] || translations['en'] || translations['it'] || fallback;
	}

	// Format price for display
	function formatPrice(price: number): string {
		return new Intl.NumberFormat('en-EU', {
			style: 'currency',
			currency: 'EUR',
			minimumFractionDigits: 2
		}).format(price);
	}

	// Get current quantity for a ticket type - FIXED for new store structure
	function getQuantity(ticketTypeId: string): number {
		// Handle the case where selectedTicket is null or doesn't match the ticketTypeId
		if (!$selectedTicket || $selectedTicket.id !== ticketTypeId) {
			return 0;
		}
		return $selectedTicket.quantity;
	}

	// Update quantity for a ticket type - FIXED for new store structure
	function updateQuantity(ticketTypeId: string, newQuantity: number): void {
		// Validate quantity limits
		const clampedQuantity = Math.max(0, Math.min(newQuantity, maxQuantityPerType));

		// Since we only support one ticket type at a time, we can directly update
		bookingActions.updateTicketQuantity(ticketTypeId, clampedQuantity);
	}

	// Increment quantity
	function incrementQuantity(ticketTypeId: string): void {
		const currentQuantity = getQuantity(ticketTypeId);
		updateQuantity(ticketTypeId, currentQuantity + 1);
	}

	// Decrement quantity
	function decrementQuantity(ticketTypeId: string): void {
		const currentQuantity = getQuantity(ticketTypeId);
		updateQuantity(ticketTypeId, currentQuantity - 1);
	}

	// Handle direct input change
	function handleInputChange(ticketTypeId: string, event: Event): void {
		const target = event.target as HTMLInputElement;
		const value = parseInt(target.value) || 0;
		updateQuantity(ticketTypeId, value);
	}

	// Check if increment is disabled - UPDATED for new store structure
	function isIncrementDisabled(ticketTypeId: string): boolean {
		if (disabled) return true;
		const currentQuantity = getQuantity(ticketTypeId);

		// If this ticket type is not selected and another one is, disable increment
		if ($selectedTicket && $selectedTicket.id !== ticketTypeId && currentQuantity === 0) {
			return true;
		}

		return currentQuantity >= maxQuantityPerType || currentQuantity >= maxTotalTickets;
	}

	// Check if decrement is disabled
	function isDecrementDisabled(ticketTypeId: string): boolean {
		if (disabled) return true;
		return getQuantity(ticketTypeId) <= 0;
	}

	// Get ticket type subtitle (group size info)
	function getTicketSubtitle(ticketType: TicketType): string {
		if (ticketType.group_size && ticketType.group_size > 1) {
			return `Group of ${ticketType.group_size} people`;
		}
		return 'Individual ticket';
	}

	// Calculate subtotal for a ticket type
	function calculateSubtotal(ticketType: TicketType): number {
		const quantity = getQuantity(ticketType.id);
		return ticketType.price * quantity;
	}

	// Check if a ticket type is selected
	function isTicketTypeSelected(ticketTypeId: string): boolean {
		return $selectedTicket?.id === ticketTypeId;
	}

	// Check if another ticket type is selected (for showing disabled state)
	function isAnotherTicketSelected(ticketTypeId: string): boolean {
		return $selectedTicket !== null && $selectedTicket.id !== ticketTypeId;
	}
</script>

<div class="ticket-selector {className}">
	<!-- Header -->
	<div class="header mb-6">
		<div class="mb-2 flex items-center space-x-2">
			<Ticket class="text-primary-600 h-5 w-5" />
			<h3 class="text-lg font-semibold text-neutral-900">Select Tickets</h3>
		</div>
		<p class="text-sm text-neutral-600">Choose your ticket type and quantity</p>
	</div>

	<!-- Validation Errors -->
	{#if $validationErrors.tickets}
		<div class="error-message bg-error/10 border-error/20 mb-4 rounded-lg border p-3">
			<div class="flex items-center space-x-2">
				<AlertTriangle class="text-error h-4 w-4" />
				<span class="text-error font-medium">{$validationErrors.tickets}</span>
			</div>
		</div>
	{/if}

	<!-- Single Ticket Selection Notice -->
	{#if $selectedTicket}
		<div class="selection-notice bg-primary-50 border-primary-200 mb-4 rounded-lg border p-3">
			<div class="flex items-center space-x-2">
				<Info class="text-primary-600 h-4 w-4" />
				<span class="text-primary-800 text-sm">
					You can select one ticket type at a time. To change types, set the current selection to 0.
				</span>
			</div>
		</div>
	{/if}

	<!-- Ticket Types List -->
	<div class="ticket-types-list space-y-4">
		{#each $availableTicketTypes as ticketType (ticketType.id)}
			{@const quantity = getQuantity(ticketType.id)}
			{@const subtotal = calculateSubtotal(ticketType)}
			{@const name = getLocalizedText(ticketType.name_translations, 'Ticket')}
			{@const description = getLocalizedText(ticketType.description_translations, '')}
			{@const isSelected = isTicketTypeSelected(ticketType.id)}
			{@const isOtherSelected = isAnotherTicketSelected(ticketType.id)}

			<div
				class="ticket-type-card hover:shadow-medium rounded-lg border bg-white p-4 transition-all duration-200"
				class:border-primary-300={isSelected}
				class:bg-primary-50={isSelected}
				class:border-neutral-200={!isSelected}
				class:opacity-60={isOtherSelected}
			>
				<!-- Ticket Type Header -->
				<div class="ticket-header mb-3 flex items-start justify-between">
					<div class="ticket-info flex-1">
						<h4 class="ticket-name mb-1 text-lg font-semibold text-neutral-900">
							{name}
							{#if isSelected}
								<span class="text-primary-600 ml-2 text-sm">✓ Selected</span>
							{/if}
						</h4>

						<div class="ticket-meta flex items-center space-x-4 text-sm text-neutral-600">
							<span class="subtitle">
								{getTicketSubtitle(ticketType)}
							</span>

							{#if ticketType.group_size}
								<div class="group-indicator flex items-center space-x-1">
									<Users class="h-3 w-3" />
									<span>{ticketType.group_size}</span>
								</div>
							{/if}
						</div>

						{#if showDescriptions && description}
							<p class="ticket-description mt-2 text-sm text-neutral-600">
								{description}
							</p>
						{/if}
					</div>

					<div class="price-info text-right">
						<div class="price text-xl font-bold text-neutral-900">
							{formatPrice(ticketType.price)}
						</div>
						{#if ticketType.group_size && ticketType.group_size > 1}
							<div class="price-per-person text-xs text-neutral-500">
								{formatPrice(ticketType.price / ticketType.group_size)} per person
							</div>
						{/if}
					</div>
				</div>

				<!-- Quantity Controls -->
				<div class="quantity-controls flex items-center justify-between">
					<div class="quantity-input flex items-center space-x-3">
						<!-- Decrement Button -->
						<button
							type="button"
							class="quantity-btn decrement-btn flex h-8 w-8 items-center justify-center rounded-full border border-neutral-300 transition-colors
                                {isDecrementDisabled(ticketType.id)
								? 'cursor-not-allowed bg-neutral-100 text-neutral-400'
								: 'focus:ring-primary-500 bg-white text-neutral-700 hover:border-neutral-400 hover:bg-neutral-50 focus:outline-none focus:ring-2'}"
							on:click={() => decrementQuantity(ticketType.id)}
							disabled={isDecrementDisabled(ticketType.id)}
							aria-label="Decrease quantity for {name}"
						>
							<Minus class="h-4 w-4" />
						</button>

						<!-- Quantity Display/Input -->
						<div class="quantity-display relative">
							<input
								type="number"
								class="quantity-input focus:ring-primary-500 focus:border-primary-500 h-8 w-16 rounded-md border border-neutral-300 text-center focus:outline-none focus:ring-2"
								value={quantity}
								min="0"
								max={maxQuantityPerType}
								disabled={disabled || isOtherSelected}
								on:input={(e) => handleInputChange(ticketType.id, e)}
								aria-label="Quantity for {name}"
							/>
						</div>

						<!-- Increment Button -->
						<button
							type="button"
							class="quantity-btn increment-btn flex h-8 w-8 items-center justify-center rounded-full border border-neutral-300 transition-colors
                                {isIncrementDisabled(ticketType.id)
								? 'cursor-not-allowed bg-neutral-100 text-neutral-400'
								: 'focus:ring-primary-500 bg-white text-neutral-700 hover:border-neutral-400 hover:bg-neutral-50 focus:outline-none focus:ring-2'}"
							on:click={() => incrementQuantity(ticketType.id)}
							disabled={isIncrementDisabled(ticketType.id)}
							aria-label="Increase quantity for {name}"
						>
							<Plus class="h-4 w-4" />
						</button>
					</div>

					<!-- Subtotal -->
					{#if quantity > 0}
						<div class="subtotal text-right">
							<div class="subtotal-amount text-primary-700 text-lg font-semibold">
								{formatPrice(subtotal)}
							</div>
							<div class="subtotal-label text-xs text-neutral-500">Subtotal</div>
						</div>
					{/if}
				</div>

				<!-- Quantity Info -->
				{#if quantity > 0}
					<div class="quantity-info bg-primary-50 mt-3 rounded-md p-2">
						<div class="text-primary-700 flex items-center justify-between text-xs">
							<span>Selected: {quantity} ticket{quantity !== 1 ? 's' : ''}</span>
							{#if ticketType.group_size && ticketType.group_size > 1}
								<span>Total people: {quantity * ticketType.group_size}</span>
							{/if}
						</div>
					</div>
				{/if}
			</div>
		{/each}
	</div>

	<!-- Booking Summary -->
	{#if $totalTickets > 0}
		<div class="booking-summary bg-primary-50 border-primary-200 mt-6 rounded-lg border p-4">
			<h4 class="summary-title text-primary-900 mb-3 text-lg font-semibold">Order Summary</h4>

			<div class="summary-details space-y-2">
				<!-- Selected Ticket Type -->
				{#if $selectedTicket}
					{@const selectedType = $availableTicketTypes.find((t) => t.id === $selectedTicket.id)}
					{#if selectedType}
						<div class="summary-row flex items-center justify-between text-sm">
							<span class="text-primary-800">
								{getLocalizedText(selectedType.name_translations, 'Ticket')}
							</span>
							<span class="text-primary-900 font-medium">
								{$selectedTicket.quantity} × {formatPrice(selectedType.price)}
							</span>
						</div>
					{/if}
				{/if}

				<!-- Total Price -->
				<div
					class="summary-row border-primary-200 flex items-center justify-between border-t pt-2 text-lg font-bold"
				>
					<span class="text-primary-900">Total:</span>
					<span class="text-primary-900">{formatPrice($totalPrice)}</span>
				</div>
			</div>

			<!-- Limits Warning -->
			{#if $totalTickets >= maxTotalTickets * 0.8}
				<div class="limits-warning bg-warning/10 border-warning/20 mt-3 rounded-md border p-2">
					<div class="flex items-center space-x-2">
						<Info class="text-warning h-4 w-4" />
						<span class="text-warning text-xs">
							Maximum {maxTotalTickets} tickets per booking
						</span>
					</div>
				</div>
			{/if}
		</div>
	{:else}
		<!-- Empty State -->
		<div
			class="empty-state mt-6 rounded-lg border-2 border-dashed border-neutral-300 bg-neutral-50 p-6 text-center"
		>
			<Ticket class="mx-auto mb-2 h-8 w-8 text-neutral-400" />
			<p class="text-neutral-600">No tickets selected</p>
			<p class="mt-1 text-sm text-neutral-500">Choose your ticket type above to continue</p>
		</div>
	{/if}
</div>

<style>
	/* Smooth transitions for all interactive elements */
	.quantity-btn,
	.quantity-input,
	.ticket-type-card {
		transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Hover effects for ticket cards */
	.ticket-type-card:hover:not(.opacity-60) {
		transform: translateY(-1px);
	}

	/* Focus ring for accessibility */
	.quantity-btn:focus-visible,
	.quantity-input:focus-visible {
		outline: 2px solid #2563eb;
		outline-offset: 2px;
	}

	/* Disabled state styling */
	.quantity-btn:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	/* Hide number input spinners on WebKit browsers */
	.quantity-input::-webkit-outer-spin-button,
	.quantity-input::-webkit-inner-spin-button {
		-webkit-appearance: none;
		margin: 0;
	}

	/* Hide number input spinners on Firefox */
	.quantity-input[type='number'] {
		-moz-appearance: textfield;
	}

	/* Mobile responsive adjustments */
	@media (max-width: 640px) {
		.ticket-header {
			flex-direction: column;
			align-items: start;
		}

		.price-info {
			margin-top: 0.5rem;
			text-align: left;
		}

		.quantity-controls {
			flex-direction: column;
			align-items: start;
			gap: 1rem;
		}
	}

	/* Animation for subtotal appearance */
	.subtotal {
		animation: slideIn 0.3s ease-out;
	}

	@keyframes slideIn {
		from {
			opacity: 0;
			transform: translateX(10px);
		}
		to {
			opacity: 1;
			transform: translateX(0);
		}
	}

	/* Visual feedback for selected ticket */
	.ticket-type-card.border-primary-300 {
		box-shadow: 0 0 0 1px rgb(147 197 253 / 0.5);
	}
</style>



================================================================================
File: src/lib/components/TimeSlotPicker.svelte
================================================================================

<!--
@file TimeSlotPicker Component - Time slot selection for museum visits
@description 
Interactive component for selecting available time slots for museum visits.
Displays capacity information and handles loading states.

Key features:
- Real-time availability display
- Capacity indicators with visual cues
- Loading states during API calls
- Responsive grid layout
- Accessibility support
- Integration with booking store

@dependencies
- Svelte 5: For reactive state management with runes
- Lucide Icons: For time and capacity indicators
- Tailwind CSS: For styling and responsive design
- bookingStore: For time slot state management

@notes
- Time slots are fetched based on selected date and ticket type
- Capacity is shown as available/total format
- Fully booked slots are visually disabled
- Times are displayed in user's local timezone
- Supports both click and keyboard interaction
-->

<script lang="ts">
	import { Clock, Users, AlertCircle, Loader2 } from 'lucide-svelte';
	import {
		selectedDate,
		selectedTimeSlot,
		availableTimeSlots,
		isLoadingTimeSlots,
		bookingError,
		totalTickets,
		bookingActions
	} from '$lib/stores/bookingStore';

	import type { TimeSlot } from '$lib/stores/bookingStore';

	// Type definitions
	interface Props {
		class?: string;
		disabled?: boolean;
		showCapacity?: boolean;
	}

	// Props for customization
	let { class: className = '', disabled = false, showCapacity = true }: Props = $props();

	// Format time for display
	function formatTime(timeString: string): string {
		const date = new Date(timeString);
		return date.toLocaleTimeString('en', {
			hour: '2-digit',
			minute: '2-digit',
			hour12: true
		});
	}

	// Format time range for display
	function formatTimeRange(startTime: string, endTime: string): string {
		return `${formatTime(startTime)} - ${formatTime(endTime)}`;
	}

	// Check if a time slot is selectable
	function isSlotSelectable(timeSlot: TimeSlot): boolean {
		if (disabled) return false;
		if (timeSlot.available_slots <= 0) return false;

		const currentTickets: number = $totalTickets;
		return timeSlot.available_slots >= currentTickets;
	}

	// Get capacity status for styling
	function getCapacityStatus(timeSlot: TimeSlot): 'full' | 'low' | 'medium' | 'high' {
		const availableRatio = timeSlot.available_slots / timeSlot.capacity;

		if (timeSlot.available_slots <= 0) return 'full';
		if (availableRatio <= 0.2) return 'low';
		if (availableRatio <= 0.5) return 'medium';
		return 'high';
	}

	// Get capacity color classes
	function getCapacityClasses(status: string): string {
		switch (status) {
			case 'full':
				return 'text-error bg-error/10 border-error/20';
			case 'low':
				return 'text-warning bg-warning/10 border-warning/20';
			case 'medium':
				return 'text-accent-600 bg-accent-50 border-accent-200';
			case 'high':
				return 'text-success bg-success/10 border-success/20';
			default:
				return 'text-neutral-600 bg-neutral-50 border-neutral-200';
		}
	}

	// Handle time slot selection
	function selectTimeSlot(timeSlot: TimeSlot): void {
		if (!isSlotSelectable(timeSlot)) return;
		bookingActions.setSelectedTimeSlot(timeSlot);
	}

	// Keyboard navigation
	function handleKeydown(event: KeyboardEvent, timeSlot: TimeSlot): void {
		if (event.key === 'Enter' || event.key === ' ') {
			event.preventDefault();
			selectTimeSlot(timeSlot);
		}
	}
</script>

<div class="time-slot-picker {className}">
	<!-- Header -->
	<div class="header mb-4">
		<div class="mb-2 flex items-center space-x-2">
			<Clock class="text-primary-600 h-5 w-5" />
			<h3 class="text-lg font-semibold text-neutral-900">Select Time Slot</h3>
		</div>

		{#if $selectedDate}
			<p class="text-sm text-neutral-600">
				Available times for {$selectedDate.toLocaleDateString('en', {
					weekday: 'long',
					year: 'numeric',
					month: 'long',
					day: 'numeric'
				})}
			</p>
		{/if}
	</div>

	<!-- Loading State -->
	{#if $isLoadingTimeSlots}
		<div class="loading-state flex flex-col items-center justify-center space-y-3 py-12">
			<Loader2 class="text-primary-600 h-8 w-8 animate-spin" />
			<p class="text-neutral-600">Loading available time slots...</p>
		</div>

		<!-- Error State -->
	{:else if $bookingError}
		<div class="error-state flex flex-col items-center justify-center space-y-3 py-12">
			<AlertCircle class="text-error h-8 w-8" />
			<p class="text-error text-center">{$bookingError}</p>
			<button
				type="button"
				class="btn-secondary text-sm"
				on:click={() => bookingActions.clearErrors()}
			>
				Try Again
			</button>
		</div>

		<!-- No Date Selected -->
	{:else if !$selectedDate}
		<div
			class="empty-state flex flex-col items-center justify-center space-y-3 rounded-lg border-2 border-dashed border-neutral-300 bg-neutral-50 py-12"
		>
			<Clock class="h-8 w-8 text-neutral-400" />
			<p class="text-center text-neutral-600">Please select a date to view available time slots</p>
		</div>

		<!-- No Time Slots Available -->
	{:else if $availableTimeSlots.length === 0}
		<div
			class="empty-state flex flex-col items-center justify-center space-y-3 rounded-lg border border-neutral-200 bg-neutral-50 py-12"
		>
			<AlertCircle class="h-8 w-8 text-neutral-400" />
			<p class="text-center text-neutral-600">No time slots available for the selected date</p>
			<p class="text-center text-sm text-neutral-500">
				Please choose a different date or check back later
			</p>
		</div>

		<!-- Time Slots Grid -->
	{:else}
		<div class="time-slots-grid grid gap-3 sm:grid-cols-2 lg:grid-cols-3">
			{#each $availableTimeSlots as timeSlot (timeSlot.id)}
				{@const isSelected = $selectedTimeSlot?.id === timeSlot.id}
				{@const isSelectable = isSlotSelectable(timeSlot)}
				{@const capacityStatus = getCapacityStatus(timeSlot)}
				{@const capacityClasses = getCapacityClasses(capacityStatus)}

				<button
					type="button"
					class="time-slot-card focus:ring-primary-500 relative rounded-lg border-2 p-4 text-left transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-1
                        {isSelected
						? 'border-primary-600 bg-primary-50 shadow-md'
						: isSelectable
							? 'hover:border-primary-300 hover:shadow-medium border-neutral-200 bg-white hover:-translate-y-0.5'
							: 'cursor-not-allowed border-neutral-200 bg-neutral-50 opacity-60'}"
					on:click={() => selectTimeSlot(timeSlot)}
					on:keydown={(e) => handleKeydown(e, timeSlot)}
					disabled={!isSelectable}
					aria-label="Select time slot {formatTimeRange(timeSlot.start_time, timeSlot.end_time)}"
					aria-selected={isSelected}
				>
					<!-- Time Range -->
					<div class="time-range mb-2">
						<div class="text-lg font-semibold text-neutral-900">
							{formatTimeRange(timeSlot.start_time, timeSlot.end_time)}
						</div>
					</div>

					<!-- Capacity Information -->
					{#if showCapacity}
						<div class="capacity-info flex items-center justify-between">
							<div class="flex items-center space-x-1">
								<Users class="h-4 w-4 text-neutral-500" />
								<span class="text-sm text-neutral-600"> Capacity </span>
							</div>

							<div
								class="capacity-badge rounded-full border px-2 py-1 text-xs font-medium {capacityClasses}"
							>
								{timeSlot.available_slots}/{timeSlot.capacity}
							</div>
						</div>
					{/if}

					<!-- Status Indicators -->
					<div class="status-indicators mt-3 flex items-center justify-between">
						<!-- Availability Status -->
						<div class="availability-status text-xs">
							{#if capacityStatus === 'full'}
								<span class="text-error font-medium">Fully Booked</span>
							{:else if capacityStatus === 'low'}
								<span class="text-warning font-medium">Few Spots Left</span>
							{:else if capacityStatus === 'medium'}
								<span class="text-accent-600 font-medium">Good Availability</span>
							{:else}
								<span class="text-success font-medium">Available</span>
							{/if}
						</div>

						<!-- Selection Indicator -->
						{#if isSelected}
							<div class="selection-indicator bg-primary-600 h-2 w-2 rounded-full"></div>
						{/if}
					</div>

					<!-- Insufficient Capacity Warning -->
					{#if $totalTickets > 0 && timeSlot.available_slots < $totalTickets && timeSlot.available_slots > 0}
						<div
							class="capacity-warning bg-warning/10 border-warning/20 mt-2 rounded-md border p-2"
						>
							<p class="text-warning text-xs">
								Only {timeSlot.available_slots} spots available (you need {$totalTickets})
							</p>
						</div>
					{/if}
				</button>
			{/each}
		</div>

		<!-- Selected Time Slot Summary -->
		{#if $selectedTimeSlot}
			<div class="selected-summary bg-primary-50 border-primary-200 mt-6 rounded-lg border p-4">
				<div class="mb-2 flex items-center space-x-2">
					<Clock class="text-primary-600 h-4 w-4" />
					<span class="text-primary-900 font-medium">Selected Time Slot</span>
				</div>
				<p class="text-primary-800">
					{formatTimeRange($selectedTimeSlot.start_time, $selectedTimeSlot.end_time)}
				</p>
				<p class="text-primary-700 mt-1 text-sm">
					{$selectedTimeSlot.available_slots} spots available
				</p>
			</div>
		{/if}
	{/if}
</div>

<style>
	/* Hover animations for selectable time slots */
	.time-slot-card:not(:disabled):hover {
		transform: translateY(-2px);
	}

	/* Focus ring for accessibility */
	.time-slot-card:focus {
		outline: 2px solid #2563eb;
		outline-offset: 2px;
	}

	/* Smooth transitions */
	.time-slot-card {
		transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
	}

	/* Mobile responsive adjustments */
	@media (max-width: 640px) {
		.time-slots-grid {
			grid-template-columns: 1fr;
		}

		.time-slot-card {
			padding: 1rem;
		}
	}

	/* Capacity badge animation */
	.capacity-badge {
		transition: all 0.2s ease-in-out;
	}

	/* Selection indicator pulse animation */
	.selection-indicator {
		animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
	}

	@keyframes pulse {
		0%,
		100% {
			opacity: 1;
		}
		50% {
			opacity: 0.5;
		}
	}
</style>



================================================================================
File: src/lib/components/ui/Alert.svelte
================================================================================

<!--
/**
 * @file Alert.svelte
 * @description A reusable alert component for displaying messages.
 *
 * @props
 * - type (string, default 'info'): The type of alert ('info', 'success', 'warning', 'error').
 * - message (string, required): The message to display in the alert.
 * - class (string, default ''): Additional CSS classes to apply to the alert.
 * - show (boolean, default true): Controls the visibility of the alert.
 *
 * @slots
 * - icon: Optional slot for a custom icon.
 *
 * @notes
 * - Uses Tailwind CSS for styling.
 * - Automatically selects icon and colors based on the type.
 */
-->
<script lang="ts">
	interface $$Props {
		type?: 'info' | 'success' | 'warning' | 'error';
		message: string;
		class?: string;
		show?: boolean;
	}

	let { type = 'info', message, class: customClass = '', show = true }: $$Props = $props();

	const alertStyles = {
		info: {
			bg: 'bg-blue-900 border-blue-700',
			text: 'text-blue-300',
			icon: `M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon information-circle
		},
		success: {
			bg: 'bg-green-900 border-green-700',
			text: 'text-green-300',
			icon: `M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon check-circle
		},
		warning: {
			bg: 'bg-yellow-900 border-yellow-700',
			text: 'text-yellow-300',
			icon: `M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z` // Heroicon exclamation
		},
		error: {
			bg: 'bg-red-900 border-red-700',
			text: 'text-red-300',
			icon: `M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z` // Heroicon x-circle
		}
	};

	let currentStyle = $derived(alertStyles[type]);
</script>

{#if show && message}
	<div
		class="mb-4 rounded-md border p-4 {currentStyle.bg} {currentStyle.text} {customClass}"
		role="alert"
	>
		<div class="flex items-center">
			<slot name="icon">
				<svg
					xmlns="http://www.w3.org/2000/svg"
					class="mr-2 h-5 w-5"
					fill="none"
					viewBox="0 0 24 24"
					stroke="currentColor"
				>
					<path
						stroke-linecap="round"
						stroke-linejoin="round"
						stroke-width="2"
						d={currentStyle.icon}
					/>
				</svg>
			</slot>
			<span class="font-medium">{message}</span>
		</div>
	</div>
{/if}



================================================================================
File: src/lib/components/ui/Button.svelte
================================================================================

<!-- Button.svelte -->
<script lang="ts">
	import type { HTMLButtonAttributes } from 'svelte/elements';

	interface $$Props extends HTMLButtonAttributes {
		type?: 'button' | 'submit' | 'reset';
		disabled?: boolean;
		loading?: boolean;
		class?: string;
		variant?: 'primary' | 'secondary' | 'danger' | 'outline' | 'link';
		size?: 'sm' | 'md' | 'lg';
	}

	let {
		type = 'button',
		disabled = false,
		loading = false,
		class: customClass = '',
		variant = 'primary',
		size = 'md',
		...restProps
	}: $$Props = $props();

	const baseClasses =
		'font-medium rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 transition ease-in-out duration-150 flex items-center justify-center';

	const sizeClasses = {
		sm: 'px-3 py-1.5 text-xs',
		md: 'px-4 py-2 text-sm',
		lg: 'px-6 py-3 text-base'
	};

	const variantClasses = {
		primary: 'bg-blue-600 text-white hover:bg-blue-700 focus:ring-blue-500',
		secondary: 'bg-gray-600 text-white hover:bg-gray-700 focus:ring-gray-500',
		danger: 'bg-red-600 text-white hover:bg-red-700 focus:ring-red-500',
		outline: 'border border-gray-500 text-gray-300 hover:bg-gray-700 focus:ring-gray-500',
		link: 'text-blue-400 hover:text-blue-300 underline focus:ring-blue-500 p-0'
	};

	let isDisabled = $derived(disabled || loading);
</script>

<button
	{type}
	disabled={isDisabled}
	class="{baseClasses} {sizeClasses[size]} {variantClasses[variant]} {isDisabled
		? 'cursor-not-allowed opacity-50'
		: ''} {customClass}"
	on:click
	{...restProps}
>
	{#if loading}
		<svg
			class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
			xmlns="http://www.w3.org/2000/svg"
			fill="none"
			viewBox="0 0 24 24"
		>
			<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"
			></circle>
			<path
				class="opacity-75"
				fill="currentColor"
				d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
			></path>
		</svg>
	{:else}
		<slot />
	{/if}
</button>



================================================================================
File: src/lib/components/ui/Input.svelte
================================================================================

<!--
  /**
   * @file Input.svelte
   * @description A reusable input component for forms.
   *
   * @props
   * - type (string, default 'text'): The type of the input (e.g., 'text', 'email', 'password').
   * - id (string, required): The ID of the input, used for associating with a label.
   * - name (string, optional): The name of the input, useful for form submission. Defaults to id if not provided.
   * - label (string, optional): The label text to display for the input.
   * - placeholder (string, default ''): The placeholder text for the input.
   * - value (string, default '', bindable): The current value of the input. Two-way bindable using `bind:value`.
   * - required (boolean, default false): Whether the input is required.
   * - disabled (boolean, default false): Whether the input is disabled.
   * - class (string, default ''): Additional CSS classes to apply to the input wrapper.
   * - inputClass (string, default ''): Additional CSS classes to apply directly to the input element.
   * - labelClass (string, default ''): Additional CSS classes to apply directly to the label element.
   *
   * @events
   * - input: Fired when the input value changes. The event detail contains the new value.
   * - change: Fired when the input value changes and the element loses focus.
   * - blur: Fired when the input loses focus.
   * - focus: Fired when the input gains focus.
   *
   * @notes
   * - Uses Tailwind CSS for styling.
   * - Supports Svelte 5 runes for two-way binding with `bind:value`.
   * - The `value` prop is made bindable using `$bindable()`.
   */
  -->
<script lang="ts">
	import type { HTMLInputAttributes } from 'svelte/elements';

	interface $$Props extends Omit<HTMLInputAttributes, 'value'> {
		// Omit original value from HTMLInputAttributes
		type?: 'text' | 'email' | 'password' | 'number' | 'search' | 'tel' | 'url';
		id: string;
		name?: string;
		label?: string;
		placeholder?: string;
		value?: string; // This will be the prop passed in for binding
		required?: boolean;
		disabled?: boolean;
		class?: string; // For the wrapper div
		inputClass?: string;
		labelClass?: string;
	}

	let {
		type = 'text',
		id,
		name = id,
		label = '',
		placeholder = '',
		value: initialValue = $bindable(''), // Use $bindable() for the prop intended for two-way binding
		required = false,
		disabled = false,
		class: wrapperClass = '',
		inputClass = '',
		labelClass = '',
		...restProps
	}: $$Props = $props();

	// The `initialValue` prop, which is now bindable, will automatically update
	// when `bind:value` is used on the component instance.
	// No need for an internal $state variable for `value` that mirrors the prop if using $bindable directly with the prop name.
	// The `value` in `<input bind:value... />` will now directly bind to the `initialValue` prop.
</script>

<div class="mb-4 {wrapperClass}">
	{#if label}
		<label for={id} class="mb-1 block text-sm font-medium text-gray-300 {labelClass}">
			{label}
			{#if required}<span class="text-red-500">*</span>{/if}
		</label>
	{/if}
	<input
		{type}
		{id}
		{name}
		{placeholder}
		bind:value={initialValue}
		{required}
		{disabled}
		class="w-full rounded-md border border-gray-600 bg-gray-700 px-3 py-2 text-white placeholder-gray-400 focus:border-blue-500 focus:ring-2 focus:ring-blue-500 focus:outline-none {inputClass}"
		on:input
		on:change
		on:blur
		on:focus
		on:keydown
		on:keyup
		on:keypress
		{...restProps}
	/>
</div>



================================================================================
File: src/lib/index.ts
================================================================================

// place files you want to import through the `$lib` alias in this folder.



================================================================================
File: src/lib/schemas/payment.ts
================================================================================

/**
* @file frontend/src/lib/schemas/payment.ts
* @purpose Defines TypeScript types that correspond to the backend's payment-related Pydantic schemas.
*
* @dependencies
* - None
*
* @notes
* - These types ensure that the data sent from the SvelteKit frontend to the FastAPI backend matches the expected structure for creating payment intents.
* - This file centralizes payment-related type definitions for easy maintenance and type safety across the frontend application.
*/



/**
     * Mirrors the backend's `BookingCreate` schema.
     * Used when a booking is part of the checkout payload.
     */
export interface BookingCreate {
    time_slot_id: string; // UUID
    quantity: number;
    customer_name: string;
    customer_email: string;
    user_id?: string; // Optional UUID
}

/**
 * Mirrors the backend's `MerchandiseOrderItemCreate` schema.
 * Represents a single type of merchandise item in the cart.
 */
export interface MerchandiseOrderItemCreate {
    merchandise_id: string; // UUID
    quantity: number;
}

/**
 * Mirrors the backend's `OrderCreatePayload` schema.
 * This is the main data structure sent to the `create-payment-intent` endpoint.
 */
export interface OrderCreatePayload {
    booking?: BookingCreate;
    merchandise_items?: MerchandiseOrderItemCreate[];
    customer_name?: string;
    customer_email?: string;
}


================================================================================
File: src/lib/stores/authStore.ts
================================================================================

/**
 * @file Authentication Store (authStore.ts)
 * @description Manages the application's authentication state using Svelte stores
 * and interacts with the Supabase client-side auth events.
 *
 * @dependencies
 * - svelte/store: Provides `writable`, `get` for creating/accessing reactive stores.
 * - @supabase/supabase-js: Provides `Session` type.
 * - $lib/utils/supabaseClient: Provides the client-side Supabase instance.
 */

import { writable, type Writable, get } from 'svelte/store'; // Import get
import type { Session } from '@supabase/supabase-js';
import { supabase } from '$lib/utils/supabaseClient';

// --- Stores ---

/**
 * Writable store holding the current authenticated session object.
 * Null if the user is not logged in. Components can subscribe to this
 * to reactively update based on auth state using the $ prefix (e.g., $sessionStore).
 */
export const sessionStore: Writable<Session | null> = writable(null);

/**
 * Writable store indicating if the initial auth check (on page load/app start)
 * has completed. Useful for preventing UI flashes or premature redirects.
 */
export const authReady: Writable<boolean> = writable(false);


// --- Initialization ---

let authListenerInitialized = false;
let unsubscribe: (() => void) | null = null;

/**
 * Initializes the Supabase auth state change listener.
 * This should be called ONCE when the application root mounts client-side.
 * It listens for SIGNED_IN, SIGNED_OUT, TOKEN_REFRESHED events and updates
 * the sessionStore accordingly. It also sets authReady to true once the
 * initial session state is determined.
 *
 * @returns {() => void} A function to unsubscribe the listener.
 **/
export function initializeAuthListener(): () => void {
    console.log('[AuthStore] Attempting to initialize auth listener...');

    if (authListenerInitialized && unsubscribe) {
        console.log('[AuthStore] Listener already initialized.');
        return unsubscribe; // Return existing unsubscribe function
    }

    authListenerInitialized = true;

    // Immediately try to get the current session to set initial state
    supabase.auth.getSession().then(({ data }) => {
        console.log('[AuthStore] Initial session fetched client-side:', data.session ? data.session.user.id : 'null');
        // Only set the store if auth isn't already marked as ready by the listener firing first
        if (!get(authReady)) {
            sessionStore.set(data.session);
        }
        // Mark auth as ready only after attempting to get the initial session
        authReady.set(true);
        console.log('[AuthStore] Auth ready.');
    }).catch((error) => {
        console.error('[AuthStore] Error fetching initial session:', error);
        // Still mark as ready even if error occurs, assuming no session
        if (!get(authReady)) {
            sessionStore.set(null);
        }
        authReady.set(true);
    });


    // Subscribe to auth state changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
        console.log(`[AuthStore onAuthStateChange] Event: ${event}`, session ? `User: ${session.user.id}` : 'No session');

        // Explicitly handle SIGNED_OUT
        if (event === 'SIGNED_OUT') {
            console.log('[AuthStore onAuthStateChange] SIGNED_OUT detected, setting store to null.');
            sessionStore.set(null);
        } else {
            // For SIGNED_IN, TOKEN_REFRESHED, USER_UPDATED etc., update with the provided session
            sessionStore.set(session);
        }

        // Ensure authReady is true after the first event fires as well
        if (!get(authReady)) {
            authReady.set(true);
        }
    });

    // Store the unsubscribe function for cleanup
    unsubscribe = subscription.unsubscribe;

    console.log('[AuthStore] Listener initialized.');
    return unsubscribe;
}

// --- Convenience Object (Optional) ---
// Export the stores directly. Components should use the $ prefix for auto-subscription.
export const authStore = {
    currentSession: sessionStore,
    ready: authReady
};


================================================================================
File: src/lib/stores/bookingStore.ts
================================================================================

/**
* @file Booking Store - Centralized state management for the booking process
* @description
* Manages the entire booking flow state using Svelte stores.
* Provides reactive state for date, time, ticket, and pricing.
* This version is refactored for simplicity and robustness, enforcing a single ticket type per booking
* to align with the backend API and simplify the user flow.
*
* @dependencies
* - Svelte: For reactive stores and state management.
* - apiClient: For fetching ticket types and availability data.
*
* @notes
* - Enforces a single ticket type selection model for clarity and API compatibility.
* - Time slots are now loaded on-demand after a date and ticket type have been selected.
* - State is reset hierarchically (e.g., changing date clears tickets and time) to ensure consistency.
* - Exports key interfaces like BookingSummary for use in other components.
*/



import { writable, derived, get, type Writable, type Readable } from 'svelte/store';
import { apiClient } from '$lib/api/apiClient';

// --- TYPE DEFINITIONS (EXPORTED FOR REUSE) ---

/** Represents the availability status of a date. */
export type DateAvailabilityStatus = 'available' | 'unavailable' | 'loading' | 'unknown';

/** Represents a ticket type available for booking. */
export interface TicketType {
    id: string;
    price: number;
    name_translations: Record<string, string>;
    [key: string]: any;
}

/** Represents an available time slot for a booking. */
export interface TimeSlot {
    id: string;
    start_time: string;
    end_time: string;
    available_slots: number;
    [key: string]: any;
}

/** Represents the currently selected ticket and its quantity. */
export interface SelectedTicket {
    id: string;
    quantity: number;
}

/** Represents customer details for guest bookings. */
export interface CustomerInfo {
    name: string;
    email: string;
    isGuest: boolean;
}

/** A map of validation error messages for the booking form. */
interface ValidationErrors {
    [key: string]: string | undefined;
    date?: string;
    timeSlot?: string;
    tickets?: string;
    name?: string;
    email?: string;
    capacity?: string;
}

/** A summary of a single ticket line item in the booking. */
interface TicketSummary {
    type: TicketType;
    quantity: number;
    subtotal: number;
}

/** A comprehensive summary of the entire current booking state. */
export interface BookingSummary {
    date: Date | null;
    timeSlot: TimeSlot | null;
    tickets: TicketSummary[];
    totalPrice: number;
    totalTickets: number;
    isComplete: boolean;
}

/** Data structure for the booking creation API payload. */
interface BookingData {
    time_slot_id: string;
    quantity: number;
    customer_name: string;
    customer_email: string;
    user_id?: string;
}

// --- CORE BOOKING STATE ---

export const selectedDate: Writable<Date | null> = writable(null);
export const selectedTimeSlot: Writable<TimeSlot | null> = writable(null);
export const selectedTicket: Writable<SelectedTicket | null> = writable(null);
export const availableTicketTypes: Writable<TicketType[]> = writable([]);
export const availableTimeSlots: Writable<TimeSlot[]> = writable([]);

export const customerInfo: Writable<CustomerInfo> = writable({
    name: '',
    email: '',
    isGuest: true
});

// --- NEW: STATE FOR DATE AVAILABILITY CACHE ---
/**
 * Caches the availability status of dates for each ticket type.
 * Structure: Map<ticketTypeId, Map<dateString (YYYY-MM-DD), DateAvailabilityStatus>>
 */
export const dateAvailability: Writable<Map<string, Map<string, DateAvailabilityStatus>>> = writable(new Map());

// --- LOADING AND ERROR STATES ---
export const isLoadingDateAvailability: Writable<boolean> = writable(false);
export const isLoadingTicketTypes: Writable<boolean> = writable(false);
export const isLoadingTimeSlots: Writable<boolean> = writable(false);
export const isCreatingBooking: Writable<boolean> = writable(false);
export const bookingError: Writable<string | null> = writable(null);
export const validationErrors: Writable<ValidationErrors> = writable({});

// --- DERIVED STORES FOR COMPUTED VALUES ---

/** Calculates the total price based on the selected ticket and quantity. */
export const totalPrice: Readable<number> = derived(
    [selectedTicket, availableTicketTypes],
    ([$selectedTicket, $availableTicketTypes]) => {
        if (!$selectedTicket) return 0;

        const ticketType = $availableTicketTypes.find(tt => tt.id === $selectedTicket.id);
        if (ticketType) {
            return ticketType.price * $selectedTicket.quantity;
        }
        return 0;
    }
);

/** Calculates the total number of tickets selected. */
export const totalTickets: Readable<number> = derived(
    selectedTicket,
    ($selectedTicket) => $selectedTicket?.quantity ?? 0
);

/** Creates a comprehensive summary of the current booking for display. */
export const bookingSummary: Readable<BookingSummary> = derived(
    [selectedDate, selectedTimeSlot, selectedTicket, availableTicketTypes, totalPrice, totalTickets],
    ([$selectedDate, $selectedTimeSlot, $selectedTicket, $availableTicketTypes, $totalPrice, $totalTickets]) => {
        const tickets: TicketSummary[] = [];

        if ($selectedTicket) {
            const ticketType = $availableTicketTypes.find(tt => tt.id === $selectedTicket.id);
            if (ticketType && $selectedTicket.quantity > 0) {
                tickets.push({
                    type: ticketType,
                    quantity: $selectedTicket.quantity,
                    subtotal: ticketType.price * $selectedTicket.quantity
                });
            }
        }

        return {
            date: $selectedDate,
            timeSlot: $selectedTimeSlot,
            tickets,
            totalPrice: $totalPrice,
            totalTickets: $totalTickets,
            isComplete: !!($selectedDate && $selectedTimeSlot && $totalTickets > 0 && get(customerInfo).name && get(customerInfo).email)
        };
    }
);

// --- BOOKING ACTIONS ---

export const bookingActions = {
    /**
     * Fetches and caches the availability of all days in a given month for a specific ticket type.
     * @param {string} ticketTypeId - The ID of the ticket type.
     * @param {number} year - The year to check.
     * @param {number} month - The month to check (0-indexed, e.g., 0 for January).
     * @param {typeof fetch} [customFetch=fetch] - Optional custom fetch for SSR.
     */
    async loadDateAvailabilityForTicket(
        ticketTypeId: string,
        year: number,
        month: number,
        customFetch: typeof fetch = fetch
    ): Promise<void> {
        isLoadingDateAvailability.set(true);

        const availabilityMap = get(dateAvailability).get(ticketTypeId) || new Map<string, DateAvailabilityStatus>();
        const daysInMonth = new Date(year, month + 1, 0).getDate();
        const promises: Promise<void>[] = [];

        for (let day = 1; day <= daysInMonth; day++) {
            const date = new Date(year, month, day);
            const dateString = date.toISOString().split('T')[0];

            if (availabilityMap.has(dateString)) continue;

            availabilityMap.set(dateString, 'loading');

            const promise = apiClient.getTimeSlots(ticketTypeId, dateString, customFetch)
                .then(timeSlots => {
                    availabilityMap.set(dateString, timeSlots && timeSlots.length > 0 ? 'available' : 'unavailable');
                })
                .catch(error => {
                    if (error instanceof Error && (error.message.includes('404') || error.message.includes('No time slots found'))) {
                        availabilityMap.set(dateString, 'unavailable');
                    } else {
                        console.error(`Failed to check availability for ${dateString}:`, error);
                        availabilityMap.set(dateString, 'unavailable');
                    }
                });

            promises.push(promise);
        }

        dateAvailability.update(mainMap => mainMap.set(ticketTypeId, availabilityMap));
        await Promise.allSettled(promises);
        dateAvailability.update(mainMap => mainMap.set(ticketTypeId, availabilityMap));
        isLoadingDateAvailability.set(false);
    },

    async loadTicketTypes(customFetch: typeof fetch = fetch): Promise<void> {
        isLoadingTicketTypes.set(true);
        bookingError.set(null);
        try {
            const ticketTypes: TicketType[] = await apiClient.getTicketTypes(customFetch);
            availableTicketTypes.set(ticketTypes);
        } catch (error) {
            console.error('Failed to load ticket types:', error);
            bookingError.set('Unable to load ticket types. Please try again.');
        } finally {
            isLoadingTicketTypes.set(false);
        }
    },

    /**
     * Loads available time slots based on the current date and ticket selection.
     * @param {typeof fetch} [customFetch=fetch] - Optional custom fetch for SSR.
     */
    async loadTimeSlotsForSelection(customFetch: typeof fetch = fetch): Promise<void> {
        const date = get(selectedDate);
        const ticket = get(selectedTicket);

        if (!date || !ticket) {
            availableTimeSlots.set([]);
            return;
        }

        isLoadingTimeSlots.set(true);
        bookingError.set(null);
        try {
            const dateString = date.toISOString().split('T')[0];
            const timeSlots: TimeSlot[] = await apiClient.getTimeSlots(ticket.id, dateString, customFetch);
            availableTimeSlots.set(timeSlots);

            const currentSlot = get(selectedTimeSlot);
            if (currentSlot && !timeSlots.find(slot => slot.id === currentSlot.id)) {
                selectedTimeSlot.set(null);
            }
        } catch (error) {
            console.error('Failed to load time slots:', error);
            if (error instanceof Error && error.message.includes('No time slots found')) {
                availableTimeSlots.set([]);
                bookingError.set('No available time slots for this date and ticket type. Please try a different date.');
            } else {
                bookingError.set('Unable to load available time slots. Please try again.');
                availableTimeSlots.set([]);
            }
        } finally {
            isLoadingTimeSlots.set(false);
        }
    },

    /**
     * Updates the selected ticket type and quantity. Replaces any existing selection.
     * @param {string} ticketTypeId - The ID of the ticket type.
     * @param {number} quantity - The new quantity.
     */
    updateTicketQuantity(ticketTypeId: string, quantity: number): void {
        const currentTicket = get(selectedTicket);
        if (quantity > 0) {
            selectedTicket.set({ id: ticketTypeId, quantity });
        } else {
            selectedTicket.set(null);
        }
        if (currentTicket?.id !== ticketTypeId) {
            dateAvailability.set(new Map());
        }
        selectedTimeSlot.set(null);
        availableTimeSlots.set([]);
        validationErrors.update(current => ({ ...current, tickets: undefined, capacity: undefined }));
    },

    /**
     * Sets the selected date and clears dependent state (time slot).
     * @param {Date} date - The selected date.
     */
    setSelectedDate(date: Date): void {
        selectedDate.set(date);
        selectedTimeSlot.set(null);
        availableTimeSlots.set([]);
        validationErrors.update(current => ({ ...current, date: undefined }));
    },

    /**
     * Sets the selected time slot.
     * @param {TimeSlot} timeSlot - The selected time slot object.
     */
    setSelectedTimeSlot(timeSlot: TimeSlot): void {
        selectedTimeSlot.set(timeSlot);
        validationErrors.update(current => ({ ...current, timeSlot: undefined, capacity: undefined }));
    },

    /**
     * Updates customer information for guest bookings.
     * @param {Partial<CustomerInfo>} info - Partial customer information.
     */
    updateCustomerInfo(info: Partial<CustomerInfo>): void {
        customerInfo.update(current => ({ ...current, ...info }));
        validationErrors.update(current => ({ ...current, name: undefined, email: undefined }));
    },

    /**
     * Validates the entire booking state before proceeding to payment.
     * @returns {boolean} - True if the booking is valid.
     */
    validateBooking(): boolean {
        const errors: ValidationErrors = {};
        const summary = get(bookingSummary);
        const customer = get(customerInfo);

        if (!summary.date) errors.date = 'Please select a visit date';
        if (summary.totalTickets === 0) errors.tickets = 'Please select a ticket';
        if (!summary.timeSlot) errors.timeSlot = 'Please select a time slot';

        if (customer.isGuest) {
            if (!customer.name || customer.name.trim().length < 2) errors.name = 'Please enter a valid name';
            if (!customer.email || !customer.email.includes('@')) errors.email = 'Please enter a valid email address';
        }

        if (summary.timeSlot && summary.totalTickets > summary.timeSlot.available_slots) {
            errors.capacity = `Only ${summary.timeSlot.available_slots} tickets are available for this slot.`;
        }

        validationErrors.set(errors);
        return Object.keys(errors).length === 0;
    },

    /**
     * This method is now DEPRECATED in favor of creating a full order payload for the
     * `/payments/create-payment-intent` endpoint. A standalone booking creation via the
     * frontend is no longer the standard flow.
     * This function is maintained for potential direct use or testing but should not be
     * part of the main checkout flow.
     */
    async createBooking(customFetch: typeof fetch = fetch): Promise<any> {
        if (!this.validateBooking()) {
            const errorMsg = 'Please correct the validation errors before proceeding.';
            bookingError.set(errorMsg);
            throw new Error(errorMsg);
        }

        isCreatingBooking.set(true);
        bookingError.set(null);

        try {
            const summary = get(bookingSummary);
            const customer = get(customerInfo);
            const ticket = get(selectedTicket);

            const bookingData: BookingData = {
                time_slot_id: summary.timeSlot!.id,
                quantity: ticket!.quantity,
                customer_name: customer.name,
                customer_email: customer.email,
            };

            // The standalone booking endpoint is no longer the primary path.
            // This demonstrates how it *would* work if needed.
            console.warn("Using deprecated createBooking flow. The standard flow is via the checkout/payment intent page.");
            const booking = await apiClient.createBooking(bookingData, customFetch);
            // In a real scenario, we might reset state here.
            // this.resetBooking();
            return booking;
        } catch (error) {
            console.error('Failed to create booking:', error);
            const errorMsg = 'An error occurred while creating your booking. Please try again.';
            bookingError.set(errorMsg);
            throw error;
        } finally {
            isCreatingBooking.set(false);
        }
    },

    /**
     * Resets all booking state to initial values for a new booking.
     * Also clears associated validation and error messages.
     */
    resetBooking(): void {
        selectedDate.set(null);
        selectedTimeSlot.set(null);
        selectedTicket.set(null);
        availableTimeSlots.set([]);
        customerInfo.set({ name: '', email: '', isGuest: true });
        bookingError.set(null);
        validationErrors.set({});
    },

    /** Clears all error states from the store. */
    clearErrors(): void {
        bookingError.set(null);
        validationErrors.set({});
    }
};


================================================================================
File: src/lib/stores/cartStore.ts
================================================================================

/**
    * @file cartStore.ts
    * @purpose Manages the state of the user's shopping cart for merchandise.
    * 
    * @dependencies
    * - svelte/store: For creating writable and derived stores.
    * - $lib/api/apiClient: For the Merchandise type definition.
    *
    * @notes
    * - The cart state is persisted to `localStorage` to survive page reloads and new sessions.
    * - It provides reactive derived stores for `cartCount` and `cartTotal` for easy display in the UI.
    * - All interactions with the cart (add, remove, update) are handled through exported functions.
    * - Error handling: Assumes valid product data is passed in; validation should occur at the component level.
    */

import { writable, derived, type Writable } from 'svelte/store';
import type { Merchandise } from '$lib/api/apiClient';

/** Defines the structure of an item within the shopping cart. */
export interface CartItem extends Merchandise {
    quantity: number;
}

const CART_STORAGE_KEY = 'zungri-museum-cart';

/**
 * Creates a Svelte store for the shopping cart that automatically
 * synchronizes its state with the browser's localStorage.
 * @returns An object with store subscription and action methods.
 */
function createCartStore() {
    const isBrowser = typeof window !== 'undefined';
    const initialValue: CartItem[] = isBrowser
        ? JSON.parse(localStorage.getItem(CART_STORAGE_KEY) || '[]')
        : [];

    const store: Writable<CartItem[]> = writable(initialValue);

    // If in a browser environment, subscribe to the store to update localStorage on any change.
    if (isBrowser) {
        store.subscribe((value) => {
            localStorage.setItem(CART_STORAGE_KEY, JSON.stringify(value));
        });
    }

    /**
     * Adds a product to the cart or increments its quantity if it already exists.
     * @param product The merchandise item to add.
     * @param quantity The number of items to add. Defaults to 1.
     */
    function addToCart(product: Merchandise, quantity = 1) {
        store.update((items) => {
            const existingItem = items.find((item) => item.id === product.id);
            if (existingItem) {
                // Update quantity if item already in cart
                existingItem.quantity = Math.min(existingItem.quantity + quantity, product.inventory);
            } else {
                // Add new item to cart
                items.push({ ...product, quantity });
            }
            return items;
        });
    }

    /**
     * Removes an item entirely from the cart.
     * @param productId The ID of the product to remove.
     */
    function removeFromCart(productId: string) {
        store.update((items) => items.filter((item) => item.id !== productId));
    }

    /**
     * Updates the quantity of a specific item in the cart.
     * If quantity is 0 or less, the item is removed.
     * @param productId The ID of the product to update.
     * @param quantity The new quantity.
     */
    function updateQuantity(productId: string, quantity: number) {
        store.update((items) => {
            if (quantity <= 0) {
                return items.filter((item) => item.id !== productId);
            }
            const itemToUpdate = items.find((item) => item.id === productId);
            if (itemToUpdate) {
                itemToUpdate.quantity = Math.min(quantity, itemToUpdate.inventory);
            }
            return items;
        });
    }

    /** Empties the entire cart. */
    function clearCart() {
        store.set([]);
    }

    return {
        subscribe: store.subscribe,
        addToCart,
        removeFromCart,
        updateQuantity,
        clearCart
    };
}

/** The main cart store instance. */
export const cart = createCartStore();

/** A derived store that calculates the total number of items in the cart. */
export const cartCount = derived(cart, ($cart) => {
    return $cart.reduce((total, item) => total + item.quantity, 0);
});

/** A derived store that calculates the total price of all items in the cart. */
export const cartTotal = derived(cart, ($cart) => {
    return $cart.reduce((total, item) => total + item.price * item.quantity, 0);
});


================================================================================
File: src/lib/utils/session.ts
================================================================================

/**
        * @file session.ts
        * @purpose Session management utilities
        * 
        * @dependencies
        * - $app/stores: SvelteKit session store
        *
        * @notes
        * - Provides reactive session access
        * - Handles session state changes
        */

import { session as svelteSession } from '$app/stores';
import { derived } from 'svelte/store';

export const session = derived(svelteSession, ($session) => {
    return $session.data?.session || null;
});


================================================================================
File: src/lib/utils/supabaseClient.ts
================================================================================

/**
 * @file supabaseClient.ts
 * @purpose Creates and exports the Supabase client instance for client-side usage
 * 
 * @dependencies
 * - @supabase/supabase-js: Provides Supabase client functionality
 * - $env/static/public: Access to public environment variables
 *
 * @notes
 * - Uses PUBLIC_SUPABASE_URL and PUBLIC_SUPABASE_ANON_KEY from environment
 * - Singleton pattern ensures only one instance is created
 */

import { createClient } from '@supabase/supabase-js';
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';

// Create and export the Supabase client
export const supabase = createClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
    auth: {
        persistSession: true,
        autoRefreshToken: true,
        detectSessionInUrl: true,
    }
});


================================================================================
File: src/lib/utils/supabaseServer.ts
================================================================================

/**
        * @file supabaseServer.ts
        * @purpose Creates server-side Supabase client with proper session handling
        * 
        * @dependencies
        * - @supabase/ssr: Server-side Supabase utilities
        * - cookie: Cookie parsing library
        * - $env/static/public: Public environment variables
        *
        * @notes
        * - Handles cookie-based authentication for server-side operations
        * - Properly manages session tokens
        */

import { createServerClient } from '@supabase/ssr';
import { cookies } from 'next/headers';
import { PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY } from '$env/static/public';

export function createSupabaseServerClient() {
    const cookieStore = cookies();

    return createServerClient(
        PUBLIC_SUPABASE_URL,
        PUBLIC_SUPABASE_ANON_KEY,
        {
            cookies: {
                get(name: string) {
                    return cookieStore.get(name)?.value;
                },
                set(name: string, value: string, options) {
                    cookieStore.set({ name, value, ...options });
                },
                remove(name: string, options) {
                    cookieStore.set({ name, value: '', ...options });
                },
            },
        }
    );
}


================================================================================
File: src/routes/+layout.server.ts
================================================================================

import type { LayoutServerLoad } from './$types';

/**
 * @file Root server layout loader for the Zungri Museum application.
 * @description This function runs on the server for every request and loads
 * essential data that is available to all pages. It primarily deals with
 * session and user authentication state.
 *
 * @param {object} event - The SvelteKit load event.
 * @returns {Promise<object>} An object containing session and user data.
 * This data is merged into the `data` prop available in all layouts and pages.
 */
export const load: LayoutServerLoad = async ({ locals: { session, user } }) => {
    return {
        session,
        user
    };
};


================================================================================
File: src/routes/+layout.svelte
================================================================================

<!--
/**
 * @file +layout.svelte (Root Layout)
 * @description The main layout for the entire Zungri Museum application.
 * Includes global styles, fonts, authentication setup, and the main
 * page structure with header and footer.
 *
 * Key features:
 * - Global CSS and font imports
 * - Supabase authentication listener initialization
 * - Main site header and footer
 * - Responsive layout structure
 * - Authentication state management
 *
 * @dependencies
 * - $lib/stores/authStore: Authentication state management
 * - $lib/components/Header.svelte: Main navigation header
 * - $lib/components/Footer.svelte: Site footer
 * - ../app.css: Global styles including Tailwind
 *
 * @notes
 * - Initializes auth listener once on client mount
 * - Uses Svelte 5 $effect for lifecycle management
 * - Provides consistent layout for all pages
 * - Handles authentication cleanup on unmount
 */
-->
<script lang="ts">
	import '../app.css'; // Global styles including Tailwind
	import { initializeAuthListener } from '$lib/stores/authStore';
	import Header from '$lib/components/Header.svelte';
	import Footer from '$lib/components/Footer.svelte';

	let { children } = $props();

	// Initialize the Supabase auth listener when the component mounts on the client
	$effect(() => {
		const unsubscribe = initializeAuthListener();
		return () => {
			if (unsubscribe) {
				unsubscribe();
			}
		};
	});
</script>

<!-- Page structure with header, main content, and footer -->
<div class="flex min-h-screen flex-col bg-gray-50">
	<!-- Main site header with navigation -->
	<Header />

	<!-- Main content area -->
	<main class="flex-grow">
		{@render children()}
	</main>

	<!-- Site footer -->
	<Footer />
</div>

<!-- Global styles -->
<style>
	:global(body) {
		font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;
		line-height: 1.6;
	}

	:global(h1, h2, h3, h4, h5, h6) {
		font-family: 'Poppins', 'Inter', 'Segoe UI', sans-serif;
		font-weight: 600;
		line-height: 1.3;
	}

	/* Smooth scroll behavior */
	:global(html) {
		scroll-behavior: smooth;
	}

	/* Focus styles for accessibility */
	:global(*:focus) {
		outline: 2px solid #3b82f6;
		outline-offset: 2px;
	}

	/* Custom scrollbar for webkit browsers */
	:global(::-webkit-scrollbar) {
		width: 8px;
	}

	:global(::-webkit-scrollbar-track) {
		background: #f1f5f9;
	}

	:global(::-webkit-scrollbar-thumb) {
		background: #cbd5e1;
		border-radius: 4px;
	}

	:global(::-webkit-scrollbar-thumb:hover) {
		background: #94a3b8;
	}
</style>



================================================================================
File: src/routes/+layout.ts
================================================================================

// src/routes/+layout.ts

import { PUBLIC_SUPABASE_ANON_KEY, PUBLIC_SUPABASE_URL } from '$env/static/public'
import { createBrowserClient, createServerClient, isBrowser } from '@supabase/ssr'
import { dev } from '$app/environment';
import { injectAnalytics } from '@vercel/analytics/sveltekit';

export const load = async ({ fetch, data, depends }) => {
    depends('supabase:auth')

    const supabase = isBrowser()
        ? createBrowserClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
            global: { fetch }
        })
        : createServerClient(PUBLIC_SUPABASE_URL, PUBLIC_SUPABASE_ANON_KEY, {
            global: { fetch },
            cookies: {
                getAll() {
                    return data.cookies
                }
            }
        })

    const session = isBrowser() ? (await supabase.auth.getSession()).data.session : data.session

    return { supabase, session }
}



injectAnalytics({ mode: dev ? 'development' : 'production' });



================================================================================
File: src/routes/+page.svelte
================================================================================

<!--
/**
 * @file +page.svelte (Homepage)
 * @description Homepage for the Zungri Museum website featuring hero section,
 * featured exhibitions, visitor information, and calls-to-action.
 *
 * Key features:
 * - Hero section with museum introduction and primary CTAs
 * - Featured exhibitions showcase
 * - Visitor information and opening hours
 * - Newsletter signup
 * - Responsive design with engaging visuals
 * - Multilingual content support
 *
 * @dependencies
 * - $lib/paraglide/messages: Internationalization messages
 * - $lib/components/ui/Button.svelte: Reusable button component
 * - lucide-svelte: Icons for various sections
 *
 * @notes
 * - Uses Tailwind CSS for responsive design
 * - Implements museum branding and color scheme
 * - Includes accessibility considerations
 * - Features call-to-action buttons for booking and shopping
 */
-->
<script lang="ts">
	import * as m from '$lib/paraglide/messages';
	import Button from '$lib/components/ui/Button.svelte';
	import {
		Calendar,
		Clock,
		MapPin,
		Users,
		Camera,
		Star,
		ArrowRight,
		ChevronRight
	} from 'lucide-svelte';

	// Featured exhibitions data (this would typically come from a CMS or API)
	const featuredExhibitions = [
		{
			id: 1,
			title: 'Insediamenti Rupestri di Zungri',
			description: 'Scopri gli antichi insediamenti rupestri scavati nella roccia.',
			image: '/images/rupestri.jpeg',
			duration: 'Permanente',
			category: 'Archeologico'
		},
		{
			id: 2,
			title: 'Tradizioni Contadine Calabresi',
			description: 'Un viaggio attraverso le tradizioni agricole della Calabria.',
			image: '/images/storia.jpg',
			duration: 'Marzo - Giugno 2024',
			category: 'Etnografico'
		},
		{
			id: 3,
			title: 'Arte Sacra del Territorio',
			description: 'Tesori artistici delle chiese e dei monasteri locali.',
			image: '/images/arte-sacra.jpg',
			duration: 'Aprile - Settembre 2024',
			category: 'Arte'
		}
	];

	// Quick facts about the museum
	const museumFacts = [
		{
			icon: Clock,
			title: "Aperto tutto l'anno",
			description: 'Mar-Dom 9:00-17:00',
			color: 'text-blue-600'
		},
		{
			icon: Users,
			title: 'Visite guidate',
			description: 'Disponibili su prenotazione',
			color: 'text-green-600'
		},
		{
			icon: Camera,
			title: 'Fotografie benvenute',
			description: 'Cattura i tuoi momenti',
			color: 'text-purple-600'
		},
		{
			icon: MapPin,
			title: 'Nel cuore della Calabria',
			description: 'Facilmente raggiungibile',
			color: 'text-red-600'
		}
	];
</script>

<svelte:head>
	<title>{m.museum_welcomeTitle()} - Museo di Zungri</title>
	<meta name="description" content={m.museum_welcomeSubtitle()} />
	<meta property="og:title" content="{m.museum_welcomeTitle()} - Museo di Zungri" />
	<meta property="og:description" content={m.museum_welcomeSubtitle()} />
	<meta property="og:type" content="website" />
	<meta name="twitter:card" content="summary_large_image" />
</svelte:head>

<!-- Hero Section -->
<section class="relative bg-gradient-to-br from-blue-900 via-blue-800 to-blue-700 text-white">
	<!-- Background pattern/overlay -->
	<div class="absolute inset-0 bg-black/20"></div>
	<div class="absolute inset-0 bg-[url('/images/pattern.jpg')] opacity-10" aria-hidden="true"></div>

	<div class="relative mx-auto max-w-7xl px-4 py-20 sm:px-6 sm:py-28 lg:px-8">
		<div class="grid grid-cols-1 gap-12 lg:grid-cols-2 lg:items-center">
			<!-- Hero Content -->
			<div class="text-center lg:text-left">
				<h1 class="text-4xl font-bold tracking-tight sm:text-5xl lg:text-6xl">
					{m.museum_welcomeTitle()}
				</h1>
				<p class="mt-6 text-xl leading-8 text-blue-100">
					{m.museum_welcomeSubtitle()}
				</p>
				<p class="mt-4 text-lg text-blue-200">
					Esplora la storia millenaria degli insediamenti rupestri e immergiti nelle tradizioni
					della Calabria autentica.
				</p>

				<!-- CTA Buttons -->
				<div class="mt-10 flex flex-col gap-4 sm:flex-row sm:justify-center lg:justify-start">
					<Button
						class="inline-flex items-center justify-center space-x-2 bg-white text-blue-900 hover:bg-blue-50"
						size="lg"
					>
						<Calendar class="h-5 w-5" />
						<span>{m.navigation_book()}</span>
					</Button>
					<Button
						variant="outline"
						class="inline-flex items-center justify-center space-x-2 border-white text-white hover:bg-white hover:text-blue-900"
						size="lg"
					>
						<span>{m.navigation_visit()}</span>
						<ArrowRight class="h-5 w-5" />
					</Button>
				</div>
			</div>

			<!-- Hero Image/Visual -->
			<div class="relative">
				<div class="aspect-[4/3] overflow-hidden rounded-2xl bg-blue-800/50 shadow-2xl">
					<img
						src="/images/zungri-cave.jpg"
						alt="Insediamenti rupestri di Zungri"
						class="h-full w-full object-cover"
						loading="eager"
					/>
				</div>
				<!-- Floating stats card -->
				<div
					class="absolute -bottom-6 -right-6 rounded-xl bg-white p-6 shadow-lg lg:-bottom-8 lg:-right-8"
				>
					<div class="flex items-center space-x-4">
						<div class="flex -space-x-2">
							<div class="h-8 w-8 rounded-full bg-blue-100"></div>
							<div class="h-8 w-8 rounded-full bg-green-100"></div>
							<div class="h-8 w-8 rounded-full bg-purple-100"></div>
						</div>
						<div>
							<p class="text-sm font-semibold text-gray-900">500+ visitatori/mese</p>
							<div class="flex items-center space-x-1">
								{#each Array(5) as _}
									<Star class="h-4 w-4 fill-yellow-400 text-yellow-400" />
								{/each}
								<span class="text-sm text-gray-600">4.8/5</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</section>

<!-- Quick Facts Section -->
<section class="bg-white py-16">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-4">
			{#each museumFacts as fact}
				<div class="text-center">
					<div class="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-gray-50">
						<svelte:component this={fact.icon} class="h-8 w-8 {fact.color}" />
					</div>
					<h3 class="mt-6 text-lg font-semibold text-gray-900">{fact.title}</h3>
					<p class="mt-2 text-gray-600">{fact.description}</p>
				</div>
			{/each}
		</div>
	</div>
</section>

<!-- Featured Exhibitions -->
<section class="bg-gray-50 py-16">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="text-center">
			<h2 class="text-3xl font-bold tracking-tight text-gray-900 sm:text-4xl lg:text-5xl">
				{m.exhibitions_featured()}
			</h2>
			<p class="mt-4 text-lg text-gray-600">
				Scopri le nostre collezioni permanenti e le esposizioni temporanee
			</p>
		</div>

		<div class="mt-12 grid grid-cols-1 gap-8 md:grid-cols-2 lg:grid-cols-3">
			{#each featuredExhibitions as exhibition}
				<article
					class="group overflow-hidden rounded-xl bg-white shadow-sm transition-all duration-300 hover:shadow-lg"
				>
					<div class="aspect-[16/9] overflow-hidden bg-gray-200">
						<img
							src={exhibition.image}
							alt={exhibition.title}
							class="h-full w-full object-cover transition-transform duration-300 group-hover:scale-105"
							loading="lazy"
						/>
					</div>
					<div class="p-6">
						<div class="flex items-center justify-between">
							<span
								class="inline-flex items-center rounded-full bg-blue-100 px-3 py-1 text-xs font-medium text-blue-800"
							>
								{exhibition.category}
							</span>
							<span class="text-sm text-gray-500">{exhibition.duration}</span>
						</div>
						<h3 class="mt-4 text-xl font-semibold text-gray-900 group-hover:text-blue-600">
							{exhibition.title}
						</h3>
						<p class="mt-2 text-gray-600">{exhibition.description}</p>
						<div class="mt-4">
							<a
								href="/exhibitions/{exhibition.id}"
								class="inline-flex items-center space-x-1 text-sm font-medium text-blue-600 hover:text-blue-700"
							>
								<span>{m.exhibitions_viewDetails()}</span>
								<ChevronRight class="h-4 w-4" />
							</a>
						</div>
					</div>
				</article>
			{/each}
		</div>

		<div class="mt-12 text-center">
			<Button
				variant="outline"
				class="inline-flex items-center space-x-2"
				onclick={() => (window.location.href = '/exhibitions')}
			>
				<span>Vedi tutte le mostre</span>
				<ArrowRight class="h-5 w-5" />
			</Button>
		</div>
	</div>
</section>

<!-- Visit Information & CTA -->
<section class="bg-blue-900 py-16 text-white">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="grid grid-cols-1 gap-12 lg:grid-cols-2 lg:items-center">
			<!-- Visit Info -->
			<div>
				<h2 class="text-3xl font-bold tracking-tight sm:text-4xl">
					{m.visit_planYourVisit()}
				</h2>
				<p class="mt-4 text-xl text-blue-100">
					Pianifica la tua visita al Museo di Zungri e vivi un'esperienza indimenticabile tra
					storia, cultura e tradizioni.
				</p>

				<div class="mt-8 space-y-4">
					<div class="flex items-center space-x-3">
						<Clock class="h-6 w-6 text-blue-300" />
						<div>
							<p class="font-semibold">{m.museum_openingHours()}</p>
							<p class="text-blue-200">Martedì - Domenica: 9:00 - 17:00</p>
						</div>
					</div>
					<div class="flex items-center space-x-3">
						<MapPin class="h-6 w-6 text-blue-300" />
						<div>
							<p class="font-semibold">Come Raggiungerci</p>
							<p class="text-blue-200">Via Roma, 123 - 89020 Zungri (VV)</p>
						</div>
					</div>
					<div class="flex items-center space-x-3">
						<Users class="h-6 w-6 text-blue-300" />
						<div>
							<p class="font-semibold">Visite Guidate</p>
							<p class="text-blue-200">Disponibili su prenotazione</p>
						</div>
					</div>
				</div>
			</div>

			<!-- CTA Card -->
			<div class="rounded-2xl bg-white p-8 text-center text-gray-900 shadow-xl">
				<h3 class="text-2xl font-bold">Prenota la Tua Visita</h3>
				<p class="mt-4 text-gray-600">
					Evita le code e assicurati il tuo posto. Prenota online e risparmia tempo.
				</p>

				<div class="mt-6 space-y-4">
					<Button
						class="w-full bg-blue-600 text-white hover:bg-blue-700"
						size="lg"
						onclick={() => (window.location.href = '/book')}
					>
						<Calendar class="mr-2 h-5 w-5" />
						{m.navigation_book()}
					</Button>

					<Button
						variant="outline"
						class="w-full border-gray-300 text-gray-700 hover:bg-gray-50"
						size="lg"
						onclick={() => (window.location.href = '/shop')}
					>
						<span>{m.navigation_shop()}</span>
					</Button>
				</div>

				<p class="mt-4 text-sm text-gray-500">
					Cancellazione gratuita fino a 24 ore prima della visita
				</p>
			</div>
		</div>
	</div>
</section>

<!-- Newsletter Section -->
<section class="bg-gray-900 py-16">
	<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
		<div class="text-center">
			<h2 class="text-3xl font-bold tracking-tight text-white sm:text-4xl">Resta Aggiornato</h2>
			<p class="mt-4 text-lg text-gray-300">
				Iscriviti alla nostra newsletter per ricevere aggiornamenti su eventi, mostre e novità del
				museo.
			</p>
		</div>

		<div class="mx-auto mt-8 max-w-md">
			<div class="flex rounded-md shadow-sm">
				<input
					type="email"
					placeholder="La tua email"
					class="block w-full rounded-l-md border-0 bg-white px-4 py-3 text-gray-900 placeholder-gray-500 focus:ring-2 focus:ring-blue-500"
				/>
				<Button
					class="rounded-l-none bg-blue-600 px-6 text-white hover:bg-blue-700"
					onclick={() => console.log('Newsletter signup')}
				>
					Iscriviti
				</Button>
			</div>
			<p class="mt-3 text-center text-sm text-gray-400">
				Rispettiamo la tua privacy. Cancellazione facile in qualsiasi momento.
			</p>
		</div>
	</div>
</section>



================================================================================
File: src/routes/about/+page.server.ts
================================================================================

/**
 * @file +page.server.ts (About Page)
 * @purpose Server-side loader for the About Us page using centralized API client
 * 
 * @dependencies
 * - @sveltejs/kit: For error handling and load function types
 * - paraglide-js-sveltekit: For getting the current language tag
 * - $lib/api/apiClient: Centralized API client for backend communication
 *
 * @notes
 * - Uses apiClient for consistent error handling and request formatting
 * - Implements proper fallback behavior for missing content
 * - Error handling: Converts API errors to SvelteKit error format
 * - Supports server-side rendering with proper fetch context
 */

import { error } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';
import { getLocale } from '$lib/paraglide/runtime';
import { apiClient, handleApiError, type PageContent } from '$lib/api/apiClient';

export const load: PageServerLoad = async ({ fetch }) => {
    try {
        // Get current language from paraglide
        const language = getLocale();
        const slug = 'about';

        console.log(`[About Page Load] Fetching content for slug '${slug}' in language '${language}'`);

        // Use apiClient with server-side fetch context
        const content: PageContent = await apiClient.getPageContent(
            slug,
            language,
            fetch // Pass SvelteKit's fetch for server-side context
        );

        console.log(`[About Page Load] Successfully fetched content:`, {
            id: content.id,
            title: content.title,
            language: content.language_code,
            contentLength: content.content.length
        });

        return {
            content,
            meta: {
                slug,
                language,
                lastUpdated: content.updated_at
            }
        };
    } catch (e: unknown) {
        console.error('[About Page Load] Error fetching content:', e);

        // Use centralized error handling utility
        const errorInfo = handleApiError(
            e,
            'Could not load museum information'
        );

        // Throw SvelteKit error for proper error page handling
        error(errorInfo.status, {
            message: errorInfo.message,
            details: errorInfo.details
        });
    }
};


================================================================================
File: src/routes/about/+page.svelte
================================================================================

<!--
/**
* @file +page.svelte (About Page)
* @description Renders the 'About Us' page for the Zungri Museum, displaying
* content fetched from the backend.
*
* Key features:
* - Displays dynamic title and content.
* - Uses `{@html}` to render HTML content securely fetched from the CMS.
* - Includes SEO metadata via svelte:head.
* - Provides a clean, readable layout for text-heavy content.
*
* @dependencies
* - ./$types: For typing the `data` prop from the load function.
* - lucide-svelte: For icons.
*/
-->

<script lang="ts">
	import { BookOpen, Landmark } from 'lucide-svelte';

	let { data } = $props();
	const { content } = data;
</script>

<svelte:head>
	<title>{content.title} - Museo di Zungri</title>
	<meta
		name="description"
		content="Scopri la storia, la missione e le collezioni del Museo di Zungri. Un viaggio nel cuore della cultura rupestre calabrese."
	/>
</svelte:head>

<div class="bg-gray-50 py-12 sm:py-16">
	<div class="mx-auto max-w-4xl px-4 sm:px-6 lg:px-8">
		<header class="text-center">
			<div class="mx-auto flex h-16 w-16 items-center justify-center rounded-full bg-blue-100">
				<Landmark class="h-8 w-8 text-blue-600" />
			</div>
			<h1 class="mt-6 text-4xl font-bold tracking-tight text-gray-900 sm:text-5xl">
				{content.title}
			</h1>
			<p class="mt-4 text-lg text-gray-600">
				Un viaggio nella storia e nella cultura del territorio di Zungri.
			</p>
		</header>

		<div class="prose prose-lg mx-auto mt-12 max-w-none text-gray-700">
			<!--
    The `content.content` is rendered using `{@html}`.
    This is safe because the content is managed by trusted administrators
    in the backend CMS. It allows for rich text formatting (bold, italics, lists, etc.)
    to be controlled from the backend.
    Sanitization should be performed on the backend before saving if untrusted
    users can edit content.
  -->
			{@html content.content}
		</div>
	</div>
</div>



================================================================================
File: src/routes/auth/+layout.svelte
================================================================================

<!--
/**
 * @file +layout.svelte
 * @description Enhanced layout for authentication pages with smooth transitions,
 * improved accessibility, responsive design, and better error handling.
 *
 * @features
 * - Elegant loading states with fade transitions
 * - Responsive design with proper spacing on all devices
 * - Improved accessibility with aria attributes
 * - Proper error handling with user feedback
 * - Dynamic navigation links based on current route
 * - Subtle animations for better user experience
 */
-->
<script lang="ts">
	import { fade, fly } from 'svelte/transition';
	import { sessionStore, authReady } from '$lib/stores/authStore';
	import { goto } from '$app/navigation';
	import { page } from '$app/state';

	let { children } = $props();

	let authError: string | null = $state(null);
	let isRedirecting = $state(false);

	// Auth page config
	const authRoutes = [
		{
			path: '/auth/login',
			links: [
				{
					label: 'Sign up',
					href: '/auth/signup',
					prompt: "Don't have an account?"
				},
				{
					label: 'Forgot your password?',
					href: '/auth/reset-password',
					prompt: '',
					size: 'sm'
				}
			]
		},
		{
			path: '/auth/signup',
			links: [
				{
					label: 'Log in',
					href: '/auth/login',
					prompt: 'Already have an account?'
				}
			]
		},
		{
			path: '/auth/reset-password',
			links: [
				{
					label: 'Back to login',
					href: '/auth/login',
					prompt: 'Remember your password?'
				}
			]
		}
		// Add new auth routes here, eg: verify-email, magic-link, etc
	];

	// Get current route info
	let currentPath = $derived(page.url.pathname);
	let currentAuthRoute = $derived(authRoutes.find((r) => r.path === currentPath));

	$effect(() => {
		let unsubAuthReady: (() => void) | undefined;
		let unsubSession: (() => void) | undefined;

		unsubAuthReady = authReady.subscribe((ready) => {
			if (ready) {
				unsubSession = sessionStore.subscribe((session) => {
					// Only try redirect if there is a session and we aren't already on /dashboard
					if (session && page.url.pathname !== '/dashboard') {
						isRedirecting = true;
						goto('/dashboard', { replaceState: true }).catch((error) => {
							isRedirecting = false;
							authError = 'Navigation error. Please try again.';
							console.error('[AuthLayout] Navigation error:', error);
						});
					}
				});
			}
		});

		return () => {
			unsubAuthReady && unsubAuthReady();
			unsubSession && unsubSession();
		};
	});
</script>

<div
	class="flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-gray-900 to-gray-800 p-4 text-white sm:p-6"
>
	<div class="w-full max-w-md" in:fade={{ duration: 300, delay: 150 }}>
		<!-- Logo and branding -->
		<div class="mb-8 text-center">
			<a href="/" class="group inline-flex items-center" aria-label="Go to homepage">
				<span
					class="bg-gradient-to-r from-blue-400 to-blue-600 bg-clip-text text-3xl font-bold text-transparent transition-all duration-300 group-hover:from-blue-300 group-hover:to-blue-500"
				>
					Project NAME
				</span>
			</a>
			<p class="mt-2 text-sm text-gray-400">Your business connection platform</p>
		</div>
		<div
			class="overflow-hidden rounded-xl border border-gray-700 bg-gray-800 shadow-2xl"
			in:fly={{ y: 20, duration: 400, delay: 200 }}
		>
			<!-- State management -->
			{#if !$authReady}
				<div class="p-8 text-center" aria-live="polite">
					<div class="mb-4 flex justify-center">
						<div
							class="h-8 w-8 animate-spin rounded-full border-4 border-gray-600 border-t-blue-500"
						></div>
					</div>
					<p class="text-gray-300">Preparing your authentication...</p>
				</div>
			{:else if isRedirecting}
				<div class="p-8 text-center" aria-live="polite">
					<div class="mb-4 flex justify-center">
						<div
							class="h-8 w-8 animate-spin rounded-full border-4 border-gray-600 border-t-blue-500"
						></div>
					</div>
					<p class="text-gray-300">Redirecting to your dashboard...</p>
				</div>
			{:else if authError}
				<div class="bg-red-900/30 p-6 text-center" role="alert" aria-live="assertive">
					<p class="text-red-200">{authError}</p>
					<button
						class="mt-2 rounded-md bg-red-800 px-4 py-1 text-sm transition-colors hover:bg-red-700"
						on:click={() => (authError = null)}
					>
						Dismiss
					</button>
				</div>
				<div class="p-6 sm:p-8">
					{@render children()}
				</div>
			{:else}
				<div class="p-6 sm:p-8">
					{@render children()}
				</div>
			{/if}
		</div>
		<!-- Dynamic navigation links -->
		<div class="mt-6 text-center" in:fade={{ duration: 300, delay: 400 }}>
			{#if currentAuthRoute}
				{#each currentAuthRoute.links as l}
					{#if l.prompt}
						<p class="text-gray-300">
							{l.prompt}
							<a
								href={l.href}
								class={`font-medium text-blue-400 underline-offset-2 transition-colors hover:text-blue-300 hover:underline ${l.size === 'sm' ? 'text-sm' : ''}`}
							>
								{l.label}
							</a>
						</p>
					{:else}
						<p class="text-sm text-gray-400">
							<a href={l.href} class="transition-colors hover:text-gray-300">
								{l.label}
							</a>
						</p>
					{/if}
				{/each}
			{/if}
			<!-- Footer info -->
			<div class="mt-8 text-xs text-gray-500">
				<p>
					© {new Date().getFullYear()} B2B Deals, Inc. All rights reserved.
				</p>
				<div class="mt-2 flex justify-center space-x-4">
					<a href="/privacy" class="transition-colors hover:text-gray-400">Privacy</a>
					<a href="/terms" class="transition-colors hover:text-gray-400">Terms</a>
					<a href="/help" class="transition-colors hover:text-gray-400">Help</a>
				</div>
			</div>
		</div>
	</div>
</div>



================================================================================
File: src/routes/auth/login/+page.svelte
================================================================================

<!--
/**
 * @file +page.svelte (Login Page)
 * @description Allows users to log in to the application using their email and password.
 *
 * Key features:
 * - Email and password input fields.
 * - Form submission handling.
 * - Interaction with Supabase for authentication.
 * - Display of loading states and error messages.
 * - Redirection to the dashboard upon successful login.
 *
 * @dependencies
 * - $app/navigation: For programmatic navigation (goto).
 * - $lib/utils/supabaseClient: The Supabase client instance.
 * - $lib/components/ui/Input.svelte: Reusable input component.
 * - $lib/components/ui/Button.svelte: Reusable button component.
 * - $lib/components/ui/Alert.svelte: Reusable alert component.
 * - $lib/stores/session: For checking auth state (optional here, primarily for layout).
 *
 * @notes
 * - Uses Svelte 5 runes ($state) for managing component state.
 * - Implements client-side authentication logic.
 */
-->
<script lang="ts">
	import { goto } from '$app/navigation';
	import { supabase } from '$lib/utils/supabaseClient'; // Assuming this path from existing code
	import Input from '$lib/components/ui/Input.svelte';
	import Button from '$lib/components/ui/Button.svelte';
	import Alert from '$lib/components/ui/Alert.svelte';

	let email = $state('');
	let password = $state('');
	let loading = $state(false);
	let errorMessage = $state<string | null>(null);

	/**
	 * Handles the login form submission.
	 * Attempts to sign in the user with Supabase Auth.
	 * Manages loading states and displays errors if any.
	 * Redirects to '/dashboard' on successful login.
	 */
	async function handleLogin() {
		loading = true;
		errorMessage = null;

		try {
			const { error } = await supabase.auth.signInWithPassword({
				email: email,
				password: password
			});

			if (error) {
				console.error('Login error:', error);
				errorMessage = error.message;
			} else {
				// Supabase onAuthStateChange listener in session.ts will handle sessionStore update.
				// Redirect to dashboard.
				console.log('Login successful, redirecting to /dashboard...');
				goto('/dashboard');
			}
		} catch (err) {
			console.error('Unexpected error during login:', err);
			errorMessage = 'An unexpected error occurred. Please try again.';
		} finally {
			loading = false;
		}
	}
</script>

<h1 class="mb-6 text-center text-2xl font-semibold text-white">Log In</h1>

{#if errorMessage}
	<Alert type="error" message={errorMessage} class="mb-4" />
{/if}

<form on:submit|preventDefault={handleLogin} class="space-y-5">
	<Input
		type="email"
		id="email"
		bind:value={email}
		placeholder="you@example.com"
		required
		disabled={loading}
	/>

	<Input
		type="password"
		id="password"
		bind:value={password}
		placeholder="••••••••"
		required
		disabled={loading}
	/>

	<div>
		<a href="/auth/reset-password" class="text-sm text-blue-400 hover:underline">Forgot password?</a
		>
	</div>

	<!-- Login page -->
	<Button type="submit" disabled={loading} {loading} class="w-full" variant="primary" size="lg">
		Sign In
	</Button>
</form>



================================================================================
File: src/routes/auth/reset-password/+page.svelte
================================================================================

<!-- src/routes/reset-password/+page.svelte -->
<script>
	import { supabase } from '$lib/utils/supabaseClient'; // Assuming this path from existing code
	import { goto } from '$app/navigation';

	let email = '';
	let loading = false;
	let message = '';
	let error = '';

	async function handleResetRequest() {
		if (!email) {
			error = 'Please enter your email address';
			return;
		}

		loading = true;
		error = '';
		message = '';

		try {
			const { error: resetError } = await supabase.auth.resetPasswordForEmail(email, {
				redirectTo: `${window.location.origin}/update-password`
			});

			if (resetError) {
				error = resetError.message;
			} else {
				message = 'Check your email for a password reset link!';
				email = ''; // Clear the form
			}
		} catch (err) {
			error = 'An unexpected error occurred. Please try again.';
			console.error('Reset password error:', err);
		} finally {
			loading = false;
		}
	}

	function handleSubmit(event) {
		event.preventDefault();
		handleResetRequest();
	}
</script>

<svelte:head>
	<title>Reset Password</title>
</svelte:head>

<div class="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
	<div class="w-full max-w-md space-y-8">
		<div>
			<h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Reset your password</h2>
			<p class="mt-2 text-center text-sm text-gray-600">
				Enter your email address and we'll send you a link to reset your password.
			</p>
		</div>

		<form class="mt-8 space-y-6" on:submit={handleSubmit}>
			<div>
				<label for="email" class="sr-only">Email address</label>
				<input
					id="email"
					name="email"
					type="email"
					required
					bind:value={email}
					disabled={loading}
					class="relative block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
					placeholder="Email address"
				/>
			</div>

			{#if error}
				<div class="rounded-md bg-red-50 p-4">
					<div class="text-sm text-red-700">{error}</div>
				</div>
			{/if}

			{#if message}
				<div class="rounded-md bg-green-50 p-4">
					<div class="text-sm text-green-700">{message}</div>
				</div>
			{/if}

			<div>
				<button
					type="submit"
					disabled={loading}
					class="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
				>
					{#if loading}
						<svg
							class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
							xmlns="http://www.w3.org/2000/svg"
							fill="none"
							viewBox="0 0 24 24"
						>
							<circle
								class="opacity-25"
								cx="12"
								cy="12"
								r="10"
								stroke="currentColor"
								stroke-width="4"
							></circle>
							<path
								class="opacity-75"
								fill="currentColor"
								d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
							></path>
						</svg>
						Sending...
					{:else}
						Send reset link
					{/if}
				</button>
			</div>

			<div class="text-center">
				<a href="/login" class="font-medium text-indigo-600 hover:text-indigo-500">
					Back to sign in
				</a>
			</div>
		</form>
	</div>
</div>

<style>
	/* Add any custom styles here if needed */
</style>



================================================================================
File: src/routes/auth/signup/+page.server.ts
================================================================================

/**
 * @file Signup Page Server Load & Actions (signup/+page.server.ts)
 * @description Handles server-side logic for the signup page:
 * - Redirects authenticated users.
 * - Initializes the signup form using Superforms.
 * - Handles form submission for user registration via Supabase Auth.
 * - Provides comprehensive error handling for Supabase authentication errors.
 *
 * @dependencies
 * - @sveltejs/kit: Provides `Actions`, `fail`, `redirect` types and functions.
 * - App.Locals: Access to `supabase` client and `getSession` initialized in hooks.
 * - sveltekit-superforms: Provides `superValidate`, `message`, `setError`.
 * - sveltekit-superforms/adapters: Provides `zod` adapter.
 * - ./schema: Contains the Zod schema for signup form validation.
 */

import { fail, redirect } from '@sveltejs/kit';
import type { Actions, PageServerLoad } from './$types';
import { message, superValidate, setError } from 'sveltekit-superforms';
import { zod } from 'sveltekit-superforms/adapters';
import { formSchema } from './schema';

export const load: PageServerLoad = async ({ locals: { getSession }, url }) => {
    const session = await getSession();
    // If user is already logged in, redirect them
    if (session) {
        console.log('[Signup Page Load] User already logged in, redirecting to dashboard.');
        // Use 'next' param if present, otherwise default to dashboard
        const redirectTo = url.searchParams.get('next') ?? '/dashboard';
        throw redirect(303, redirectTo);
    }

    // Initialize the signup form on page load
    return { form: await superValidate(zod(formSchema)) };
};

// Error patterns that indicate duplicate email
const duplicateEmailPatterns = [
    'already registered',
    'already exists',
    'A user with this email address has already been registered',
    'User already registered',
    'This email is already in use',
    'duplicate key value violates unique constraint',
    'unique constraint',
    'unique violation',
    'email address is already in use',
    'Email already in use'
];

// Helper function to check if an error message indicates a duplicate email
const isDuplicateEmailError = (message) => {
    if (!message) return false;
    return duplicateEmailPatterns.some(pattern =>
        message.toLowerCase().includes(pattern.toLowerCase()));
};

export const actions: Actions = {
    /**
     * Default action for handling email/password signup form submission.
     */
    default: async ({ request, locals: { supabase }, url }) => {
        console.log('[Signup Action] Received POST request.');

        try {
            // Validate the form data against the Zod schema
            const form = await superValidate(request, zod(formSchema));
            console.log('[Signup Action] Form validation result:', form);

            // Basic server-side check if validation failed (client-side should catch most)
            if (!form.valid) {
                console.log('[Signup Action] Form invalid.');
                // Return validation errors
                return fail(400, { form });
            }

            // Extract form data
            const { email, password, fullName } = form.data;

            console.log(`[Signup Action] Attempting signup for: ${email}`);
            const { data: signupData, error: signupError } = await supabase.auth.signUp({
                email,
                password,
                options: {
                    // Store optional data like full name in user_metadata
                    data: {
                        full_name: fullName || '' // Use provided name or empty string
                    },
                    // Use current URL as base for redirect
                    emailRedirectTo: `${url.origin}/auth/callback`
                }
            });



            // Handle Supabase Signup Errors
            if (signupError) {
                console.error('[Signup Action] Supabase signup error:', signupError);

                // Check specifically for duplicate email errors
                if (isDuplicateEmailError(signupError.message)) {
                    console.log('[Signup Action] Detected duplicate email error');
                    return setError(form, 'email', 'An account with this email already exists. Try logging in.');
                }

                // Handle password errors
                if (signupError.message.toLowerCase().includes('password')) {
                    return setError(form, 'password', signupError.message);
                }

                // Generic error for other cases
                return message(form, `Registration error: ${signupError.message}`, {
                    status: signupError.status || 500
                });
            }

            // --- Handle Signup Success ---
            // Check if email confirmation is required
            if (signupData.user && !signupData.session) {
                console.log('[Signup Action] Signup successful, email confirmation required.');
                return message(form, 'Signup successful! Please check your email to confirm your account.', { status: 200 });
            }

            // Handle case where signup might auto-verify
            if (signupData.session) {
                console.log('[Signup Action] Signup successful and session created. Redirecting...');
                throw redirect(303, '/dashboard');
            }

            // Fallback success message
            console.log('[Signup Action] Signup process completed.');
            return message(form, 'Signup process completed. Please check your email.', { status: 200 });

        } catch (error) {
            // Catch any unexpected errors not returned by Supabase API
            console.error('[Signup Action] Unexpected error:', error);

            // Create a new form to attach the error
            const form = await superValidate(zod(formSchema));

            // Check if it's a known error type or just show generic message
            const errorMessage = error instanceof Error
                ? error.message
                : 'An unexpected error occurred';

            return message(form, `An unexpected error occurred. Please try again later. (${errorMessage})`, { status: 500 });
        }
    }
};


================================================================================
File: src/routes/auth/signup/+page.svelte
================================================================================

<!--
/**
 * @file Signup Page Component (signup/+page.svelte)
 * @description Provides the user interface for signing up using email/password
 * or Google OAuth. Uses SvelteKit Superforms for form handling and validation,
 * styled with DaisyUI classes.
 *
 * @dependencies
 * - $lib/components/auth/GoogleSignInButton.svelte: Google sign-in button.
 * - ./schema: Zod schema definition for the signup form.
 * - sveltekit-superforms: `superForm` hook.
 * - sveltekit-superforms/adapters: `zodClient` adapter.
 * - ./$types: Page data types.
 */
-->

<script lang="ts">
	import { formSchema } from './schema';
	// REMOVED: import { enhance } from '$app/forms'; // Not needed when using superForm's enhance
	import { type SuperValidated, type Infer, superForm, message } from 'sveltekit-superforms';
	import { zodClient } from 'sveltekit-superforms/adapters';
	import type { PageData } from './$types';
	import { AlertCircle, CheckCircle } from 'lucide-svelte'; // Icons for messages

	// Props: `data` contains the validated form object from the load function
	let { data }: { data: PageData } = $props();

	// Initialize Superform for the signup form
	const form = superForm(data.form, {
		validators: zodClient(formSchema),
		taintedMessage: null, // Disable tainted message for signup form
		// Optionally reset form on success message
		onUpdated: ({ form: f }) => {
			if (f.message && f.valid) {
				// Consider resetting only if it's a success message (e.g., "Check email")
				if (f.message.toLowerCase().includes('success')) {
					// Check the message string directly
					form.reset(); // Reset form fields after successful signup message
				}
			}
		}
	});

	/// Destructure form state and helpers - THIS enhance is from superForm
	const { form: formData, errors, submitting, enhance, message: messageStore } = form;

	// Fix: In Svelte 5, we access the store value directly with $
	// messageStore is the Writable<string> store from superForm
	$effect(() => {
		// This effect will re-run whenever $messageStore changes
		console.log('Message updated:', $messageStore);
	});

	// Derived value to check if the message is a success message
	let isSuccessMessage = $derived(
		typeof $messageStore === 'string' && $messageStore?.toLowerCase().includes('success')
	);
</script>

<div class="hero bg-ui-bg min-h-screen">
	<div class="w-full max-w-sm shadow-2xl">
		<div class="text-center">
			<h1 class="text-2xl font-bold">SIGN UP!</h1>
			<p class="py-4">Crea il tuo account</p>
		</div>
		<div class="card bg-ui-bg-2 w-full max-w-sm shrink-0 shadow-2xl">
			<!-- Use the enhance function from superForm -->
			<form class="card-body" method="POST" use:enhance novalidate>
				<h2 class="card-title mb-4 justify-center text-2xl">Crea Account</h2>

				<!-- General Form Message (Success or Error) -->
				{#if $messageStore}
					<div
						role="alert"
						class="alert mb-4 p-2 text-sm"
						class:alert-success={isSuccessMessage}
						class:alert-error={!isSuccessMessage}
					>
						{#if isSuccessMessage}
							<CheckCircle class="h-6 w-6 shrink-0 stroke-current" />
						{:else}
							<AlertCircle class="h-6 w-6 shrink-0 stroke-current" />
						{/if}
						<!-- Safely render message text -->
						<span>{$messageStore}</span>
					</div>
				{/if}

				<!-- Full Name Input (Optional) -->
				<div class="form-control text-gray-300">
					<label class="label" for="full-name">
						<span class="label-text">Full Name (Optional)</span>
					</label>
					<input
						type="text"
						id="full-name"
						name="fullName"
						placeholder="Your Name"
						autocomplete="name"
						class="input input-bordered text-gray-300"
						class:input-error={$errors.fullName}
						aria-invalid={$errors.fullName ? 'true' : undefined}
						aria-describedby={$errors.fullName ? 'fullName-error' : undefined}
						bind:value={$formData.fullName}
						disabled={$submitting}
					/>
					{#if $errors.fullName}
						<div class="label" id="fullName-error">
							<span class="label-text-alt text-error">{$errors.fullName}</span>
						</div>
					{/if}
				</div>

				<!-- Email Input -->
				<div class="form-control">
					<label class="label" for="email-address">
						<span class="label-text">Email</span>
					</label>
					<input
						type="email"
						id="email-address"
						name="email"
						placeholder="you@example.com"
						autocomplete="email"
						required
						class="input input-bordered"
						class:input-error={$errors.email}
						aria-invalid={$errors.email ? 'true' : undefined}
						aria-describedby={$errors.email ? 'email-error' : undefined}
						bind:value={$formData.email}
						disabled={$submitting}
					/>
					{#if $errors.email}
						<div class="label" id="email-error">
							<span class="label-text-alt text-error">{$errors.email}</span>
						</div>
					{/if}
				</div>

				<!-- Password Input -->
				<div class="form-control">
					<label class="label" for="password">
						<span class="label-text">Password</span>
					</label>
					<input
						type="password"
						id="password"
						name="password"
						placeholder="•••••••• (min. 8 characters)"
						required
						class="input input-bordered"
						class:input-error={$errors.password}
						aria-invalid={$errors.password ? 'true' : undefined}
						aria-describedby={$errors.password ? 'password-error' : undefined}
						bind:value={$formData.password}
						disabled={$submitting}
					/>
					{#if $errors.password}
						<div class="label" id="password-error">
							<span class="label-text-alt text-error">{$errors.password}</span>
						</div>
					{/if}
				</div>

				<!-- Confirm Password Input -->
				<div class="form-control">
					<label class="label" for="confirmPassword">
						<span class="label-text">Confirm Password</span>
					</label>
					<input
						type="password"
						id="confirmPassword"
						name="confirmPassword"
						placeholder="••••••••"
						required
						class="input input-bordered"
						class:input-error={$errors.confirmPassword}
						aria-invalid={$errors.confirmPassword ? 'true' : undefined}
						aria-describedby={$errors.confirmPassword ? 'confirmPassword-error' : undefined}
						bind:value={$formData.confirmPassword}
						disabled={$submitting}
					/>
					{#if $errors.confirmPassword}
						<div class="label" id="confirmPassword-error">
							<span class="label-text-alt text-error">{$errors.confirmPassword}</span>
						</div>
					{/if}
				</div>

				<!-- Submit Button -->
				<div class=" form-control mt-6">
					<button type="submit" class="btn btn-primary" disabled={$submitting}>
						{#if $submitting}
							<span class="loading loading-spinner"></span>
							Creating Account...
						{:else}
							Registrati
						{/if}
					</button>
				</div>
				<!-- Placeholder for Social Logins -->
				<div class="relative my-4">
					<div class="absolute inset-0 flex items-center" aria-hidden="true">
						<div class="w-full border-t border-neutral-300"></div>
					</div>
					<div class="relative flex justify-center text-sm">
						<span class="bg-neutral-50 px-2 text-neutral-500">Or continue with</span>
					</div>
				</div>

				<div>
					<!-- <GoogleSignInButton /> -->
					<div class="text-center text-sm text-neutral-500">
						<!-- Google -->
						<button class="btn border-[#e5e5e5] bg-white text-black">
							<svg
								aria-label="Google logo"
								width="16"
								height="16"
								xmlns="http://www.w3.org/2000/svg"
								viewBox="0 0 512 512"
								><g
									><path d="m0 0H512V512H0" fill="#fff"></path><path
										fill="#34a853"
										d="M153 292c30 82 118 95 171 60h62v48A192 192 0 0190 341"
									></path><path
										fill="#4285f4"
										d="m386 400a140 175 0 0053-179H260v74h102q-7 37-38 57"
									></path><path fill="#fbbc02" d="m90 341a208 200 0 010-171l63 49q-12 37 0 73"
									></path><path
										fill="#ea4335"
										d="m153 219c22-69 116-109 179-50l55-54c-78-75-230-72-297 55"
									></path></g
								></svg
							>
							Signup with Google (PLACEHOLDER)
						</button>
					</div>
				</div>
			</form>
		</div>
	</div>
</div>



================================================================================
File: src/routes/auth/signup/schema.ts
================================================================================

/**
 * @file signup/schema.ts
 * @description Zod schema definition for the user signup form.
 * Includes validation rules for email, password, confirmPassword, and optionally full name.
 */
import { z } from 'zod';

export const formSchema = z
    .object({
        // Optional full name field
        fullName: z
            .string()
            .trim()
            .min(2, 'Full name must be at least 2 characters')
            .optional(), // Make it optional for signup
        email: z.string().email('Please enter a valid email address'),
        password: z
            .string()
            .min(8, 'Password must be at least 8 characters long')
            // Optional: Add complexity requirements if desired (e.g., regex)
            .max(100, 'Password must be no more than 100 characters'),
        confirmPassword: z.string() // Confirmation field
    })
    // Refine step to check if passwords match
    .refine((data) => data.password === data.confirmPassword, {
        message: "Passwords don't match",
        path: ['confirmPassword'] // Set the error path to the confirmation field
    });

// Infer the TypeScript type from the schema
export type FormSchema = z.infer<typeof formSchema>;



================================================================================
File: src/routes/auth/update-password/+page.svelte
================================================================================

<!-- src/routes/update-password/+page.svelte -->
<script>
	import { onMount } from 'svelte';
	import { supabase } from '$lib/utils/supabaseClient';
	import { goto } from '$app/navigation';
	import { page } from '$app/state';

	let password = '';
	let confirmPassword = '';
	let loading = false;
	let error = '';
	let isValidSession = false;

	onMount(async () => {
		// Check URL parameters first (from email link)
		const urlParams = new URLSearchParams(window.location.search);
		const accessToken = urlParams.get('access_token');
		const refreshToken = urlParams.get('refresh_token');
		const type = urlParams.get('type');

		console.log('URL params:', {
			accessToken: !!accessToken,
			refreshToken: !!refreshToken,
			type
		});

		if (accessToken && refreshToken && type === 'recovery') {
			try {
				const { data, error: setSessionError } = await supabase.auth.setSession({
					access_token: accessToken,
					refresh_token: refreshToken
				});

				console.log('Set session result:', {
					data: !!data.session,
					error: setSessionError
				});

				if (setSessionError) {
					console.error('Set session error:', setSessionError);
					error = 'Invalid or expired reset link. Please request a new password reset.';
				} else if (data.session) {
					isValidSession = true;
					// Clear the URL parameters for security
					window.history.replaceState({}, document.title, window.location.pathname);
				} else {
					error = 'Unable to establish session. Please request a new password reset.';
				}
			} catch (err) {
				console.error('Session setup error:', err);
				error = 'An error occurred processing the reset link. Please request a new password reset.';
			}
		} else {
			// Check if we already have a valid session
			const {
				data: { session },
				error: sessionError
			} = await supabase.auth.getSession();

			if (session && session.user) {
				console.log('Existing session found');
				isValidSession = true;
			} else {
				console.log('No valid session or tokens found');
				error = 'Invalid or expired reset link. Please request a new password reset.';
			}
		}
	});

	async function handlePasswordUpdate() {
		if (!password || !confirmPassword) {
			error = 'Please fill in all fields';
			return;
		}

		if (password.length < 6) {
			error = 'Password must be at least 6 characters long';
			return;
		}

		if (password !== confirmPassword) {
			error = 'Passwords do not match';
			return;
		}

		loading = true;
		error = '';

		try {
			const { error: updateError } = await supabase.auth.updateUser({
				password: password
			});

			if (updateError) {
				error = updateError.message;
			} else {
				// Success! Redirect to login or dashboard
				await goto('/login?message=Password updated successfully');
			}
		} catch (err) {
			error = 'An unexpected error occurred. Please try again.';
			console.error('Update password error:', err);
		} finally {
			loading = false;
		}
	}

	function handleSubmit(event) {
		event.preventDefault();
		handlePasswordUpdate();
	}
</script>

<svelte:head>
	<title>Update Password</title>
</svelte:head>

<div class="flex min-h-screen items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
	<div class="w-full max-w-md space-y-8">
		<div>
			<h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Update your password</h2>
			<p class="mt-2 text-center text-sm text-gray-600">Enter your new password below.</p>
		</div>

		{#if !isValidSession && !error}
			<div class="flex justify-center">
				<svg
					class="h-8 w-8 animate-spin text-indigo-600"
					xmlns="http://www.w3.org/2000/svg"
					fill="none"
					viewBox="0 0 24 24"
				>
					<circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"
					></circle>
					<path
						class="opacity-75"
						fill="currentColor"
						d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
					></path>
				</svg>
			</div>
		{:else if error && !isValidSession}
			<div class="rounded-md bg-red-50 p-4">
				<div class="text-sm text-red-700">{error}</div>
				<div class="mt-3">
					<a href="/reset-password" class="font-medium text-red-600 hover:text-red-500">
						Request a new password reset
					</a>
				</div>
			</div>
		{:else if isValidSession}
			<form class="mt-8 space-y-6" on:submit={handleSubmit}>
				<div class="space-y-4">
					<div>
						<label for="password" class="block text-sm font-medium text-gray-700">
							New Password
						</label>
						<input
							id="password"
							name="password"
							type="password"
							required
							bind:value={password}
							disabled={loading}
							class="relative mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
							placeholder="Enter new password"
						/>
					</div>

					<div>
						<label for="confirm-password" class="block text-sm font-medium text-gray-700">
							Confirm New Password
						</label>
						<input
							id="confirm-password"
							name="confirm-password"
							type="password"
							required
							bind:value={confirmPassword}
							disabled={loading}
							class="relative mt-1 block w-full appearance-none rounded-md border border-gray-300 px-3 py-2 text-gray-900 placeholder-gray-500 focus:z-10 focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none sm:text-sm"
							placeholder="Confirm new password"
						/>
					</div>
				</div>

				{#if error}
					<div class="rounded-md bg-red-50 p-4">
						<div class="text-sm text-red-700">{error}</div>
					</div>
				{/if}

				<div>
					<button
						type="submit"
						disabled={loading}
						class="group relative flex w-full justify-center rounded-md border border-transparent bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none disabled:cursor-not-allowed disabled:opacity-50"
					>
						{#if loading}
							<svg
								class="mr-3 -ml-1 h-5 w-5 animate-spin text-white"
								xmlns="http://www.w3.org/2000/svg"
								fill="none"
								viewBox="0 0 24 24"
							>
								<circle
									class="opacity-25"
									cx="12"
									cy="12"
									r="10"
									stroke="currentColor"
									stroke-width="4"
								></circle>
								<path
									class="opacity-75"
									fill="currentColor"
									d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
								></path>
							</svg>
							Updating...
						{:else}
							Update password
						{/if}
					</button>
				</div>
			</form>
		{/if}
	</div>
</div>



================================================================================
File: src/routes/book/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file Booking Page
	 * @purpose Provides a multi-step user interface for booking museum tickets.
	 *
	 * @dependencies
	 * - Svelte: For component logic and reactivity.
	 * - SvelteKit: For navigation (goto) and page state (page).
	 * - bookingStore: For all booking-related state and actions.
	 * - lucide-svelte: For icons.
	 *
	 * @notes
	 * - This component has been refactored to use a more logical step order: Tickets -> Date -> Time -> Details.
	 * - The reactive loop has been fixed by making the data flow unidirectional from the Calendar component.
	 * - Date availability is now loaded only when the user navigates to a new, previously unloaded month.
	 */
	import { goto } from '$app/navigation';
	import { page } from '$app/state';
	import { fade, slide } from 'svelte/transition';
	import {
		bookingActions,
		bookingError,
		customerInfo,
		isCreatingBooking,
		isLoadingTimeSlots,
		selectedDate,
		selectedTimeSlot,
		totalTickets,
		validationErrors,
		selectedTicket,
		dateAvailability
	} from '$lib/stores/bookingStore';
	// Component Imports
	import Calendar from '$lib/components/Calendar.svelte';
	import TimeSlotPicker from '$lib/components/TimeSlotPicker.svelte';
	import TicketSelector from '$lib/components/TicketSelector.svelte';
	import BookingSummary from './_components/BookingSummary.svelte';
	import CustomerForm from './_components/CustomerForm.svelte';
	import Alert from '$lib/components/ui/Alert.svelte';
	import {
		Loader,
		ChevronLeft,
		ChevronRight,
		Calendar as CalendarIcon,
		Clock,
		Ticket,
		User,
		Check
	} from 'lucide-svelte';

	// Define types for stores
	interface Ticket {
		id: string;
	}
	interface CustomerInfo {
		name: string;
		email: string;
	}
	interface ValidationErrors {
		name?: string;
		email?: string;
	}
	interface DateAvailabilityStatus {
		/* Define as per your bookingStore, e.g., 'available' | 'unavailable' | 'loading' | 'unknown' */
	}
	interface BookingActions {
		loadDateAvailabilityForTicket: (ticketId: string, year: number, month: number) => void;
		loadTimeSlotsForSelection: () => void;
		validateBooking: () => boolean;
	}

	interface BookingStep {
		id: number;
		title: string;
		description: string;
		icon: any;
		isComplete: () => boolean;
	}

	// --- STATE MANAGEMENT ---
	let currentStep = $state(1);
	let calendarDate = $state(new Date());
	let loadedMonths = $state<Set<string>>(new Set());

	// --- DERIVED STATE ---
	const isCustomerFormValid = $derived(
		!$validationErrors.name &&
			!$validationErrors.email &&
			!!$customerInfo.name &&
			!!$customerInfo.email
	);

	// Safely derive availabilityMap
	const availabilityMap = $derived(
		$selectedTicket?.id && $dateAvailability
			? (($dateAvailability instanceof Map
					? $dateAvailability.get($selectedTicket.id)
					: $dateAvailability[$selectedTicket.id]) ?? null)
			: null
	);

	const steps: BookingStep[] = [
		{
			id: 1,
			title: 'Select Tickets',
			description: 'Choose your ticket type',
			icon: Ticket,
			isComplete: () => $totalTickets > 0
		},
		{
			id: 2,
			title: 'Select Date',
			description: 'Choose your visit date',
			icon: CalendarIcon,
			isComplete: () => $selectedDate !== null
		},
		{
			id: 3,
			title: 'Choose Time',
			description: 'Pick your time slot',
			icon: Clock,
			isComplete: () => $selectedTimeSlot !== null
		},
		{
			id: 4,
			title: 'Your Details',
			description: 'Provide your contact info',
			icon: User,
			isComplete: () => isCustomerFormValid
		}
	];

	// --- EFFECTS ---
	$effect(() => {
		if (currentStep === 2 && $selectedTicket?.id) {
			const year = calendarDate.getFullYear();
			const month = calendarDate.getMonth();
			const monthKey = `${$selectedTicket.id}-${year}-${month}`;
			if (!loadedMonths.has(monthKey)) {
				bookingActions.loadDateAvailabilityForTicket($selectedTicket.id, year, month);
				loadedMonths.add(monthKey);
			}
		}
	});

	$effect(() => {
		if (currentStep === 3) {
			bookingActions.loadTimeSlotsForSelection();
		}
	});

	$effect(() => {
		if ($selectedDate || $selectedTimeSlot || $totalTickets) {
			bookingError.set(null);
		}
	});

	// Reset loaded months when ticket type changes
	$effect(() => {
		const ticketId = $selectedTicket?.id;
		return () => {
			const previousTicketId = ticketId;
			if (ticketId && ticketId !== previousTicketId) {
				loadedMonths = new Set();
				const year = calendarDate.getFullYear();
				const month = calendarDate.getMonth();
				const monthKey = `${ticketId}-${year}-${month}`;
				if (!loadedMonths.has(monthKey)) {
					bookingActions.loadDateAvailabilityForTicket(ticketId, year, month);
					loadedMonths.add(monthKey);
				}
			}
		};
	});

	// --- NAVIGATION ---
	function isStepAccessible(stepId: number): boolean {
		for (let i = 1; i < stepId; i++) {
			const step = steps.find((s) => s.id === i);
			if (!step || !step.isComplete()) {
				return false;
			}
		}
		return true;
	}

	function goToStep(stepId: number): void {
		if (isStepAccessible(stepId)) {
			currentStep = stepId;
		}
	}

	function goToPreviousStep(): void {
		if (currentStep > 1) {
			currentStep--;
		}
	}

	function goToNextStep(): void {
		const currentStepIndex = steps.findIndex((s) => s.id === currentStep);
		if (currentStepIndex < steps.length - 1 && steps[currentStepIndex].isComplete()) {
			currentStep++;
		}
	}

	function handleMonthChange(date: Date): void {
		calendarDate = date;
	}

	// --- BOOKING SUBMISSION ---
	async function handleProceedToPayment(): Promise<void> {
		if (!bookingActions.validateBooking()) {
			return;
		}
		await goto(`/checkout`);
	}
</script>

<svelte:head>
	<title>Book Your Visit - Zungri Museum | Southern Italian Heritage</title>
	<meta
		name="description"
		content="Reserve your tickets for an immersive journey through Southern Italian culture and heritage at Zungri Museum. Choose your date, tickets, and time."
	/>
	<meta
		name="keywords"
		content="Zungri Museum, book tickets, Southern Italy, cultural heritage, museum tickets"
	/>
	<link rel="canonical" href={page.url.href} />
</svelte:head>

<main class="from-background via-cream-50 to-primary-50 min-h-screen bg-gradient-to-br">
	<div class="container mx-auto max-w-7xl px-4 py-8 sm:py-12">
		<!-- Header Section -->
		<header class="mb-12 text-center">
			<h1
				class="font-display mb-4 text-4xl font-bold text-neutral-900 md:text-5xl"
				in:fade={{ duration: 800, delay: 200 }}
			>
				Book Your Visit
			</h1>
			<p
				class="font-body mx-auto max-w-2xl text-lg leading-relaxed text-neutral-600 md:text-xl"
				in:fade={{ duration: 800, delay: 400 }}
			>
				Follow the steps below to secure your spot.
			</p>
		</header>

		<!-- Progress Steps -->
		<div class="mb-12" in:slide={{ duration: 600, delay: 600, axis: 'y' }}>
			<div class="flex items-center justify-center space-x-2 md:space-x-4">
				{#each steps as step, index (step.id)}
					{@const isCompleted = step.isComplete()}
					{@const isActive = currentStep === step.id}
					{@const isAccessible = isStepAccessible(step.id)}
					<div class="flex items-center">
						<button
							type="button"
							class="group flex items-center space-x-3 rounded-full p-2 transition-all duration-300 disabled:cursor-not-allowed disabled:opacity-60"
							class:hover:bg-neutral-100={isAccessible}
							onclick={() => goToStep(step.id)}
							disabled={!isAccessible}
							aria-label={`Go to step ${step.id}: ${step.title}`}
						>
							<div
								class="flex h-10 w-10 items-center justify-center rounded-full border-2 transition-all duration-300 md:h-12 md:w-12"
								class:bg-primary-600={isCompleted}
								class:border-primary-600={isCompleted}
								class:text-white={isCompleted}
								class:bg-primary-100={isActive && !isCompleted}
								class:border-primary-400={isActive && !isCompleted}
								class:text-primary-600={isActive && !isCompleted}
								class:border-neutral-200={!isActive && !isCompleted}
								class:text-neutral-400={isActive && !isCompleted}
							>
								{#if isCompleted}
									<Check class="h-5 w-5" />
								{:else}
									<svelte:component this={step.icon} class="h-5 w-5" />
								{/if}
							</div>
							<div class="hidden text-left md:block">
								<div class="text-sm font-semibold text-neutral-900">{step.title}</div>
								<div class="text-xs text-neutral-900">{step.description}</div>
							</div>
						</button>
					</div>

					{#if index < steps.length - 1}
						<div
							class="h-0.5 w-8 flex-shrink-0 bg-neutral-200 transition-all duration-500"
							class:bg-primary-600={isStepAccessible(step.id + 1)}
						></div>
					{/if}
				{/each}
			</div>
		</div>

		<!-- Error Alert -->
		{#if $bookingError}
			<div class="mb-8" transition:slide={{ duration: 300 }}>
				<Alert type="error" message={$bookingError} />
			</div>
		{/if}

		<!-- Main Content Grid -->
		<div class="grid grid-cols-1 gap-8 lg:grid-cols-3 lg:gap-12">
			<!-- Steps Content Area -->
			<div class="lg:col-span-2">
				<div
					class="shadow-exhibit relative overflow-hidden rounded-2xl border border-neutral-100 bg-white"
				>
					{#if currentStep === 1}
						<div class="p-6 md:p-8" in:fade={{ duration: 400 }} out:fade={{ duration: 200 }}>
							<h2 class="font-heading mb-2 text-2xl font-bold text-neutral-900">
								Select Your Tickets
							</h2>
							<p class="mb-6 text-neutral-600">
								Choose the right experience for you or your group.
							</p>
							<TicketSelector
								language="en"
								class="w-full text-neutral-950"
								onselect={goToNextStep}
							/>
						</div>
					{/if}

					{#if currentStep === 2}
						<div class="p-6 md:p-8" in:fade={{ duration: 400 }} out:fade={{ duration: 200 }}>
							<h2 class="font-heading mb-2 text-2xl font-bold text-neutral-900">
								Select Your Visit Date
							</h2>
							<p class="mb-6 text-neutral-600">
								Choose an available date for your museum experience.
							</p>
							<Calendar
								class="w-full"
								selectedDate={$selectedDate}
								{availabilityMap}
								selectedTicketId={$selectedTicket?.id ?? null}
								onselect={goToNextStep}
								onmonthChange={handleMonthChange}
							/>
						</div>
					{/if}

					{#if currentStep === 3}
						<div class="p-6 md:p-8" in:fade={{ duration: 400 }} out:fade={{ duration: 200 }}>
							<h2 class="font-heading mb-2 text-2xl font-bold text-neutral-900">
								Choose Your Time Slot
							</h2>
							<p class="mb-6 text-neutral-600">
								Select the perfect time for your visit on {$selectedDate?.toLocaleDateString(
									'en-US',
									{ month: 'long', day: 'numeric' }
								)}.
							</p>
							{#if $isLoadingTimeSlots}
								<div class="flex h-48 items-center justify-center text-neutral-500">
									<Loader class="mr-2 animate-spin" /> Loading available times...
								</div>
							{:else}
								<TimeSlotPicker class="w-full" onselect={goToNextStep} />
							{/if}
						</div>
					{/if}

					{#if currentStep === 4}
						<div class="p-6 md:p-8" in:fade={{ duration: 400 }} out:fade={{ duration: 200 }}>
							<h2 class="font-heading mb-2 text-2xl font-bold text-neutral-900">
								Your Information
							</h2>
							<p class="mb-6 text-neutral-900">We need a few details to complete your booking.</p>
							<CustomerForm onsubmit={handleProceedToPayment} />
						</div>
					{/if}

					<!-- Navigation Footer -->
					<div class="border-t border-neutral-100 bg-neutral-50 p-4">
						<div class="flex items-center justify-between">
							<button
								type="button"
								class="inline-flex items-center rounded-md px-4 py-2 text-sm font-medium text-neutral-600 transition-colors duration-200 hover:bg-neutral-100 hover:text-neutral-900 disabled:cursor-not-allowed disabled:opacity-50"
								disabled={currentStep === 1}
								onclick={goToPreviousStep}
							>
								<ChevronLeft class="mr-1 h-4 w-4" />
								Previous
							</button>

							<div class="text-sm text-neutral-500">
								Step {currentStep} of {steps.length}
							</div>

							<button
								type="button"
								class="bg-primary-600 hover:bg-primary-700 inline-flex items-center rounded-md px-4 py-2 text-sm font-medium text-white shadow-sm transition-colors duration-200 disabled:cursor-not-allowed disabled:opacity-50"
								disabled={currentStep === steps.length || !steps[currentStep - 1].isComplete()}
								onclick={goToNextStep}
							>
								Next
								<ChevronRight class="ml-1 h-4 w-4" />
							</button>
						</div>
					</div>
				</div>
			</div>

			<!-- Booking Summary Sidebar -->
			<aside class="lg:col-span-1">
				<div class="sticky top-8">
					<BookingSummary {handleProceedToPayment} bind:currentStep />
				</div>
			</aside>
		</div>
	</div>

	<!-- Loading Overlay for Booking Creation -->
	{#if $isCreatingBooking}
		<div
			class="fixed inset-0 z-50 flex flex-col items-center justify-center bg-black/60 backdrop-blur-sm"
			transition:fade={{ duration: 300 }}
		>
			<div class="text-center text-white">
				<Loader class="mx-auto mb-4 h-12 w-12 animate-spin" />
				<h3 class="text-xl font-bold">Creating Your Booking</h3>
				<p>Please wait while we secure your visit...</p>
			</div>
		</div>
	{/if}
</main>



================================================================================
File: src/routes/book/+page.ts
================================================================================

/**
 * @file Booking Page - Server Load Function
 * @purpose Ensures essential data, like ticket types, is loaded before the page renders.
 * 
 * @dependencies
 * - SvelteKit: For PageLoad type and server-side fetch.
 * - bookingStore: To access booking actions and the `availableTicketTypes` store.
 * - svelte/store: To read the current state of a store via `get`.
 *
 * @notes
 * - This file has been updated to fix an import error. It now correctly checks the
 *   `availableTicketTypes` store instead of the removed `selectedTicketTypes`.
 * - This prevents redundant API calls if the ticket types are already populated in the store.
 * - Error handling is managed within the `loadTicketTypes` action.
 */
import { bookingActions, availableTicketTypes } from '$lib/stores/bookingStore';
import { get } from 'svelte/store';
import type { PageLoad } from './$types';

/**
 * Pre-loads necessary data for the booking page.
 * @param {object} params - SvelteKit load event parameters.
 * @param {typeof fetch} params.fetch - The fetch implementation to use (server or client).
 */
export const load: PageLoad = async ({ fetch }) => {
    // Check if the available ticket types have already been loaded into the store.
    const currentTicketTypes = get(availableTicketTypes);

    // If the store is empty, call the action to fetch them.
    // This is crucial for the first page load to populate the ticket selector.
    if (!currentTicketTypes || currentTicketTypes.length === 0) {
        // Pass the context-aware `fetch` to the action. This is essential for it
        // to work correctly during server-side rendering.
        await bookingActions.loadTicketTypes(fetch);
    }

    // The page component reads directly from the reactive stores,
    // so we don't need to return any data as props from the load function.
    return {};
};


================================================================================
File: src/routes/book/_components/BookingSummary.svelte
================================================================================

<script lang="ts">
	/**
	 * @file Booking Summary Component
	 * @purpose Displays a real-time summary of the user's booking selections and provides primary navigation controls.
	 *
	 * @dependencies
	 * - Svelte: For component logic and reactivity.
	 * - bookingStore: To access reactive state like summary details, price, and validation errors.
	 * - lucide-svelte: For icons.
	 *
	 * @notes
	 * - Uses `$bindable()` for `currentStep` to create a two-way binding with the parent page.
	 * - Disables the "Proceed to Payment" button until all steps are complete and the form is valid.
	 * - Provides a "Start Over" button to easily reset the entire booking process.
	 */
	import {
		bookingActions,
		bookingSummary,
		isCreatingBooking,
		customerInfo,
		validationErrors
	} from '$lib/stores/bookingStore';
	import { Calendar, Clock, CreditCard, Loader2, Ticket, RotateCcw } from 'lucide-svelte';

	let {
		currentStep = $bindable(),
		handleProceedToPayment
	}: {
		currentStep: number;
		handleProceedToPayment: () => Promise<void>;
	} = $props();

	// Derived state to check if the customer form is valid.
	const isCustomerFormValid = $derived(
		!$validationErrors.name &&
			!$validationErrors.email &&
			!!$customerInfo.name &&
			!!$customerInfo.email
	);

	// Derived state for enabling the final payment button.
	const canProceedToPayment = $derived($bookingSummary.isComplete && isCustomerFormValid);

	function startOver() {
		bookingActions.resetBooking();
		currentStep = 1;
	}
</script>

<div class="bg-cream-50 rounded-card shadow-soft border border-neutral-300 p-6">
	<h3 class="font-heading mb-6 text-2xl font-semibold text-neutral-800">Booking Summary</h3>

	{#if $bookingSummary.totalTickets === 0 && !$bookingSummary.date}
		<div
			class="rounded-card border-2 border-dashed border-neutral-300 p-8 text-center text-neutral-500"
		>
			<p>Your selections will appear here as you proceed.</p>
		</div>
	{/if}

	<div class="space-y-4">
		<!-- Date Summary -->
		{#if $bookingSummary.date}
			<div class="rounded-card bg-neutral-100 p-3">
				<header class="mb-2 flex items-center gap-2 text-sm font-medium text-neutral-600">
					<Calendar class="text-primary-500 h-5 w-5" />
					<span>Visit Date</span>
				</header>
				<p class="font-medium text-neutral-800">
					{$bookingSummary.date.toLocaleDateString('en-GB', {
						weekday: 'long',
						year: 'numeric',
						month: 'long',
						day: 'numeric'
					})}
				</p>
			</div>
		{/if}

		<!-- Tickets Summary -->
		{#if $bookingSummary.tickets.length > 0}
			<div class="rounded-card bg-neutral-100 p-3">
				<header class="mb-2 flex items-center gap-2 text-sm font-medium text-neutral-600">
					<Ticket class="text-primary-500 h-5 w-5" />
					<span>Selected Ticket</span>
				</header>
				<div class="space-y-2">
					{#each $bookingSummary.tickets as ticket (ticket.type.id)}
						<div class="flex justify-between text-sm text-neutral-800">
							<span>{ticket.quantity}x {ticket.type.name_translations?.en ?? 'Ticket'}</span>
							<span class="font-medium">€{ticket.subtotal.toFixed(2)}</span>
						</div>
					{/each}
				</div>
			</div>
		{/if}

		<!-- Time Slot Summary -->
		{#if $bookingSummary.timeSlot}
			<div class="rounded-card bg-neutral-100 p-3">
				<header class="mb-2 flex items-center gap-2 text-sm font-medium text-neutral-600">
					<Clock class="text-primary-500 h-5 w-5" />
					<span>Time Slot</span>
				</header>
				<p class="font-medium text-neutral-800">
					{new Date($bookingSummary.timeSlot.start_time).toLocaleTimeString('en-GB', {
						hour: '2-digit',
						minute: '2-digit'
					})}
					-
					{new Date($bookingSummary.timeSlot.end_time).toLocaleTimeString('en-GB', {
						hour: '2-digit',
						minute: '2-digit'
					})}
				</p>
			</div>
		{/if}
	</div>

	<!-- Total Price -->
	{#if $bookingSummary.totalPrice > 0}
		<div
			class="border-primary-200 bg-primary-50 rounded-card text-primary-600 mt-6 flex items-baseline justify-between border p-4"
		>
			<span class="text-lg font-semibold">Total</span>
			<span class="text-2xl font-bold">€{$bookingSummary.totalPrice.toFixed(2)}</span>
		</div>
	{/if}

	<!-- Action Buttons -->
	<div class="mt-6 flex flex-col gap-3">
		{#if currentStep === 4}
			<button
				type="button"
				class="rounded-card bg-primary-500 text-primary-50 focus-visible:outline-primary-300 inline-flex w-full items-center justify-center gap-2 border border-transparent px-4 py-3 font-medium transition-all duration-200 hover:brightness-110 focus-visible:outline-2 focus-visible:outline-offset-2 disabled:cursor-not-allowed disabled:opacity-60"
				onclick={handleProceedToPayment}
				disabled={!canProceedToPayment || $isCreatingBooking}
			>
				{#if $isCreatingBooking}
					<Loader2 class="h-4 w-4 animate-spin" />
					<span>Securing Your Booking...</span>
				{:else}
					<CreditCard class="h-4 w-4" />
					<span>Proceed to Payment</span>
				{/if}
			</button>
		{:else}
			<div class="rounded-card bg-neutral-100 p-4 text-center text-sm text-neutral-500">
				Complete all steps to proceed to payment.
			</div>
		{/if}

		{#if currentStep > 1}
			<button
				type="button"
				class="rounded-card focus-visible:outline-primary-300 inline-flex w-full items-center justify-center gap-2 border border-neutral-300 bg-transparent px-4 py-3 font-medium text-neutral-800 transition-all duration-200 hover:bg-neutral-100 focus-visible:outline-2 focus-visible:outline-offset-2"
				onclick={startOver}
			>
				<RotateCcw class="h-4 w-4" />
				<span>Start Over</span>
			</button>
		{/if}
	</div>
</div>

<style>
</style>



================================================================================
File: src/routes/book/_components/CustomerForm.svelte
================================================================================

<script lang="ts">
	import { User } from 'lucide-svelte';
	import { customerInfo, validationErrors } from '$lib/stores/bookingStore';
</script>

<div class="bg-cream-50 rounded-card border border-neutral-300 p-6">
	<header class="mb-2 flex items-center gap-2">
		<User class="text-primary-500 h-5 w-5" />
		<h3 class="font-heading text-xl font-semibold text-neutral-800">Your Information</h3>
	</header>
	<p class="mb-6 text-sm text-neutral-600">
		Please provide your contact details for the booking confirmation.
	</p>

	<div class="flex flex-col gap-4">
		<!-- Name Field -->
		<div>
			<label for="customer-name" class="mb-1 block text-sm font-medium text-neutral-900"
				>Full Name *</label
			>
			<input
				id="customer-name"
				type="text"
				placeholder="Enter your full name"
				bind:value={$customerInfo.name}
				class:invalid={$validationErrors.name}
				class="rounded-card focus:ring-primary-300 focus:border-primary-300 w-full border border-neutral-300 bg-white px-3 py-2 text-neutral-950 transition-all duration-200 focus:outline-none focus:ring-2"
				required
				aria-invalid={$validationErrors.name ? 'true' : 'false'}
				aria-describedby="name-error"
			/>
			{#if $validationErrors.name}
				<p id="name-error" class="text-error mt-1 text-xs">{$validationErrors.name}</p>
			{/if}
		</div>

		<!-- Email Field -->
		<div>
			<label for="customer-email" class="mb-1 block text-sm font-medium text-neutral-700"
				>Email Address *</label
			>
			<input
				id="customer-email"
				type="email"
				placeholder="Enter your email address"
				bind:value={$customerInfo.email}
				class:invalid={$validationErrors.email}
				class="rounded-card focus:ring-primary-300 focus:border-primary-300 invalid:border-error invalid:focus:ring-error/50 w-full border border-neutral-300 bg-white px-3 py-2 text-neutral-950 transition-all duration-200 focus:outline-none focus:ring-2"
				required
				aria-invalid={$validationErrors.email ? 'true' : 'false'}
				aria-describedby="email-error"
			/>
			{#if $validationErrors.email}
				<p id="email-error" class="text-error mt-1 text-xs">{$validationErrors.email}</p>
			{:else}
				<p class="mt-1 text-xs text-neutral-500">
					We'll send your e-tickets to this email address.
				</p>
			{/if}
		</div>
	</div>
</div>



================================================================================
File: src/routes/checkout/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file +page.svelte for /checkout
	 * @purpose The main checkout page that orchestrates the payment process.
	 *
	 * @dependencies
	 * - svelte: For component logic and Svelte 5 runes.
	 * - $lib/stores/bookingStore: To get booking details for the order.
	 * - $lib/stores/cartStore: To get merchandise items for the order.
	 * - $lib/api/apiClient: To call the `create-payment-intent` endpoint.
	 * - $lib/components/PaymentForm.svelte: The Stripe payment form component.
	 *
	 * @notes
	 * - This page orchestrates the checkout process.
	 * - It uses a `$effect` to reactively fetch the payment intent `clientSecret` from the backend once all required data is available from the stores.
	 * - It handles loading and error states gracefully during the API call.
	 * - All type definitions are imported from their respective stores/schema files to ensure type safety.
	 */

	import { bookingSummary, customerInfo, type BookingSummary } from '$lib/stores/bookingStore';
	import { cart, cartTotal, type CartItem } from '$lib/stores/cartStore';
	import { apiClient, type ApiError } from '$lib/api/apiClient';
	import type { OrderCreatePayload } from '$lib/schemas/payment';
	import PaymentForm from '$lib/components/PaymentForm.svelte';
	import { Loader2 } from 'lucide-svelte';

	// Local reactive state for the component
	let clientSecret = $state<string | null>(null);
	let isLoading = $state(true);
	let errorMessage = $state<string | undefined>();

	// Derived value for the total amount, combines booking and cart totals.
	const totalAmount = $derived($bookingSummary.totalPrice + $cartTotal);

	// This effect runs on the client-side to prepare the payment.
	// It's triggered whenever its dependencies ($bookingSummary, $cart, totalAmount) change.
	$effect(() => {
		// Guard against running on the server
		if (typeof window === 'undefined') return;

		// Reset state for re-computation
		isLoading = true;
		errorMessage = undefined;
		clientSecret = null;

		if (totalAmount <= 0) {
			errorMessage = "Your cart is empty. There's nothing to check out.";
			isLoading = false;
			return;
		}

		// Prepare the payload for the backend API call
		const payload: OrderCreatePayload = {
			customer_name: $customerInfo.name,
			customer_email: $customerInfo.email
		};

		if ($bookingSummary.isComplete) {
			payload.booking = {
				time_slot_id: $bookingSummary.timeSlot!.id, // Non-null assertion is safe due to isComplete check
				quantity: $bookingSummary.totalTickets,
				customer_name: $customerInfo.name,
				customer_email: $customerInfo.email
			};
		}

		if ($cart.length > 0) {
			payload.merchandise_items = $cart.map((item) => ({
				merchandise_id: item.id,
				quantity: item.quantity
			}));
		}

		// Asynchronously fetch the client secret
		(async () => {
			try {
				const response = await apiClient.createPaymentIntent(payload);
				clientSecret = response.client_secret;
			} catch (e) {
				const error = e as ApiError;
				console.error('Failed to create payment intent:', error);
				errorMessage = error.detail || 'Could not initiate payment. Please try again.';
			} finally {
				isLoading = false;
			}
		})();
	});
</script>

<svelte:head>
	<title>Checkout - Zungri Museum</title>
	<meta name="description" content="Complete your purchase securely." />
</svelte:head>

<main class="bg-neutral-50 py-12 md:py-16">
	<div class="container mx-auto max-w-4xl px-4">
		<h1 class="font-display mb-8 text-center text-4xl font-bold text-neutral-900">Checkout</h1>

		<div class="grid grid-cols-1 gap-12 lg:grid-cols-2">
			<!-- Order Summary -->
			<aside class="rounded-lg border bg-white p-6 shadow-sm lg:order-last">
				<h2 class="mb-4 text-xl font-semibold text-neutral-800">Order Summary</h2>
				<div class="space-y-4">
					<!-- Booking Items -->
					{#if $bookingSummary.tickets.length > 0}
						<div class="border-b pb-2">
							<h3 class="mb-2 font-medium text-neutral-600">Tickets</h3>
							{#each $bookingSummary.tickets as ticket}
								<div class="flex justify-between text-sm">
									<span>{ticket.quantity}x {ticket.type.name_translations?.en ?? 'Ticket'}</span>
									<span class="font-medium">€{ticket.subtotal.toFixed(2)}</span>
								</div>
							{/each}
						</div>
					{/if}

					<!-- Merchandise Items -->
					{#if $cart.length > 0}
						<div class="border-b pb-2">
							<h3 class="mb-2 font-medium text-neutral-600">Merchandise</h3>
							{#each $cart as item}
								<div class="flex justify-between text-sm">
									<span>{item.quantity}x {item.name_translations?.en ?? 'Item'}</span>
									<span class="font-medium">€{(item.price * item.quantity).toFixed(2)}</span>
								</div>
							{/each}
						</div>
					{/if}

					<!-- Total -->
					<div class="flex justify-between pt-4 text-lg font-bold">
						<span>Total</span>
						<span>€{totalAmount.toFixed(2)}</span>
					</div>
				</div>
			</aside>

			<!-- Payment Form -->
			<section class="rounded-lg border bg-white p-6 shadow-sm">
				<h2 class="mb-6 text-xl font-semibold text-neutral-800">Payment Details</h2>
				{#if isLoading}
					<div class="flex h-48 items-center justify-center text-neutral-500">
						<Loader2 class="mr-2 h-6 w-6 animate-spin" />
						<span>Preparing secure payment...</span>
					</div>
				{:else if errorMessage}
					<div
						class="rounded-md border border-red-200 bg-red-50 p-4 text-center text-red-700"
						role="alert"
					>
						<p class="font-semibold">Payment Error</p>
						<p class="text-sm">{errorMessage}</p>
					</div>
				{:else if clientSecret}
					<PaymentForm {clientSecret} />
				{:else}
					<div
						class="rounded-md border border-neutral-200 bg-neutral-50 p-4 text-center text-neutral-600"
						role="alert"
					>
						Could not load payment form.
					</div>
				{/if}
			</section>
		</div>
	</div>
</main>



================================================================================
File: src/routes/contact/+page.server.ts
================================================================================

/**
 * @file +page.server.ts (Contact Page)
 * @description Server-side logic for the Contact Us page.
 * - Initializes the contact form using Superforms.
 * - Handles form submission by calling the backend API.
 *
 * @dependencies
 * - @sveltejs/kit: For `fail` action response.
 * - sveltekit-superforms: For form management and validation.
 * - ./schema: Zod schema for form validation.
 */
import { fail } from '@sveltejs/kit';
import { message, superValidate } from 'sveltekit-superforms';
import { zod } from 'sveltekit-superforms/adapters';
import { formSchema } from './schema';
import type { Actions } from '@sveltejs/kit';

export const load = async () => {
    // Initialize the form on page load
    return {
        form: await superValidate(zod(formSchema))
    };
};

export const actions: Actions = {
    default: async ({ request, fetch }) => {
        const form = await superValidate(request, zod(formSchema));

        if (!form.valid) {
            // Return validation errors
            return fail(400, { form });
        }

        try {
            // Forward the validated data to the backend API
            const response = await fetch('api/v1/content/contact', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(form.data)
            });

            if (!response.ok) {
                const errorData = await response.json();
                return message(form, `Error: ${errorData.detail || 'Failed to send message.'}`, {
                    status: response.status
                });
            }

            // Return a success message
            return message(form, 'Thank you for your message! We will get back to you shortly.');
        } catch (e) {
            console.error('Contact form submission error:', e);
            return message(form, 'An unexpected server error occurred. Please try again later.', {
                status: 500
            });
        }
    }
};


================================================================================
File: src/routes/contact/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file +page.svelte (Contact Page)
	 * @description Contact page for the Zungri Museum. Includes contact details,
	 * an interactive map, and a contact form handled by SvelteKit Superforms.
	 *
	 * @dependencies
	 * - sveltekit-superforms: For form handling and validation.
	 * - ./$types: For PageData type.
	 * - ./schema: Zod schema for the form.
	 * - $lib/components/ui/*: Reusable UI components.
	 * - lucide-svelte: For icons.
	 */
	import type { PageData } from './$types';
	import { formSchema } from './schema';
	import { superForm } from 'sveltekit-superforms';
	import { zodClient } from 'sveltekit-superforms/adapters';
	import { Mail, MapPin, Phone, Send } from 'lucide-svelte';
	import Button from '$lib/components/ui/Button.svelte';
	import Input from '$lib/components/ui/Input.svelte';
	import Alert from '$lib/components/ui/Alert.svelte';

	let { data }: { data: PageData } = $props();

	const form = superForm(data.form, {
		validators: zodClient(formSchema),
		taintedMessage: null,
		onUpdated: ({ form: f }) => {
			if (f.valid) {
				form.reset();
			}
		}
	});

	const { form: formData, errors, submitting, enhance, message: messageStore } = form;

	let isSuccessMessage = $derived($messageStore && !$messageStore.toLowerCase().includes('error'));
</script>

<svelte:head>
	<title>Contact Us - Zungri Museum</title>
	<meta
		name="description"
		content="Get in touch with the Zungri Museum. Find our address, phone number, email, and send us a message through our contact form."
	/>
</svelte:head>

<div class="bg-gray-900 text-white">
	<div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
		<div class="text-center">
			<h1 class="text-4xl font-bold tracking-tight sm:text-5xl">Get in Touch</h1>
			<p class="mt-4 text-lg text-gray-300">
				We'd love to hear from you. Whether you have a question about our collections, tickets, or
				anything else, our team is ready to answer all your questions.
			</p>
		</div>
		<div class="mt-16 grid grid-cols-1 gap-12 lg:grid-cols-3">
			<!-- Contact Information -->
			<div class="space-y-8">
				<div class="flex items-start space-x-4">
					<div class="flex-shrink-0">
						<div class="flex h-12 w-12 items-center justify-center rounded-md bg-blue-600">
							<MapPin class="h-6 w-6 text-white" />
						</div>
					</div>
					<div>
						<h3 class="text-lg font-semibold">Our Address</h3>
						<p class="mt-1 text-gray-400">
							Via Roma, 123<br />
							89020 Zungri (VV), Calabria, Italia
						</p>
					</div>
				</div>
				<div class="flex items-start space-x-4">
					<div class="flex-shrink-0">
						<div class="flex h-12 w-12 items-center justify-center rounded-md bg-blue-600">
							<Phone class="h-6 w-6 text-white" />
						</div>
					</div>
					<div>
						<h3 class="text-lg font-semibold">Call Us</h3>
						<a href="tel:+390963123456" class="mt-1 text-gray-400 hover:text-blue-400"
							>+39 0963 123456</a
						>
					</div>
				</div>
				<div class="flex items-start space-x-4">
					<div class="flex-shrink-0">
						<div class="flex h-12 w-12 items-center justify-center rounded-md bg-blue-600">
							<Mail class="h-6 w-6 text-white" />
						</div>
					</div>
					<div>
						<h3 class="text-lg font-semibold">Email Us</h3>
						<a href="mailto:info@museozungri.it" class="mt-1 text-gray-400 hover:text-blue-400"
							>info@museozungri.it</a
						>
					</div>
				</div>
			</div>

			<!-- Contact Form -->
			<div class="lg:col-span-2">
				<div class="rounded-lg bg-gray-800 p-8 shadow-lg">
					<h2 class="text-2xl font-bold">Send us a message</h2>
					<form method="POST" use:enhance class="mt-6 space-y-6">
						{#if $messageStore}
							<Alert type={isSuccessMessage ? 'success' : 'error'} message={$messageStore} />
						{/if}

						<div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
							<Input
								id="name"
								name="name"
								label="Full Name"
								placeholder="Your Name"
								required
								bind:value={$formData.name}
								disabled={$submitting}
								inputClass={$errors.name ? 'border-red-500' : ''}
							/>
							<Input
								type="email"
								id="email"
								name="email"
								label="Email Address"
								placeholder="you@example.com"
								required
								bind:value={$formData.email}
								disabled={$submitting}
								inputClass={$errors.email ? 'border-red-500' : ''}
							/>
						</div>

						<Input
							id="subject"
							name="subject"
							label="Subject"
							placeholder="e.g., Question about tickets"
							required
							bind:value={$formData.subject}
							disabled={$submitting}
							inputClass={$errors.subject ? 'border-red-500' : ''}
						/>

						<div>
							<label for="message" class="mb-1 block text-sm font-medium text-gray-300"
								>Message</label
							>
							<textarea
								id="message"
								name="message"
								rows="4"
								placeholder="Your message..."
								required
								bind:value={$formData.message}
								disabled={$submitting}
								class="w-full rounded-md border border-gray-600 bg-gray-700 px-3 py-2 text-white placeholder-gray-400 focus:border-blue-500 focus:outline-none focus:ring-2 focus:ring-blue-500 {$errors.message
									? 'border-red-500'
									: ''}"
							></textarea>
						</div>

						<div class="text-right">
							<Button
								type="submit"
								loading={$submitting}
								disabled={$submitting}
								class="min-w-[150px]"
							>
								{#if !$submitting}
									<Send class="mr-2 h-4 w-4" />
								{/if}
								Send Message
							</Button>
						</div>
					</form>
				</div>
			</div>
		</div>
	</div>
</div>



================================================================================
File: src/routes/contact/schema.ts
================================================================================

/**
* @file schema.ts (for /contact)
* @description Zod schema for validating the contact form.
*
* @dependencies
* - zod: For schema definition and validation.
*/
import { z } from 'zod';


export const formSchema = z.object({
    name: z.string().trim().min(2, { message: 'Name must be at least 2 characters.' }),
    email: z.string().email({ message: 'Please enter a valid email address.' }),
    subject: z.string().trim().min(5, { message: 'Subject must be at least 5 characters.' }),
    message: z.string().trim().min(10, { message: 'Message must be at least 10 characters.' })
});

export type FormSchema = typeof formSchema;


================================================================================
File: src/routes/plan-your-visit/+page.server.ts
================================================================================

/**

@file +page.server.ts (Plan Your Visit Page)

@description Server-side loader for the "Plan Your Visit" page. Fetches dynamic content

from the backend API based on the 'plan-your-visit' slug and the current locale.

@dependencies

@sveltejs/kit: For error handling.

paraglide-js-sveltekit: For getting the current language tag.

../$types: Type definitions for the page load event.

../../lib/types/api: API response types.
*/
import { error } from '@sveltejs/kit';

import { getLocale } from '$lib/paraglide/runtime';

import type { PageServerLoad } from './$types';



export const load: PageServerLoad = async ({ fetch }) => {
    try {
        const lang = getLocale();
        const slug = 'plan-your-visit';

        console.log(
            `[Plan Your Visit Page Load] Fetching content for slug '${slug}' in language '${lang}'`
        );

        // Fetch content from the backend API
        const response = await fetch(`/api/v1/content/${slug}/${lang}`);

        if (!response.ok) {
            const errorData = await response.json();
            console.error(`[Plan Your Visit Page Load] API Error (${response.status}):`, errorData.detail);
            error(response.status, {
                message: 'Could not load visit information.',
                details: errorData.detail || 'The requested content could not be found.'
            });
        }

        const content = await response.json();

        return {
            content
        };
    } catch (e: any) {
        console.error('[Plan Your Visit Page Load] Unexpected error:', e);
        error(500, {
            message: 'Internal Server Error',
            details: 'An unexpected error occurred while trying to load the page.'
        });
    }


};


================================================================================
File: src/routes/plan-your-visit/+page.svelte
================================================================================

<!--
/**
* @file +page.svelte (Plan Your Visit Page)
* @description Renders the 'Plan Your Visit' page, displaying content from the CMS,
* a map, and key visitor information like opening hours and ticket prices.
*
* @dependencies
* - ./$types: For typing the `data` prop.
* - lucide-svelte: For icons.
* - $lib/components/ui/Button.svelte: Reusable button component.
*/
-->

<script lang="ts">
	import type { PageData } from './$types';
	import { Clock, MapPin, Ticket, Users, ArrowRight } from 'lucide-svelte';
	import Button from '$lib/components/ui/Button.svelte';

	let { data }: { data: PageData } = $props();
	const { content } = data;
</script>

<svelte:head>
	<title>{content.title} - Museo di Zungri</title>
	<meta
		name="description"
		content="Plan your visit to the Zungri Museum. Find opening hours, ticket prices, location, and accessibility information."
	/>
</svelte:head>

<div class="bg-gray-50">
	<!-- Header Section -->
	<div class="bg-blue-800 text-white">
		<div class="mx-auto max-w-7xl px-4 py-16 text-center sm:px-6 lg:px-8">
			<h1 class="text-4xl font-bold tracking-tight sm:text-5xl">{content.title}</h1>
			<p class="mx-auto mt-4 max-w-2xl text-lg text-blue-200">
				All the information you need for an unforgettable experience at the Zungri Museum.
			</p>
		</div>
	</div>

	<!-- Main Content Grid -->
	<div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
		<div class="grid grid-cols-1 gap-16 lg:grid-cols-3">
			<!-- Left Column: Dynamic Content -->
			<div class="prose prose-lg max-w-none text-gray-700 lg:col-span-2">
				{@html content.content}
			</div>

			<!-- Right Column: Key Information Cards -->
			<aside class="space-y-8">
				<!-- Opening Hours -->
				<div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
					<div class="flex items-center space-x-3">
						<Clock class="h-6 w-6 text-blue-600" />
						<h3 class="text-xl font-semibold text-gray-900">Opening Hours</h3>
					</div>
					<ul class="mt-4 space-y-2 text-gray-600">
						<li class="flex justify-between">
							<span>Tuesday - Sunday</span>
							<span class="font-medium">9:00 - 17:00</span>
						</li>
						<li class="flex justify-between">
							<span>Monday</span>
							<span class="font-medium text-red-600">Closed</span>
						</li>
					</ul>
					<p class="mt-2 text-sm text-gray-500">Last admission 30 minutes before closing.</p>
				</div>

				<!-- Ticket Information -->
				<div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
					<div class="flex items-center space-x-3">
						<Ticket class="h-6 w-6 text-green-600" />
						<h3 class="text-xl font-semibold text-gray-900">Tickets</h3>
					</div>
					<ul class="mt-4 space-y-2 text-gray-600">
						<li class="flex justify-between">
							<span>Full Price</span>
							<span class="font-medium">€5.00</span>
						</li>
						<li class="flex justify-between">
							<span>Reduced (6-18, 65+)</span>
							<span class="font-medium">€3.00</span>
						</li>
						<li class="flex justify-between">
							<span>Children (under 6)</span>
							<span class="font-medium">Free</span>
						</li>
					</ul>
					<Button href="/book" class="mt-6 w-full">
						Book Tickets Online
						<ArrowRight class="ml-2 h-4 w-4" />
					</Button>
				</div>

				<!-- Group Visits -->
				<div class="rounded-lg border border-gray-200 bg-white p-6 shadow-sm">
					<div class="flex items-center space-x-3">
						<Users class="h-6 w-6 text-purple-600" />
						<h3 class="text-xl font-semibold text-gray-900">Group & School Visits</h3>
					</div>
					<p class="mt-4 text-gray-600">
						We offer special rates and guided tours for groups and schools. Please contact us to
						arrange your visit.
					</p>
					<Button href="/contact" variant="outline" class="mt-4 w-full">Contact Us</Button>
				</div>
			</aside>
		</div>
	</div>

	<!-- Map Section -->
	<div class="border-t border-gray-200">
		<div class="mx-auto max-w-7xl px-4 py-16 sm:px-6 lg:px-8">
			<div class="text-center">
				<div class="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-blue-100">
					<MapPin class="h-6 w-6 text-blue-600" />
				</div>
				<h2 class="mt-4 text-3xl font-bold tracking-tight text-gray-900">How to Find Us</h2>
				<p class="mx-auto mt-4 max-w-2xl text-lg text-gray-600">
					We are located in the historic center of Zungri, easily accessible by car.
				</p>
			</div>
			<div class="mt-8 aspect-[16/9] overflow-hidden rounded-lg bg-gray-200 shadow-md">
				<!-- Embedded Google Map -->
				<iframe
					src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3148.835497985854!2d16.00230131532019!3d38.65999897960786!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x13151b72b8c0677b%3A0x9d32095f9e944b2c!2sInsediamento%20Rupestre%20e%20Museo%20della%20Civilt%C3%A0%20Rupestre%20e%20Contadina!5e0!3m2!1sen!2sit!4v1678886400000!5m2!1sen!2sit"
					width="100%"
					height="100%"
					style="border:0;"
					allowfullscreen={true}
					loading="lazy"
					referrerpolicy="no-referrer-when-downgrade"
					title="Map showing location of Zungri Museum"
				></iframe>
			</div>
		</div>
	</div>
</div>



================================================================================
File: src/routes/shop/+page.server.ts
================================================================================

/**
    * @file +page.server.ts for the main shop page
    * @purpose Server-side data loading for the merchandise listing page.
    * 
    * @dependencies
    * - @sveltejs/kit: For `error` helper and `PageServerLoad` type.
    * - $lib/api/apiClient: To fetch merchandise data and handle API errors.
    *
    * @notes
    * - Fetches all merchandise items using the API client.
    * - Provides SEO-friendly title and meta description.
    * - Implements robust error handling, converting API errors into SvelteKit error pages.
    */

import { apiClient, handleApiError } from '$lib/api/apiClient';
import { error } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';

/**
 * SvelteKit load function to fetch data before the page is rendered.
 * @param {object} context - The SvelteKit load event context, containing `fetch`.
 * @returns A promise that resolves to the data for the page.
 * @throws {Error} A SvelteKit error if the API call fails.
 */
export const load: PageServerLoad = async ({ fetch }) => {
    try {
        const merchandise = await apiClient.getMerchandise(fetch);
        return {
            merchandise,
            title: 'Shop - Zungri Museum',
            metaDescription: 'Browse official merchandise from the Zungri Museum. Find unique souvenirs and gifts.'
        };
    } catch (e) {
        const err = handleApiError(e, 'Failed to load merchandise');
        throw error(err.status, err.details);
    }
};


================================================================================
File: src/routes/shop/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file +page.svelte for /shop
	 * @purpose Renders the main merchandise listing page for the museum shop.
	 *
	 * @dependencies
	 * - svelte: For component logic and transitions.
	 * - $lib/components/ProductCard.svelte: The component for displaying each product.
	 *
	 * @notes
	 * - Receives merchandise data from its corresponding `+page.server.ts` load function.
	 * - Displays products in a responsive grid.
	 * - Includes a fallback message if no products are available.
	 */
	import ProductCard from '$lib/components/ProductCard.svelte';
	import { fade } from 'svelte/transition';

	let { data } = $props();
</script>

<svelte:head>
	<title>{data.title}</title>
	<meta name="description" content={data.metaDescription} />
</svelte:head>

<div class="bg-background-secondary py-12 md:py-16">
	<div class="container mx-auto max-w-7xl px-4">
		<header class="mb-12 text-center">
			<h1 class="font-display text-4xl font-bold text-neutral-900 md:text-5xl">Museum Shop</h1>
			<p class="font-body mx-auto mt-4 max-w-2xl text-lg text-neutral-600">
				Take a piece of history home with you. Explore our collection of books, replicas, and unique
				souvenirs.
			</p>
		</header>

		{#if data.merchandise && data.merchandise.length > 0}
			<div
				class="grid grid-cols-1 gap-8 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
				in:fade={{ duration: 500 }}
			>
				{#each data.merchandise as product (product.id)}
					<ProductCard {product} />
				{/each}
			</div>
		{:else}
			<div class="py-16 text-center text-neutral-500">
				<p class="text-lg">Our online shop is currently being stocked.</p>
				<p class="mt-2">Please check back later for our unique collection!</p>
			</div>
		{/if}
	</div>
</div>



================================================================================
File: src/routes/shop/[productId]/+page.server.ts
================================================================================

/**
     * @file +page.server.ts for the product detail page
     * @purpose Server-side data loading for a single merchandise item.
     * 
     * @dependencies
     * - @sveltejs/kit: For `error` helper and `PageServerLoad` type.
     * - $lib/api/apiClient: To fetch single product data and handle API errors.
     *
     * @notes
     * - Fetches a single merchandise item by its ID from the URL parameters.
     * - Generates a dynamic, SEO-friendly title and meta description for the product.
     * - Gracefully handles 404 errors if a product is not found, showing a standard "Not Found" page.
     */
import { apiClient, handleApiError } from '$lib/api/apiClient';
import { error } from '@sveltejs/kit';
import type { PageServerLoad } from './$types';

/**
 * SvelteKit load function to fetch a single product's data before the page is rendered.
 * @param {object} context - The SvelteKit load event context, containing `params` and `fetch`.
 * @returns A promise that resolves to the data for the product detail page.
 * @throws {Error} A SvelteKit error if the API call fails or the product is not found.
 */
export const load: PageServerLoad = async ({ params, fetch }) => {
    try {
        const product = await apiClient.getMerchandiseItem(params.productId, fetch);
        const name = product.name_translations['en'] || Object.values(product.name_translations)[0];
        const description = product.description_translations?.['en'] || `Details for ${name}.`;

        return {
            product,
            title: `${name} - Zungri Museum Shop`,
            metaDescription: description.substring(0, 160) // Truncate for meta tag
        };
    } catch (e) {
        const err = handleApiError(e, 'Failed to load product details');
        // Specifically handle 404 to show a user-friendly "Not Found" page.
        if (err.status === 404) {
            throw error(404, 'Product not found');
        }
        throw error(err.status, err.details);
    }
};


================================================================================
File: src/routes/shop/[productId]/+page.svelte
================================================================================

<script lang="ts">
	/**
	 * @file +page.svelte for /shop/[productId]
	 * @purpose Renders the detailed view for a single merchandise product.
	 * @dependencies
	 * - svelte: For component logic and transitions.
	 * - lucide-svelte: For icons.
	 * - $lib/stores/cartStore: For adding items to the cart.
	 * @notes
	 * - Receives product data from its `+page.server.ts` load function.
	 * - Displays product details including name, price, description, and stock status.
	 * - Provides an input to select quantity and an "Add to Cart" button.
	 * - The "Add to Cart" button is disabled for out-of-stock items.
	 */
	import { cart } from '$lib/stores/cartStore';
	import { fade } from 'svelte/transition';
	import { ShoppingCart } from 'lucide-svelte';

	let { data } = $props();
	const { product } = data;

	// Use $state for reactive state variable
	let quantity = $state(1);

	/** Adds the selected quantity of the current product to the cart. */
	function handleAddToCart() {
		cart.addToCart(product, quantity);
		// A toast notification could be triggered here for user feedback.
	}

	// Determine display language and fallbacks for name and description.
	const lang = 'en';
	const name = product.name_translations[lang] || Object.values(product.name_translations)[0];
	const description =
		product.description_translations?.[lang] ||
		Object.values(product.description_translations || {})[0] ||
		'<p>No description available.</p>';

	// Use $derived for reactive stock status
	const stockStatus = $derived(
		product.inventory > 0
			? product.inventory > 10
				? 'In Stock'
				: `Low Stock (${product.inventory} left)`
			: 'Out of Stock'
	);
</script>

<svelte:head>
	<title>{data.title}</title>
	<meta name="description" content={data.metaDescription} />
</svelte:head>

<div class="bg-white py-12 md:py-16" in:fade={{ duration: 300 }}>
	<div class="container mx-auto max-w-5xl px-4">
		<div class="grid grid-cols-1 gap-8 md:grid-cols-2 md:gap-12">
			<!-- Image Section -->
			<div class="aspect-h-1 aspect-w-1 w-full overflow-hidden rounded-lg bg-neutral-100">
				<!-- Placeholder for product image. -->
				<div class="flex h-full w-full items-center justify-center text-neutral-400">
					<svg
						xmlns="http://www.w3.org/2000/svg"
						width="96"
						height="96"
						viewBox="0 0 24 24"
						fill="none"
						stroke="currentColor"
						stroke-width="1"
						stroke-linecap="round"
						stroke-linejoin="round"
						><rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect><circle
							cx="8.5"
							cy="8.5"
							r="1.5"
						></circle><polyline points="21 15 16 10 5 21"></polyline></svg
					>
				</div>
			</div>

			<!-- Details Section -->
			<div class="flex flex-col">
				<h1 class="font-display text-3xl font-bold text-neutral-900 md:text-4xl">{name}</h1>

				<p class="text-primary-600 mt-4 text-3xl font-bold">
					€{product.price.toFixed(2)}
				</p>

				<div class="mt-4">
					<span
						class="text-sm font-medium"
						class:text-success={product.inventory > 10}
						class:text-warning={product.inventory > 0 && product.inventory <= 10}
						class:text-error={product.inventory <= 0}
					>
						{stockStatus}
					</span>
				</div>

				<div class="prose prose-neutral mt-6 max-w-none text-neutral-600">
					{@html description}
				</div>

				<div class="mt-8 flex items-center gap-4">
					<label for="quantity" class="font-medium text-neutral-700">Quantity:</label>
					<input
						type="number"
						id="quantity"
						bind:value={quantity}
						min="1"
						max={product.inventory}
						class="focus:border-primary-500 focus:ring-primary-500 w-20 rounded-md border-neutral-300 text-center shadow-sm"
						disabled={product.inventory <= 0}
						aria-label="Product quantity"
					/>
				</div>

				<div class="mt-auto pt-8">
					<button
						type="button"
						class="bg-primary-500 text-primary-50 hover:bg-primary-600 flex w-full items-center justify-center gap-2 rounded-md px-8 py-3 text-base font-medium shadow-sm transition-colors disabled:cursor-not-allowed disabled:opacity-50"
						onclick={handleAddToCart}
						disabled={product.inventory <= 0 || quantity > product.inventory || quantity < 1}
					>
						<ShoppingCart class="h-5 w-5" />
						<span>{product.inventory > 0 ? 'Add to Cart' : 'Out of Stock'}</span>
					</button>
					{#if quantity > product.inventory && product.inventory > 0}
						<p class="text-error mt-2 text-center text-sm">
							Only {product.inventory} available in stock.
						</p>
					{/if}
				</div>
			</div>
		</div>
	</div>
</div>



================================================================================
File: src/types.ts
================================================================================

export type SupabaseJwt = {
    aal: string;
    aud: string;
    email: string;
    exp: number;
    iat: number;
    phone: string;
    role: string;
    session_id: string;
    sub: string;
    amr?: { method: string; timestamp: number; }[];
    app_metadata?: {
        provider?: string;
        providers?: string[];
        [key: string]: any;
    };
    is_anonymous?: boolean;
    iss?: string;
    jti?: string;
    nbf?: string;
    user_metadata?: {
        [key: string]: any;
    };
}


================================================================================
File: tailwind.config.ts
================================================================================

import type { Config } from 'tailwindcss'

/**
 * @file Tailwind CSS configuration for South Italian Museum
 * @description Defines a culturally-inspired design system reflecting Southern Italian heritage
 * 
 * Design Philosophy:
 * - Colors inspired by Mediterranean landscapes, ancient architecture, and regional art
 * - Typography that balances modern readability with Italian design elegance
 * - Spacing and proportions that reflect classical Italian architectural principles
 * 
 * Cultural References:
 * - Terracotta: Traditional pottery and roof tiles of Southern Italy
 * - Stone colors: Lecce stone, travertine, and limestone common in the region
 * - Mediterranean blues: The deep blues of the Ionian and Tyrrhenian seas
 * - Olive tones: The ancient olive groves of Puglia and Calabria
 * 
 * @dependencies
 * - @tailwindcss/forms: Enhanced form styling
 * - @tailwindcss/typography: Rich prose content styling
 * - @tailwindcss/aspect-ratio: For artwork and exhibition image ratios
 * 
 * @notes
 * - Optimized for museum exhibitions, artifact displays, and cultural content
 * - Includes custom animations for interactive museum elements
 * - Responsive breakpoints consider both desktop kiosks and mobile visitors
 */

const config: Config = {
    content: [
        './src/**/*.{html,js,svelte,ts}',
        './node_modules/@project-name/ui/**/*.{js,ts,svelte}',
        './src/lib/components/**/*.{svelte,ts}',
        './src/routes/**/*.{svelte,ts}'
    ],

    theme: {
        extend: {
            colors: {
                // Primary palette inspired by Southern Italian heritage
                primary: {
                    50: '#eff6ff',
                    100: '#dbeafe',
                    200: '#bfdbfe',
                    300: '#93c5fd',
                    400: '#60a5fa',
                    500: '#2563eb', // Deep Mediterranean blue
                    600: '#1d4ed8',
                    700: '#1e40af',
                    800: '#1e3a8a',
                    900: '#1e3a8a',
                    950: '#172554'
                },

                // Secondary - Warm stone tones
                secondary: {
                    50: '#faf8f5',
                    100: '#f2ede4',
                    200: '#e6d7c3',
                    300: '#d4bc96',
                    400: '#c19b69',
                    500: '#a0806b', // Lecce stone
                    600: '#8b6f5b',
                    700: '#735c4c',
                    800: '#5f4d42',
                    900: '#4f4038',
                    950: '#2a221c'
                },

                // Accent - Tuscan gold
                accent: {
                    50: '#fffbeb',
                    100: '#fef3c7',
                    200: '#fde68a',
                    300: '#fcd34d',
                    400: '#fbbf24',
                    500: '#d69e2e', // Tuscan gold
                    600: '#b45309',
                    700: '#92400e',
                    800: '#78350f',
                    900: '#451a03',
                    950: '#292524'
                },

                // Terracotta - Traditional Italian pottery
                terracotta: {
                    50: '#fef7f0',
                    100: '#feecdc',
                    200: '#fcd9bd',
                    300: '#fdba8c',
                    400: '#ff8a4c',
                    500: '#cd853f', // Classic terracotta
                    600: '#c2410c',
                    700: '#9a3412',
                    800: '#7c2d12',
                    900: '#431407',
                    950: '#292524'
                },

                // Olive - Ancient groves of the South
                olive: {
                    50: '#f7f8f3',
                    100: '#eef0e5',
                    200: '#dde2cc',
                    300: '#c4d0a8',
                    400: '#a8ba7f',
                    500: '#6b7c32', // Olive green
                    600: '#5a6b2a',
                    700: '#4a5623',
                    800: '#3d471f',
                    900: '#343c1e',
                    950: '#1a200e'
                },

                // Supporting colors
                cream: {
                    50: '#fefdf9',
                    100: '#fef5e7', // Warm cream
                    200: '#fde8c8',
                    300: '#fbd38d',
                    400: '#f6ad55',
                    500: '#ed8936',
                    600: '#dd6b20',
                    700: '#c05621',
                    800: '#9c4221',
                    900: '#7b341e',
                    950: '#42180f'
                },

                // Neutral grays with warm undertones
                neutral: {
                    50: '#fafaf9',
                    100: '#f5f5f4',
                    200: '#e7e5e4',
                    300: '#d6d3d1',
                    400: '#a8a29e',
                    500: '#78716c',
                    600: '#57534e',
                    700: '#44403c',
                    800: '#292524',
                    900: '#1c1917',
                    950: '#0c0a09'
                },

                // Status colors with Italian flair
                success: '#22c55e',
                warning: '#f59e0b',
                error: '#ef4444',
                info: '#3b82f6',

                // Background variants
                background: {
                    DEFAULT: '#fefdf9', // Warm white
                    secondary: '#f8f7f4', // Subtle warm gray
                    dark: '#2d3748' // Sophisticated dark
                }
            },

            fontFamily: {
                // Elegant serif for headings - inspired by Italian typography
                heading: ['Playfair Display', 'Crimson Text', 'Georgia', 'serif'],
                // Clean sans-serif for body text with Italian character
                body: ['Inter', 'Open Sans', 'Helvetica Neue', 'sans-serif'],
                // Monospace for code and technical content
                mono: ['JetBrains Mono', 'Fira Code', 'Consolas', 'monospace'],
                // Special display font for museum titles
                display: ['Cinzel', 'Playfair Display', 'serif']
            },

            fontSize: {
                // Enhanced typography scale for museum content
                'xs': ['0.75rem', { lineHeight: '1rem' }],
                'sm': ['0.875rem', { lineHeight: '1.25rem' }],
                'base': ['1rem', { lineHeight: '1.5rem' }],
                'lg': ['1.125rem', { lineHeight: '1.75rem' }],
                'xl': ['1.25rem', { lineHeight: '1.75rem' }],
                '2xl': ['1.5rem', { lineHeight: '2rem' }],
                '3xl': ['1.875rem', { lineHeight: '2.25rem' }],
                '4xl': ['2.25rem', { lineHeight: '2.5rem' }],
                '5xl': ['3rem', { lineHeight: '1.2' }],
                '6xl': ['3.75rem', { lineHeight: '1.1' }],
                '7xl': ['4.5rem', { lineHeight: '1.1' }],
                '8xl': ['6rem', { lineHeight: '1' }],
                '9xl': ['8rem', { lineHeight: '1' }],
                // Custom sizes for museum displays
                'exhibit': ['2.5rem', { lineHeight: '1.2' }],
                'artifact': ['1.375rem', { lineHeight: '1.6' }]
            },

            spacing: {
                // Additional spacing values for museum layouts
                '18': '4.5rem',
                '22': '5.5rem',
                '26': '6.5rem',
                '30': '7.5rem',
                '34': '8.5rem',
                '38': '9.5rem',
                // Museum-specific spacing
                'card': '1.5rem',
                'section': '3rem',
                'exhibit': '4rem'
            },

            borderRadius: {
                // Organic, Mediterranean-inspired border radius
                'soft': '0.375rem',
                'medium': '0.75rem',
                'large': '1rem',
                'xl': '1.25rem',
                '2xl': '1.5rem',
                // Custom museum element radius
                'artifact': '0.5rem',
                'card': '0.75rem'
            },

            boxShadow: {
                // Soft, warm shadows inspired by Mediterranean light
                'soft': '0 2px 4px 0 rgba(0, 0, 0, 0.05)',
                'medium': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
                'large': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
                'warm': '0 4px 14px 0 rgba(205, 133, 63, 0.15)',
                'exhibit': '0 8px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -5px rgba(0, 0, 0, 0.04)'
            },

            animation: {
                // Gentle animations for museum interactions
                'fade-in': 'fadeIn 0.5s ease-in-out',
                'slide-up': 'slideUp 0.4s ease-out',
                'scale-in': 'scaleIn 0.3s ease-out',
                'float': 'float 3s ease-in-out infinite',
                'pulse-soft': 'pulseSoft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite'
            },

            keyframes: {
                fadeIn: {
                    '0%': { opacity: '0' },
                    '100%': { opacity: '1' }
                },
                slideUp: {
                    '0%': { transform: 'translateY(10px)', opacity: '0' },
                    '100%': { transform: 'translateY(0)', opacity: '1' }
                },
                scaleIn: {
                    '0%': { transform: 'scale(0.95)', opacity: '0' },
                    '100%': { transform: 'scale(1)', opacity: '1' }
                },
                float: {
                    '0%, 100%': { transform: 'translateY(0px)' },
                    '50%': { transform: 'translateY(-5px)' }
                },
                pulseSoft: {
                    '0%, 100%': { opacity: '1' },
                    '50%': { opacity: '0.8' }
                }
            },

            backdropBlur: {
                xs: '2px'
            },

            // Museum-specific breakpoints
            screens: {
                'xs': '475px',
                'kiosk': '1280px', // For museum kiosk displays
                'wall': '1920px'   // For wall-mounted displays
            }
        },
    },

    plugins: [
        require('@tailwindcss/forms')({
            strategy: 'class'
        }),
        require('@tailwindcss/typography')({
            target: 'modern'
        }),
        require('@tailwindcss/aspect-ratio')
    ],

    // Optimize for production
    future: {
        hoverOnlyWhenSupported: true,
    }
}

export default config


================================================================================
File: vite.config.ts
================================================================================

/**
 * @file Vite configuration for the Zungri Museum application
 * @purpose Configures Vite build tool with SvelteKit, Tailwind CSS, Paraglide i18n, and FastAPI proxy
 *
 * @dependencies
 * - @tailwindcss/vite: Tailwind CSS integration
 * - @sveltejs/kit/vite: SvelteKit integration
 * - @inlang/paraglide-vite: Paraglide i18n build plugin
 * - vite: Core build tool
 *
 * @notes
 * - Paraglide generates files in src/lib/paraglide based on project.inlang
 * - Optimized for development with HMR and external dependencies
 * - Configured for museum-specific requirements (maps, leaflet)
 * - Proxy configuration for FastAPI backend communication
 */
import tailwindcss from '@tailwindcss/vite';
import { sveltekit } from '@sveltejs/kit/vite';
import { paraglideVitePlugin } from '@inlang/paraglide-js';
import { defineConfig } from 'vite';
import path from 'path';

export default defineConfig({
	plugins: [
		tailwindcss(),
		sveltekit(),
		paraglideVitePlugin({
			project: './project.inlang',
			outdir: './src/lib/paraglide',
			strategy: ['url', 'cookie', 'baseLocale']
		})
	],

	optimizeDeps: {
		include: ['sveaflet']
	},

	ssr: {
		noExternal: ['sveaflet']
	},

	server: {
		hmr: { overlay: false },
		host: '0.0.0.0', // Listen on all network interfaces
		port: 5173, // Default port; change if needed
		strictPort: true, // Fail if the port is already in use

		// Fixed proxy configuration for FastAPI backend
		proxy: {
			// Match all API routes including /api/v1/
			'^/api/': {
				target: process.env.VITE_BACKEND_URL || 'http://localhost:8000',
				changeOrigin: true,
				secure: false, // Set to true if using HTTPS in production
				ws: true, // Enable WebSocket proxying if needed
				// Don't rewrite the path - keep /api/v1/ intact
				rewrite: undefined,
				configure: (proxy, options) => {
					proxy.on('error', (err, req, res) => {
						console.error('❌ Proxy error:', err.message);
						console.error('   Request URL:', req.url);
						console.error('   Target:', options.target);
					});

					proxy.on('proxyReq', (proxyReq, req, res) => {
						console.log('🔄 Proxying request:', req.method, req.url);
						console.log('   → Target:', `${options.target}${req.url}`);
					});

					proxy.on('proxyRes', (proxyRes, req, res) => {
						const status = proxyRes.statusCode;
						const statusIcon = status >= 200 && status < 300 ? '✅' :
							status >= 400 ? '❌' : '⚠️';
						console.log(`${statusIcon} Proxy response: ${status} for ${req.url}`);
					});

					// Handle proxy timeout
					proxy.on('proxyReqWs', (proxyReq, req, socket, options, head) => {
						console.log('🔄 WebSocket proxy request:', req.url);
					});
				}
			}
		},

		fs: {
			// Allow serving files from one level up to the project root
			// and specific paths within node_modules if necessary
			allow: [
				'..',
				'../../node_modules/.pnpm/sveaflet@0.1.4_@algolia+client-search@5.24.0_leaflet@1.9.4_search-insights@2.17.3_svelte@5.28.2/node_modules/sveaflet'
			]
		}
	},

	resolve: {
		alias: {
			// Alias for the entire src directory
			$src: path.resolve('./src'),
			// Alias specifically for src/api
			$api: path.resolve('./src/api'),
		}
	},

	// Environment variable configuration
	define: {
		// Make sure environment variables are available at build time
		__BACKEND_URL__: JSON.stringify(process.env.VITE_BACKEND_URL || 'http://localhost:8000'),
	},

	// Build configuration for production
	build: {
		// Ensure environment variables are included in build
		rollupOptions: {
			external: [],
			output: {
				manualChunks: {
					// Split vendor chunks for better caching
					vendor: ['svelte'],
					api: ['$api/apiClient']
				}
			}
		}
	}
});


Summary:
Files Processed: 53
Lines Written: 7560
Errors Encountered: 0
